2025-10-24 22:42:56,669 - root - INFO - setup_logging:135 - Logging setup complete. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-24 22:42:56,670 - root - INFO - timer:148 - Starting: Configuration loading and validation
2025-10-24 22:42:56,685 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from c:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-24 22:42:56,688 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-24 22:42:56,688 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-24 22:42:56,688 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-24 22:42:56,692 - root - INFO - validate_processing_config:232 - Processing configuration validation passed
2025-10-24 22:42:56,693 - root - INFO - timer:154 - Completed: Configuration loading and validation in 0.02 seconds
2025-10-24 22:42:56,695 - src.utils.output_manager - INFO - __init__:28 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-24 22:42:56,695 - root - INFO - main:601 - Processing dataset: block
2025-10-24 22:42:56,696 - root - INFO - timer:148 - Starting: Loading all test images
2025-10-24 22:42:57,411 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-24 22:42:58,298 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-24 22:42:58,758 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-24 22:42:59,277 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-24 22:42:59,791 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-24 22:42:59,792 - root - INFO - timer:154 - Completed: Loading all test images in 3.10 seconds
2025-10-24 22:42:59,792 - root - INFO - timer:148 - Starting: Loading training data
2025-10-24 22:42:59,792 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-24 22:43:01,764 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-24 22:43:01,764 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-24 22:43:01,768 - root - INFO - validate_loaded_data:267 - Data validation passed: 50000 total pixels available from 5 images.
2025-10-24 22:43:01,768 - root - INFO - timer:154 - Completed: Loading training data in 1.98 seconds
2025-10-24 22:43:01,769 - root - INFO - timer:148 - Starting: DBN initialization and training
2025-10-24 22:43:01,769 - src.models.dbn_trainer - INFO - __init__:48 - DBNTrainer initialized.
2025-10-24 22:43:01,769 - src.models.dbn_trainer - INFO - train:64 - Starting DBN training and PSO optimization process...
2025-10-24 22:43:01,769 - src.data.preprocess - INFO - efficient_data_sampling:207 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-24 22:43:01,771 - src.data.preprocess - INFO - efficient_data_sampling:282 - Sampling completed: 800 samples extracted.
2025-10-24 22:43:01,772 - src.data.preprocess - INFO - efficient_data_sampling:283 - RGB range: [32.00, 215.00]
2025-10-24 22:43:01,772 - src.data.preprocess - INFO - efficient_data_sampling:284 - LAB ranges: L[12.16, 84.71], a[-2.00, 2.00], b[-1.00, 8.00]
2025-10-24 22:43:01,773 - src.models.dbn_trainer - INFO - train:77 - Training set: (640, 3), Test set: (160, 3)
2025-10-24 22:43:01,774 - src.models.dbn_trainer - INFO - _prepare_scalers:109 - Preparing and fitting scalers...
2025-10-24 22:43:01,777 - src.models.dbn_trainer - INFO - _prepare_scalers:128 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-24 22:43:01,777 - src.models.dbn_trainer - INFO - _prepare_scalers:129 - X range: [0.000, 1.000]
2025-10-24 22:43:01,777 - src.models.dbn_trainer - INFO - _prepare_scalers:130 - Y range: [0.000, 1.000]
2025-10-24 22:43:01,777 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-24 22:43:02,060 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-24 22:43:02,110 - src.models.dbn_trainer - INFO - train:88 - Initial model has 20 weight layers
2025-10-24 22:43:02,111 - src.models.dbn_trainer - INFO - train:90 - Layer 0: shape (3, 100), range [-0.237, 0.240]
2025-10-24 22:43:02,111 - src.models.dbn_trainer - INFO - train:90 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-24 22:43:02,111 - src.models.dbn_trainer - INFO - train:90 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-24 22:43:02,111 - src.models.dbn_trainer - INFO - train:90 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-24 22:43:02,111 - src.models.dbn_trainer - INFO - train:90 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-24 22:43:02,111 - src.models.dbn_trainer - INFO - train:90 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-24 22:43:02,112 - src.models.dbn_trainer - INFO - train:90 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-24 22:43:02,112 - src.models.dbn_trainer - INFO - train:90 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-24 22:43:02,112 - src.models.dbn_trainer - INFO - train:90 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-24 22:43:02,112 - src.models.dbn_trainer - INFO - train:90 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-24 22:43:02,112 - src.models.dbn_trainer - INFO - train:90 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-24 22:43:02,112 - src.models.dbn_trainer - INFO - train:90 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-24 22:43:02,112 - src.models.dbn_trainer - INFO - train:90 - Layer 12: shape (50, 25), range [-0.283, 0.283]
2025-10-24 22:43:02,112 - src.models.dbn_trainer - INFO - train:90 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-24 22:43:02,113 - src.models.dbn_trainer - INFO - train:90 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-24 22:43:02,113 - src.models.dbn_trainer - INFO - train:90 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-24 22:43:02,113 - src.models.dbn_trainer - INFO - train:90 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-24 22:43:02,113 - src.models.dbn_trainer - INFO - train:90 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-24 22:43:02,113 - src.models.dbn_trainer - INFO - train:90 - Layer 18: shape (25, 3), range [-0.463, 0.441]
2025-10-24 22:43:02,113 - src.models.dbn_trainer - INFO - train:90 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-24 22:43:02,113 - src.models.dbn_trainer - INFO - _run_pso_with_retries:139 - PSO optimization attempt 1/3
2025-10-24 22:43:02,113 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-24 22:45:32,338 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 150.22s - Final fitness: 0.023033
2025-10-24 22:45:32,338 - src.models.dbn_trainer - INFO - _run_pso_with_retries:154 - PSO optimization completed successfully
2025-10-24 22:45:32,349 - src.models.dbn_trainer - INFO - train:96 - DBN training and PSO optimization complete.
2025-10-24 22:45:32,350 - root - INFO - timer:154 - Completed: DBN initialization and training in 150.58 seconds
2025-10-24 22:45:32,350 - root - INFO - timer:148 - Starting: Reference image loading and processing
2025-10-24 22:45:32,351 - root - INFO - process_reference_image:259 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-24 22:45:32,743 - root - INFO - process_reference_image:274 - Starting preprocessing for reference image
2025-10-24 22:45:32,743 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-24 22:45:32,771 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-24 22:45:34,079 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-24 22:45:34,398 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-24 22:45:35,131 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-24 22:45:35,132 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-24 22:45:35,132 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-24 22:45:35,132 - root - INFO - process_reference_image:278 - Preprocessing completed, shape: (128, 128, 3)
2025-10-24 22:45:35,132 - root - INFO - process_reference_image:286 - Determining optimal number of clusters for reference
2025-10-24 22:45:35,143 - src.models.segmentation.segmentation - INFO - determine_k:107 - Unique colors: 117. Adjusted k-range for metric search: [2, 8]
2025-10-24 22:45:35,143 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=2
2025-10-24 22:45:37,094 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=2: Silhouette=0.969, CH=1928285.9
2025-10-24 22:45:37,094 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=3
2025-10-24 22:45:38,962 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=3: Silhouette=0.805, CH=1358249.9
2025-10-24 22:45:38,962 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=4
2025-10-24 22:45:40,835 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=4: Silhouette=0.809, CH=1753242.4
2025-10-24 22:45:40,835 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=5
2025-10-24 22:45:42,859 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=5: Silhouette=0.738, CH=1875234.9
2025-10-24 22:45:42,859 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=6
2025-10-24 22:45:44,925 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=6: Silhouette=0.869, CH=2438844.2
2025-10-24 22:45:44,925 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=7
2025-10-24 22:45:46,778 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=7: Silhouette=0.877, CH=3597046.2
2025-10-24 22:45:46,778 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=8
2025-10-24 22:45:48,620 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=8: Silhouette=0.939, CH=4479793.0
2025-10-24 22:45:48,621 - src.models.segmentation.segmentation - INFO - determine_k:161 - Optimal k determined: 8 (based on score: 0.935)
2025-10-24 22:45:48,621 - root - INFO - process_reference_image:299 - Optimal clusters determined: 8
2025-10-24 22:45:48,621 - root - INFO - process_reference_image:305 - Determining DPC clusters
2025-10-24 22:45:48,631 - root - INFO - optimal_clusters_dpc:157 - Number of unique colors: 117. Using dynamic_max_k: 10
2025-10-24 22:45:48,633 - root - INFO - optimal_clusters_dpc:185 - Calculated DPC bandwidth: 104.590
2025-10-24 22:45:48,635 - root - INFO - optimal_clusters_dpc:218 - DPC gamma analysis: mean=372.415, std=2027.563, threshold=2399.978
2025-10-24 22:45:48,635 - root - INFO - optimal_clusters_dpc:229 - Optimal number of clusters estimated by DPC gamma heuristic: 2
2025-10-24 22:45:48,635 - root - INFO - process_reference_image:313 - Performing reference segmentation with k=8
2025-10-24 22:45:48,635 - src.models.segmentation.segmentation - INFO - __init__:245 - KMeansSegmenter initialized with k_type: predefined
2025-10-24 22:45:48,636 - src.models.segmentation.segmentation - INFO - quantize_image:192 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-24 22:45:48,833 - src.models.segmentation.segmentation - INFO - __init__:480 - SOMSegmenter initialized with k_type: predefined
2025-10-24 22:45:48,833 - src.models.segmentation.segmentation - INFO - quantize_image:192 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-24 22:45:48,959 - src.models.segmentation.segmentation - INFO - segment:502 - Running SOM segmentation with k=8
2025-10-24 22:45:49,428 - src.models.segmentation.segmentation - WARNING - segment:542 - SOM generated empty mask for cluster 2 (k=8). Skipping avg color.
2025-10-24 22:45:49,428 - src.models.segmentation.segmentation - WARNING - segment:542 - SOM generated empty mask for cluster 3 (k=8). Skipping avg color.
2025-10-24 22:45:49,429 - root - INFO - process_reference_image:346 - Reference image processing finished in 17.08 seconds.
2025-10-24 22:45:49,681 - root - INFO - run_reference_processing:382 - Formatted K-Means reference results.
2025-10-24 22:45:49,793 - root - INFO - run_reference_processing:418 - Formatted SOM reference results.
2025-10-24 22:45:51,023 - src.utils.output_manager - INFO - save_reference_summary:136 - Saved reference summary image to datasets\block\summaries\reference_summary.png
2025-10-24 22:45:51,024 - root - INFO - run_reference_processing:438 - Reference processed - Target LAB colors shape: (8, 3), DPC k: 2
2025-10-24 22:45:51,024 - root - INFO - timer:154 - Completed: Reference image loading and processing in 18.67 seconds
2025-10-24 22:45:51,031 - root - INFO - timer:148 - Starting: Processing test image block1
2025-10-24 22:45:51,032 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3950, 3950, 3)
2025-10-24 22:45:51,058 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3950x3950 to 512x512
2025-10-24 22:45:52,393 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-24 22:45:52,765 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 332 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-24 22:45:53,211 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-24 22:45:53,213 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-24 22:45:53,213 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-24 22:45:53,215 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-24 22:45:53,216 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: determined
2025-10-24 22:45:53,217 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 22:45:53,217 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: determined in 0.00 seconds
2025-10-24 22:45:53,217 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: predefined
2025-10-24 22:45:53,218 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 22:45:53,218 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: predefined in 0.00 seconds
2025-10-24 22:45:53,218 - root - INFO - timer:154 - Completed: Processing test image block1 in 2.19 seconds
2025-10-24 22:45:53,219 - root - INFO - timer:148 - Starting: Processing test image block2
2025-10-24 22:45:53,219 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-24 22:45:53,255 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-24 22:45:54,643 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-24 22:45:54,976 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 316 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-24 22:45:55,406 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-24 22:45:55,407 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-24 22:45:55,407 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-24 22:45:55,408 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-24 22:45:55,409 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: determined
2025-10-24 22:45:55,410 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 22:45:55,410 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: determined in 0.00 seconds
2025-10-24 22:45:55,410 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: predefined
2025-10-24 22:45:55,411 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 22:45:55,411 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: predefined in 0.00 seconds
2025-10-24 22:45:55,411 - root - INFO - timer:154 - Completed: Processing test image block2 in 2.19 seconds
2025-10-24 22:45:55,412 - root - INFO - timer:148 - Starting: Processing test image block3
2025-10-24 22:45:55,412 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3477, 3477, 3)
2025-10-24 22:45:55,436 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3477x3477 to 511x511
2025-10-24 22:45:56,739 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-24 22:45:57,068 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 358 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-24 22:45:57,491 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-24 22:45:57,493 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-24 22:45:57,493 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-24 22:45:57,494 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-24 22:45:57,495 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: determined
2025-10-24 22:45:57,496 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 22:45:57,496 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: determined in 0.00 seconds
2025-10-24 22:45:57,496 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: predefined
2025-10-24 22:45:57,497 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 22:45:57,497 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: predefined in 0.00 seconds
2025-10-24 22:45:57,498 - root - INFO - timer:154 - Completed: Processing test image block3 in 2.09 seconds
2025-10-24 22:45:57,498 - root - INFO - timer:148 - Starting: Processing test image block4
2025-10-24 22:45:57,499 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3622, 3622, 3)
2025-10-24 22:45:57,523 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3622x3622 to 512x512
2025-10-24 22:45:58,937 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-24 22:45:59,290 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 258 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-24 22:45:59,712 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-24 22:45:59,713 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-24 22:45:59,713 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-24 22:45:59,714 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-24 22:45:59,715 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: determined
2025-10-24 22:45:59,716 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 22:45:59,716 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: determined in 0.00 seconds
2025-10-24 22:45:59,716 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: predefined
2025-10-24 22:45:59,717 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 22:45:59,717 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: predefined in 0.00 seconds
2025-10-24 22:45:59,717 - root - INFO - timer:154 - Completed: Processing test image block4 in 2.22 seconds
2025-10-24 22:45:59,718 - root - INFO - timer:148 - Starting: Processing test image block5
2025-10-24 22:45:59,718 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3504, 3504, 3)
2025-10-24 22:45:59,741 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3504x3504 to 512x512
2025-10-24 22:46:00,997 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-24 22:46:01,313 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 307 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-24 22:46:01,731 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-24 22:46:01,732 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-24 22:46:01,732 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-24 22:46:01,733 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-24 22:46:01,734 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: determined
2025-10-24 22:46:01,735 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 22:46:01,735 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: determined in 0.00 seconds
2025-10-24 22:46:01,735 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: predefined
2025-10-24 22:46:01,736 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 22:46:01,736 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: predefined in 0.00 seconds
2025-10-24 22:46:01,737 - root - INFO - timer:154 - Completed: Processing test image block5 in 2.02 seconds
2025-10-24 22:46:01,738 - root - INFO - main:684 - ================================================================================
PROCESSING COMPLETED IN 185.07 SECONDS
================================================================================
2025-10-24 22:46:01,787 - root - INFO - main:692 - Profiling results saved to: C:\Users\LENOVO\Desktop\prints\output\profile_stats.txt
2025-10-24 23:49:09,524 - root - INFO - setup_logging:135 - Logging setup complete. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-24 23:49:09,526 - root - INFO - timer:148 - Starting: Configuration loading and validation
2025-10-24 23:49:09,541 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from c:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-24 23:49:09,545 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-24 23:49:09,545 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-24 23:49:09,545 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-24 23:49:09,548 - root - INFO - validate_processing_config:232 - Processing configuration validation passed
2025-10-24 23:49:09,548 - root - INFO - timer:154 - Completed: Configuration loading and validation in 0.02 seconds
2025-10-24 23:49:09,553 - src.utils.output_manager - INFO - __init__:28 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-24 23:49:09,553 - root - INFO - main:601 - Processing dataset: block
2025-10-24 23:49:09,555 - root - INFO - timer:148 - Starting: Loading all test images
2025-10-24 23:49:10,302 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-24 23:49:11,274 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-24 23:49:11,780 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-24 23:49:12,356 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-24 23:49:12,907 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-24 23:49:12,907 - root - INFO - timer:154 - Completed: Loading all test images in 3.35 seconds
2025-10-24 23:49:12,908 - root - INFO - timer:148 - Starting: Loading training data
2025-10-24 23:49:12,908 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-24 23:49:14,906 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-24 23:49:14,906 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-24 23:49:14,910 - root - INFO - validate_loaded_data:267 - Data validation passed: 50000 total pixels available from 5 images.
2025-10-24 23:49:14,910 - root - INFO - timer:154 - Completed: Loading training data in 2.00 seconds
2025-10-24 23:49:14,911 - root - INFO - timer:148 - Starting: DBN initialization and training
2025-10-24 23:49:14,911 - src.models.dbn_trainer - INFO - __init__:48 - DBNTrainer initialized.
2025-10-24 23:49:14,911 - src.models.dbn_trainer - INFO - train:64 - Starting DBN training and PSO optimization process...
2025-10-24 23:49:14,911 - src.data.preprocess - INFO - efficient_data_sampling:207 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-24 23:49:14,915 - src.data.preprocess - INFO - efficient_data_sampling:282 - Sampling completed: 800 samples extracted.
2025-10-24 23:49:14,915 - src.data.preprocess - INFO - efficient_data_sampling:283 - RGB range: [31.00, 214.00]
2025-10-24 23:49:14,915 - src.data.preprocess - INFO - efficient_data_sampling:284 - LAB ranges: L[12.16, 84.31], a[-2.00, 2.00], b[-1.00, 9.00]
2025-10-24 23:49:14,916 - src.models.dbn_trainer - INFO - train:77 - Training set: (640, 3), Test set: (160, 3)
2025-10-24 23:49:14,917 - src.models.dbn_trainer - INFO - _prepare_scalers:109 - Preparing and fitting scalers...
2025-10-24 23:49:14,920 - src.models.dbn_trainer - INFO - _prepare_scalers:128 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-24 23:49:14,920 - src.models.dbn_trainer - INFO - _prepare_scalers:129 - X range: [0.000, 1.000]
2025-10-24 23:49:14,920 - src.models.dbn_trainer - INFO - _prepare_scalers:130 - Y range: [0.000, 1.000]
2025-10-24 23:49:14,921 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-24 23:49:15,240 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-24 23:49:15,300 - src.models.dbn_trainer - INFO - train:88 - Initial model has 20 weight layers
2025-10-24 23:49:15,301 - src.models.dbn_trainer - INFO - train:90 - Layer 0: shape (3, 100), range [-0.241, 0.241]
2025-10-24 23:49:15,301 - src.models.dbn_trainer - INFO - train:90 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-24 23:49:15,301 - src.models.dbn_trainer - INFO - train:90 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-24 23:49:15,301 - src.models.dbn_trainer - INFO - train:90 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-24 23:49:15,302 - src.models.dbn_trainer - INFO - train:90 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-24 23:49:15,302 - src.models.dbn_trainer - INFO - train:90 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-24 23:49:15,302 - src.models.dbn_trainer - INFO - train:90 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-24 23:49:15,302 - src.models.dbn_trainer - INFO - train:90 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-24 23:49:15,302 - src.models.dbn_trainer - INFO - train:90 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-24 23:49:15,302 - src.models.dbn_trainer - INFO - train:90 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-24 23:49:15,302 - src.models.dbn_trainer - INFO - train:90 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-24 23:49:15,302 - src.models.dbn_trainer - INFO - train:90 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-24 23:49:15,303 - src.models.dbn_trainer - INFO - train:90 - Layer 12: shape (50, 25), range [-0.283, 0.282]
2025-10-24 23:49:15,303 - src.models.dbn_trainer - INFO - train:90 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-24 23:49:15,303 - src.models.dbn_trainer - INFO - train:90 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-24 23:49:15,303 - src.models.dbn_trainer - INFO - train:90 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-24 23:49:15,303 - src.models.dbn_trainer - INFO - train:90 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-24 23:49:15,303 - src.models.dbn_trainer - INFO - train:90 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-24 23:49:15,304 - src.models.dbn_trainer - INFO - train:90 - Layer 18: shape (25, 3), range [-0.453, 0.453]
2025-10-24 23:49:15,304 - src.models.dbn_trainer - INFO - train:90 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-24 23:49:15,304 - src.models.dbn_trainer - INFO - _run_pso_with_retries:139 - PSO optimization attempt 1/3
2025-10-24 23:49:15,304 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-24 23:51:59,432 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 164.12s - Final fitness: 0.037198
2025-10-24 23:51:59,432 - src.models.dbn_trainer - INFO - _run_pso_with_retries:154 - PSO optimization completed successfully
2025-10-24 23:51:59,442 - src.models.dbn_trainer - INFO - train:96 - DBN training and PSO optimization complete.
2025-10-24 23:51:59,442 - root - INFO - timer:154 - Completed: DBN initialization and training in 164.53 seconds
2025-10-24 23:51:59,443 - root - INFO - timer:148 - Starting: Reference image loading and processing
2025-10-24 23:51:59,443 - root - INFO - process_reference_image:259 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-24 23:51:59,830 - root - INFO - process_reference_image:274 - Starting preprocessing for reference image
2025-10-24 23:51:59,830 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-24 23:51:59,864 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-24 23:52:01,178 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-24 23:52:01,496 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-24 23:52:02,201 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-24 23:52:02,202 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-24 23:52:02,202 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-24 23:52:02,203 - root - INFO - process_reference_image:278 - Preprocessing completed, shape: (128, 128, 3)
2025-10-24 23:52:02,203 - root - INFO - process_reference_image:286 - Determining optimal number of clusters for reference
2025-10-24 23:52:02,214 - src.models.segmentation.segmentation - INFO - determine_k:107 - Unique colors: 124. Adjusted k-range for metric search: [2, 8]
2025-10-24 23:52:02,214 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=2
2025-10-24 23:52:04,165 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=2: Silhouette=0.970, CH=1971910.2
2025-10-24 23:52:04,165 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=3
2025-10-24 23:52:06,067 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=3: Silhouette=0.943, CH=1529733.1
2025-10-24 23:52:06,067 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=4
2025-10-24 23:52:07,966 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=4: Silhouette=0.791, CH=1666435.5
2025-10-24 23:52:07,966 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=5
2025-10-24 23:52:09,817 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=5: Silhouette=0.792, CH=1598665.2
2025-10-24 23:52:09,817 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=6
2025-10-24 23:52:11,678 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=6: Silhouette=0.906, CH=1821789.6
2025-10-24 23:52:11,678 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=7
2025-10-24 23:52:13,499 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=7: Silhouette=0.866, CH=3243690.8
2025-10-24 23:52:13,499 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=8
2025-10-24 23:52:15,330 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=8: Silhouette=0.895, CH=3657136.2
2025-10-24 23:52:15,330 - src.models.segmentation.segmentation - INFO - determine_k:161 - Optimal k determined: 8 (based on score: 0.790)
2025-10-24 23:52:15,331 - root - INFO - process_reference_image:299 - Optimal clusters determined: 8
2025-10-24 23:52:15,331 - root - INFO - process_reference_image:305 - Determining DPC clusters
2025-10-24 23:52:15,341 - root - INFO - optimal_clusters_dpc:157 - Number of unique colors: 124. Using dynamic_max_k: 10
2025-10-24 23:52:15,343 - root - INFO - optimal_clusters_dpc:185 - Calculated DPC bandwidth: 108.042
2025-10-24 23:52:15,345 - root - INFO - optimal_clusters_dpc:218 - DPC gamma analysis: mean=370.008, std=2041.488, threshold=2411.497
2025-10-24 23:52:15,345 - root - INFO - optimal_clusters_dpc:229 - Optimal number of clusters estimated by DPC gamma heuristic: 2
2025-10-24 23:52:15,346 - root - INFO - process_reference_image:313 - Performing reference segmentation with k=8
2025-10-24 23:52:15,346 - src.models.segmentation.segmentation - INFO - __init__:245 - KMeansSegmenter initialized with k_type: predefined
2025-10-24 23:52:15,346 - src.models.segmentation.segmentation - INFO - quantize_image:192 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-24 23:52:15,522 - src.models.segmentation.segmentation - INFO - __init__:480 - SOMSegmenter initialized with k_type: predefined
2025-10-24 23:52:15,522 - src.models.segmentation.segmentation - INFO - quantize_image:192 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-24 23:52:15,652 - src.models.segmentation.segmentation - INFO - segment:502 - Running SOM segmentation with k=8
2025-10-24 23:52:16,119 - src.models.segmentation.segmentation - WARNING - segment:542 - SOM generated empty mask for cluster 4 (k=8). Skipping avg color.
2025-10-24 23:52:16,119 - root - INFO - process_reference_image:346 - Reference image processing finished in 16.68 seconds.
2025-10-24 23:52:16,379 - root - INFO - run_reference_processing:382 - Formatted K-Means reference results.
2025-10-24 23:52:16,499 - root - INFO - run_reference_processing:418 - Formatted SOM reference results.
2025-10-24 23:52:17,711 - src.utils.output_manager - INFO - save_reference_summary:136 - Saved reference summary image to datasets\block\summaries\reference_summary.png
2025-10-24 23:52:17,711 - root - INFO - run_reference_processing:438 - Reference processed - Target LAB colors shape: (8, 3), DPC k: 2
2025-10-24 23:52:17,711 - root - INFO - timer:154 - Completed: Reference image loading and processing in 18.27 seconds
2025-10-24 23:52:17,719 - root - INFO - timer:148 - Starting: Processing test image block1
2025-10-24 23:52:17,719 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3950, 3950, 3)
2025-10-24 23:52:17,746 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3950x3950 to 512x512
2025-10-24 23:52:19,055 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-24 23:52:19,392 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 332 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-24 23:52:19,843 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-24 23:52:19,844 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-24 23:52:19,844 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-24 23:52:19,845 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-24 23:52:19,846 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: determined
2025-10-24 23:52:19,847 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 23:52:19,847 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: determined in 0.00 seconds
2025-10-24 23:52:19,847 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: predefined
2025-10-24 23:52:19,848 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 23:52:19,848 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: predefined in 0.00 seconds
2025-10-24 23:52:19,849 - root - INFO - timer:154 - Completed: Processing test image block1 in 2.13 seconds
2025-10-24 23:52:19,849 - root - INFO - timer:148 - Starting: Processing test image block2
2025-10-24 23:52:19,849 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-24 23:52:19,882 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-24 23:52:21,197 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-24 23:52:21,522 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 316 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-24 23:52:21,946 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-24 23:52:21,947 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-24 23:52:21,947 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-24 23:52:21,949 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-24 23:52:21,949 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: determined
2025-10-24 23:52:21,950 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 23:52:21,950 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: determined in 0.00 seconds
2025-10-24 23:52:21,950 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: predefined
2025-10-24 23:52:21,951 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 23:52:21,951 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: predefined in 0.00 seconds
2025-10-24 23:52:21,952 - root - INFO - timer:154 - Completed: Processing test image block2 in 2.10 seconds
2025-10-24 23:52:21,952 - root - INFO - timer:148 - Starting: Processing test image block3
2025-10-24 23:52:21,953 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3477, 3477, 3)
2025-10-24 23:52:21,975 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3477x3477 to 511x511
2025-10-24 23:52:23,255 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-24 23:52:23,572 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 358 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-24 23:52:24,004 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-24 23:52:24,006 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-24 23:52:24,006 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-24 23:52:24,008 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-24 23:52:24,008 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: determined
2025-10-24 23:52:24,009 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 23:52:24,009 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: determined in 0.00 seconds
2025-10-24 23:52:24,009 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: predefined
2025-10-24 23:52:24,010 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 23:52:24,010 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: predefined in 0.00 seconds
2025-10-24 23:52:24,011 - root - INFO - timer:154 - Completed: Processing test image block3 in 2.06 seconds
2025-10-24 23:52:24,011 - root - INFO - timer:148 - Starting: Processing test image block4
2025-10-24 23:52:24,012 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3622, 3622, 3)
2025-10-24 23:52:24,032 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3622x3622 to 512x512
2025-10-24 23:52:25,291 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-24 23:52:25,633 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 258 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-24 23:52:26,057 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-24 23:52:26,059 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-24 23:52:26,059 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-24 23:52:26,060 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-24 23:52:26,061 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: determined
2025-10-24 23:52:26,061 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 23:52:26,061 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: determined in 0.00 seconds
2025-10-24 23:52:26,062 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: predefined
2025-10-24 23:52:26,063 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 23:52:26,063 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: predefined in 0.00 seconds
2025-10-24 23:52:26,063 - root - INFO - timer:154 - Completed: Processing test image block4 in 2.05 seconds
2025-10-24 23:52:26,064 - root - INFO - timer:148 - Starting: Processing test image block5
2025-10-24 23:52:26,065 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3504, 3504, 3)
2025-10-24 23:52:26,087 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3504x3504 to 512x512
2025-10-24 23:52:27,388 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-24 23:52:27,760 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 307 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-24 23:52:28,189 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-24 23:52:28,190 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-24 23:52:28,191 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-24 23:52:28,192 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-24 23:52:28,192 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: determined
2025-10-24 23:52:28,193 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 23:52:28,193 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: determined in 0.00 seconds
2025-10-24 23:52:28,193 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: predefined
2025-10-24 23:52:28,194 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-24 23:52:28,194 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: predefined in 0.00 seconds
2025-10-24 23:52:28,194 - root - INFO - timer:154 - Completed: Processing test image block5 in 2.13 seconds
2025-10-24 23:52:28,196 - root - INFO - main:684 - ================================================================================
PROCESSING COMPLETED IN 198.67 SECONDS
================================================================================
2025-10-24 23:52:28,258 - root - INFO - main:692 - Profiling results saved to: C:\Users\LENOVO\Desktop\prints\output\profile_stats.txt
2025-10-25 00:06:06,177 - root - INFO - setup_logging:135 - Logging setup complete. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-25 00:06:06,178 - root - INFO - timer:148 - Starting: Configuration loading and validation
2025-10-25 00:06:06,188 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from c:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-25 00:06:06,190 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-25 00:06:06,190 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-25 00:06:06,190 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-25 00:06:06,190 - root - INFO - validate_processing_config:232 - Processing configuration validation passed
2025-10-25 00:06:06,196 - root - INFO - timer:154 - Completed: Configuration loading and validation in 0.02 seconds
2025-10-25 00:06:06,198 - src.utils.output_manager - INFO - __init__:28 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-25 00:06:06,198 - root - INFO - main:601 - Processing dataset: block
2025-10-25 00:06:06,199 - root - INFO - timer:148 - Starting: Loading all test images
2025-10-25 00:06:06,885 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-25 00:06:07,711 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-25 00:06:08,165 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-25 00:06:08,682 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-25 00:06:09,199 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-25 00:06:09,199 - root - INFO - timer:154 - Completed: Loading all test images in 3.00 seconds
2025-10-25 00:06:09,199 - root - INFO - timer:148 - Starting: Loading training data
2025-10-25 00:06:09,199 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-25 00:06:11,238 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-25 00:06:11,238 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-25 00:06:11,238 - root - INFO - validate_loaded_data:267 - Data validation passed: 50000 total pixels available from 5 images.
2025-10-25 00:06:11,238 - root - INFO - timer:154 - Completed: Loading training data in 2.04 seconds
2025-10-25 00:06:11,238 - root - INFO - timer:148 - Starting: DBN initialization and training
2025-10-25 00:06:11,238 - src.models.dbn_trainer - INFO - __init__:48 - DBNTrainer initialized.
2025-10-25 00:06:11,238 - src.models.dbn_trainer - INFO - train:64 - Starting DBN training and PSO optimization process...
2025-10-25 00:06:11,238 - src.data.preprocess - INFO - efficient_data_sampling:207 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-25 00:06:11,238 - src.data.preprocess - INFO - efficient_data_sampling:282 - Sampling completed: 800 samples extracted.
2025-10-25 00:06:11,238 - src.data.preprocess - INFO - efficient_data_sampling:283 - RGB range: [31.00, 214.00]
2025-10-25 00:06:11,238 - src.data.preprocess - INFO - efficient_data_sampling:284 - LAB ranges: L[11.76, 84.31], a[-2.00, 3.00], b[-1.00, 8.00]
2025-10-25 00:06:11,238 - src.models.dbn_trainer - INFO - train:77 - Training set: (640, 3), Test set: (160, 3)
2025-10-25 00:06:11,238 - src.models.dbn_trainer - INFO - _prepare_scalers:109 - Preparing and fitting scalers...
2025-10-25 00:06:11,238 - src.models.dbn_trainer - INFO - _prepare_scalers:128 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-25 00:06:11,238 - src.models.dbn_trainer - INFO - _prepare_scalers:129 - X range: [0.000, 1.000]
2025-10-25 00:06:11,238 - src.models.dbn_trainer - INFO - _prepare_scalers:130 - Y range: [0.000, 1.000]
2025-10-25 00:06:11,238 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-25 00:06:11,554 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:88 - Initial model has 20 weight layers
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:90 - Layer 0: shape (3, 100), range [-0.241, 0.240]
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:90 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:90 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:90 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:90 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:90 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:90 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:90 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:90 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:90 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:90 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:90 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:90 - Layer 12: shape (50, 25), range [-0.282, 0.283]
2025-10-25 00:06:11,601 - src.models.dbn_trainer - INFO - train:90 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-25 00:06:11,617 - src.models.dbn_trainer - INFO - train:90 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-25 00:06:11,617 - src.models.dbn_trainer - INFO - train:90 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-25 00:06:11,617 - src.models.dbn_trainer - INFO - train:90 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-25 00:06:11,617 - src.models.dbn_trainer - INFO - train:90 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-25 00:06:11,617 - src.models.dbn_trainer - INFO - train:90 - Layer 18: shape (25, 3), range [-0.463, 0.461]
2025-10-25 00:06:11,617 - src.models.dbn_trainer - INFO - train:90 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-25 00:06:11,617 - src.models.dbn_trainer - INFO - _run_pso_with_retries:139 - PSO optimization attempt 1/3
2025-10-25 00:06:11,617 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-25 00:08:48,331 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 156.71s - Final fitness: 0.046775
2025-10-25 00:08:48,331 - src.models.dbn_trainer - INFO - _run_pso_with_retries:154 - PSO optimization completed successfully
2025-10-25 00:08:48,353 - src.models.dbn_trainer - INFO - train:96 - DBN training and PSO optimization complete.
2025-10-25 00:08:48,353 - root - INFO - timer:154 - Completed: DBN initialization and training in 157.11 seconds
2025-10-25 00:08:48,353 - root - INFO - timer:148 - Starting: Reference image loading and processing
2025-10-25 00:08:48,353 - root - INFO - process_reference_image:259 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-25 00:08:48,758 - root - INFO - process_reference_image:274 - Starting preprocessing for reference image
2025-10-25 00:08:48,758 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 00:08:48,785 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 00:08:50,099 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:08:50,415 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:08:51,185 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:08:51,185 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:08:51,185 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:08:51,185 - root - INFO - process_reference_image:278 - Preprocessing completed, shape: (128, 128, 3)
2025-10-25 00:08:51,185 - root - INFO - process_reference_image:286 - Determining optimal number of clusters for reference
2025-10-25 00:08:51,185 - src.models.segmentation.segmentation - INFO - determine_k:107 - Unique colors: 102. Adjusted k-range for metric search: [2, 8]
2025-10-25 00:08:51,185 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=2
2025-10-25 00:08:53,120 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=2: Silhouette=0.971, CH=2036843.9
2025-10-25 00:08:53,120 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=3
2025-10-25 00:08:54,994 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=3: Silhouette=0.806, CH=1422099.1
2025-10-25 00:08:54,994 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=4
2025-10-25 00:08:56,828 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=4: Silhouette=0.798, CH=1916255.9
2025-10-25 00:08:56,828 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=5
2025-10-25 00:08:58,694 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=5: Silhouette=0.761, CH=2180757.0
2025-10-25 00:08:58,694 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=6
2025-10-25 00:09:00,510 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=6: Silhouette=0.909, CH=2959141.5
2025-10-25 00:09:00,510 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=7
2025-10-25 00:09:02,385 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=7: Silhouette=0.915, CH=4183990.0
2025-10-25 00:09:02,385 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=8
2025-10-25 00:09:04,220 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=8: Silhouette=0.917, CH=5306122.5
2025-10-25 00:09:04,220 - src.models.segmentation.segmentation - INFO - determine_k:161 - Optimal k determined: 8 (based on score: 0.871)
2025-10-25 00:09:04,220 - root - INFO - process_reference_image:299 - Optimal clusters determined: 8
2025-10-25 00:09:04,220 - root - INFO - process_reference_image:305 - Determining DPC clusters
2025-10-25 00:09:04,235 - root - INFO - optimal_clusters_dpc:157 - Number of unique colors: 102. Using dynamic_max_k: 10
2025-10-25 00:09:04,235 - root - INFO - optimal_clusters_dpc:185 - Calculated DPC bandwidth: 110.368
2025-10-25 00:09:04,235 - root - INFO - optimal_clusters_dpc:218 - DPC gamma analysis: mean=376.637, std=1925.684, threshold=2302.321
2025-10-25 00:09:04,235 - root - INFO - optimal_clusters_dpc:229 - Optimal number of clusters estimated by DPC gamma heuristic: 2
2025-10-25 00:09:04,235 - root - INFO - process_reference_image:313 - Performing reference segmentation with k=8
2025-10-25 00:09:04,235 - src.models.segmentation.segmentation - INFO - __init__:247 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 00:09:04,235 - src.models.segmentation.segmentation - INFO - quantize_image:194 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 00:09:04,432 - src.models.segmentation.segmentation - INFO - __init__:482 - SOMSegmenter initialized with k_type: predefined
2025-10-25 00:09:04,432 - src.models.segmentation.segmentation - INFO - quantize_image:194 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 00:09:04,575 - src.models.segmentation.segmentation - INFO - segment:504 - Running SOM segmentation with k=8
2025-10-25 00:09:05,041 - src.models.segmentation.segmentation - WARNING - segment:544 - SOM generated empty mask for cluster 2 (k=8). Skipping avg color.
2025-10-25 00:09:05,041 - src.models.segmentation.segmentation - WARNING - segment:544 - SOM generated empty mask for cluster 3 (k=8). Skipping avg color.
2025-10-25 00:09:05,041 - src.models.segmentation.segmentation - WARNING - segment:544 - SOM generated empty mask for cluster 4 (k=8). Skipping avg color.
2025-10-25 00:09:05,041 - root - INFO - process_reference_image:346 - Reference image processing finished in 16.69 seconds.
2025-10-25 00:09:05,300 - root - INFO - run_reference_processing:382 - Formatted K-Means reference results.
2025-10-25 00:09:05,430 - root - INFO - run_reference_processing:418 - Formatted SOM reference results.
2025-10-25 00:09:06,641 - src.utils.output_manager - INFO - save_reference_summary:136 - Saved reference summary image to datasets\block\summaries\reference_summary.png
2025-10-25 00:09:06,641 - root - INFO - run_reference_processing:438 - Reference processed - Target LAB colors shape: (8, 3), DPC k: 2
2025-10-25 00:09:06,641 - root - INFO - timer:154 - Completed: Reference image loading and processing in 18.29 seconds
2025-10-25 00:09:06,641 - root - INFO - timer:148 - Starting: Processing test image block1
2025-10-25 00:09:06,654 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3950, 3950, 3)
2025-10-25 00:09:06,678 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3950x3950 to 512x512
2025-10-25 00:09:08,030 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:09:08,368 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 332 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:09:08,809 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:09:08,810 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:09:08,810 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:09:08,810 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-25 00:09:08,810 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: determined
2025-10-25 00:09:08,810 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:09:08,810 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: determined in 0.00 seconds
2025-10-25 00:09:08,810 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: predefined
2025-10-25 00:09:08,810 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:09:08,810 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: predefined in 0.00 seconds
2025-10-25 00:09:08,810 - root - INFO - timer:154 - Completed: Processing test image block1 in 2.16 seconds
2025-10-25 00:09:08,810 - root - INFO - timer:148 - Starting: Processing test image block2
2025-10-25 00:09:08,810 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 00:09:08,850 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 00:09:10,254 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:09:10,604 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 316 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:09:11,059 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:09:11,059 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:09:11,059 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:09:11,059 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-25 00:09:11,059 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: determined
2025-10-25 00:09:11,059 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:09:11,059 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: determined in 0.00 seconds
2025-10-25 00:09:11,059 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: predefined
2025-10-25 00:09:11,059 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:09:11,059 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: predefined in 0.00 seconds
2025-10-25 00:09:11,059 - root - INFO - timer:154 - Completed: Processing test image block2 in 2.25 seconds
2025-10-25 00:09:11,059 - root - INFO - timer:148 - Starting: Processing test image block3
2025-10-25 00:09:11,059 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3477, 3477, 3)
2025-10-25 00:09:11,093 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3477x3477 to 511x511
2025-10-25 00:09:12,445 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:09:12,815 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 358 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:09:13,248 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:09:13,250 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:09:13,250 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:09:13,250 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-25 00:09:13,250 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: determined
2025-10-25 00:09:13,250 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:09:13,250 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: determined in 0.00 seconds
2025-10-25 00:09:13,250 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: predefined
2025-10-25 00:09:13,250 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:09:13,250 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: predefined in 0.00 seconds
2025-10-25 00:09:13,250 - root - INFO - timer:154 - Completed: Processing test image block3 in 2.19 seconds
2025-10-25 00:09:13,250 - root - INFO - timer:148 - Starting: Processing test image block4
2025-10-25 00:09:13,250 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3622, 3622, 3)
2025-10-25 00:09:13,280 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3622x3622 to 512x512
2025-10-25 00:09:14,736 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:09:15,108 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 258 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:09:15,593 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:09:15,593 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:09:15,593 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:09:15,593 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-25 00:09:15,593 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: determined
2025-10-25 00:09:15,593 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:09:15,593 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: determined in 0.00 seconds
2025-10-25 00:09:15,593 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: predefined
2025-10-25 00:09:15,593 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:09:15,593 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: predefined in 0.00 seconds
2025-10-25 00:09:15,593 - root - INFO - timer:154 - Completed: Processing test image block4 in 2.35 seconds
2025-10-25 00:09:15,593 - root - INFO - timer:148 - Starting: Processing test image block5
2025-10-25 00:09:15,593 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3504, 3504, 3)
2025-10-25 00:09:15,632 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3504x3504 to 512x512
2025-10-25 00:09:16,942 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:09:17,272 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 307 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:09:17,710 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:09:17,710 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:09:17,710 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:09:17,710 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-25 00:09:17,710 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: determined
2025-10-25 00:09:17,710 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:09:17,710 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: determined in 0.00 seconds
2025-10-25 00:09:17,710 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: predefined
2025-10-25 00:09:17,710 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:09:17,710 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: predefined in 0.00 seconds
2025-10-25 00:09:17,710 - root - INFO - timer:154 - Completed: Processing test image block5 in 2.11 seconds
2025-10-25 00:09:17,710 - root - INFO - main:684 - ================================================================================
PROCESSING COMPLETED IN 191.55 SECONDS
================================================================================
2025-10-25 00:09:17,773 - root - INFO - main:692 - Profiling results saved to: C:\Users\LENOVO\Desktop\prints\output\profile_stats.txt
2025-10-25 00:15:45,595 - root - INFO - setup_logging:135 - Logging setup complete. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-25 00:15:45,596 - root - INFO - timer:148 - Starting: Configuration loading and validation
2025-10-25 00:15:45,610 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from c:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-25 00:15:45,618 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-25 00:15:45,618 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-25 00:15:45,618 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-25 00:15:45,620 - root - INFO - validate_processing_config:232 - Processing configuration validation passed
2025-10-25 00:15:45,621 - root - INFO - timer:154 - Completed: Configuration loading and validation in 0.02 seconds
2025-10-25 00:15:45,623 - src.utils.output_manager - INFO - __init__:28 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-25 00:15:45,623 - root - INFO - main:601 - Processing dataset: block
2025-10-25 00:15:45,624 - root - INFO - timer:148 - Starting: Loading all test images
2025-10-25 00:15:46,327 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-25 00:15:47,277 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-25 00:15:47,921 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-25 00:15:48,545 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-25 00:15:49,208 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-25 00:15:49,208 - root - INFO - timer:154 - Completed: Loading all test images in 3.58 seconds
2025-10-25 00:15:49,210 - root - INFO - timer:148 - Starting: Loading training data
2025-10-25 00:15:49,211 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-25 00:15:51,519 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-25 00:15:51,519 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-25 00:15:51,519 - root - INFO - validate_loaded_data:267 - Data validation passed: 50000 total pixels available from 5 images.
2025-10-25 00:15:51,519 - root - INFO - timer:154 - Completed: Loading training data in 2.31 seconds
2025-10-25 00:15:51,525 - root - INFO - timer:148 - Starting: DBN initialization and training
2025-10-25 00:15:51,525 - src.models.dbn_trainer - INFO - __init__:48 - DBNTrainer initialized.
2025-10-25 00:15:51,525 - src.models.dbn_trainer - INFO - train:64 - Starting DBN training and PSO optimization process...
2025-10-25 00:15:51,525 - src.data.preprocess - INFO - efficient_data_sampling:207 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-25 00:15:51,525 - src.data.preprocess - INFO - efficient_data_sampling:282 - Sampling completed: 800 samples extracted.
2025-10-25 00:15:51,525 - src.data.preprocess - INFO - efficient_data_sampling:283 - RGB range: [30.00, 215.00]
2025-10-25 00:15:51,525 - src.data.preprocess - INFO - efficient_data_sampling:284 - LAB ranges: L[10.98, 84.71], a[-2.00, 2.00], b[-1.00, 8.00]
2025-10-25 00:15:51,525 - src.models.dbn_trainer - INFO - train:77 - Training set: (640, 3), Test set: (160, 3)
2025-10-25 00:15:51,525 - src.models.dbn_trainer - INFO - _prepare_scalers:109 - Preparing and fitting scalers...
2025-10-25 00:15:51,525 - src.models.dbn_trainer - INFO - _prepare_scalers:128 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-25 00:15:51,525 - src.models.dbn_trainer - INFO - _prepare_scalers:129 - X range: [0.000, 1.000]
2025-10-25 00:15:51,525 - src.models.dbn_trainer - INFO - _prepare_scalers:130 - Y range: [0.000, 1.000]
2025-10-25 00:15:51,525 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-25 00:15:51,878 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-25 00:15:51,933 - src.models.dbn_trainer - INFO - train:88 - Initial model has 20 weight layers
2025-10-25 00:15:51,933 - src.models.dbn_trainer - INFO - train:90 - Layer 0: shape (3, 100), range [-0.241, 0.241]
2025-10-25 00:15:51,933 - src.models.dbn_trainer - INFO - train:90 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-25 00:15:51,933 - src.models.dbn_trainer - INFO - train:90 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-25 00:15:51,933 - src.models.dbn_trainer - INFO - train:90 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-25 00:15:51,933 - src.models.dbn_trainer - INFO - train:90 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-25 00:15:51,933 - src.models.dbn_trainer - INFO - train:90 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-25 00:15:51,934 - src.models.dbn_trainer - INFO - train:90 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-25 00:15:51,934 - src.models.dbn_trainer - INFO - train:90 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-25 00:15:51,934 - src.models.dbn_trainer - INFO - train:90 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-25 00:15:51,934 - src.models.dbn_trainer - INFO - train:90 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-25 00:15:51,934 - src.models.dbn_trainer - INFO - train:90 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-25 00:15:51,934 - src.models.dbn_trainer - INFO - train:90 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-25 00:15:51,934 - src.models.dbn_trainer - INFO - train:90 - Layer 12: shape (50, 25), range [-0.282, 0.283]
2025-10-25 00:15:51,935 - src.models.dbn_trainer - INFO - train:90 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-25 00:15:51,935 - src.models.dbn_trainer - INFO - train:90 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-25 00:15:51,935 - src.models.dbn_trainer - INFO - train:90 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-25 00:15:51,935 - src.models.dbn_trainer - INFO - train:90 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-25 00:15:51,935 - src.models.dbn_trainer - INFO - train:90 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-25 00:15:51,935 - src.models.dbn_trainer - INFO - train:90 - Layer 18: shape (25, 3), range [-0.429, 0.461]
2025-10-25 00:15:51,935 - src.models.dbn_trainer - INFO - train:90 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-25 00:15:51,935 - src.models.dbn_trainer - INFO - _run_pso_with_retries:139 - PSO optimization attempt 1/3
2025-10-25 00:15:51,936 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-25 00:18:27,948 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 156.00s - Final fitness: 0.055569
2025-10-25 00:18:27,949 - src.models.dbn_trainer - INFO - _run_pso_with_retries:154 - PSO optimization completed successfully
2025-10-25 00:18:27,965 - src.models.dbn_trainer - INFO - train:96 - DBN training and PSO optimization complete.
2025-10-25 00:18:27,965 - root - INFO - timer:154 - Completed: DBN initialization and training in 156.44 seconds
2025-10-25 00:18:27,966 - root - INFO - timer:148 - Starting: Reference image loading and processing
2025-10-25 00:18:27,966 - root - INFO - process_reference_image:259 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-25 00:18:28,391 - root - INFO - process_reference_image:274 - Starting preprocessing for reference image
2025-10-25 00:18:28,391 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 00:18:28,419 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 00:18:29,730 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:18:30,053 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:18:30,787 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:18:30,788 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:18:30,788 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:18:30,788 - root - INFO - process_reference_image:278 - Preprocessing completed, shape: (128, 128, 3)
2025-10-25 00:18:30,788 - root - INFO - process_reference_image:286 - Determining optimal number of clusters for reference
2025-10-25 00:18:30,799 - src.models.segmentation.segmentation - INFO - determine_k:107 - Unique colors: 111. Adjusted k-range for metric search: [2, 8]
2025-10-25 00:18:30,799 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=2
2025-10-25 00:18:32,720 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=2: Silhouette=0.970, CH=2006920.4
2025-10-25 00:18:32,721 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=3
2025-10-25 00:18:34,641 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=3: Silhouette=0.947, CH=1561473.8
2025-10-25 00:18:34,641 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=4
2025-10-25 00:18:36,487 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=4: Silhouette=0.811, CH=1956011.8
2025-10-25 00:18:36,487 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=5
2025-10-25 00:18:38,347 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=5: Silhouette=0.943, CH=2074669.1
2025-10-25 00:18:38,347 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=6
2025-10-25 00:18:40,180 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=6: Silhouette=0.913, CH=2845203.5
2025-10-25 00:18:40,181 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=7
2025-10-25 00:18:42,005 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=7: Silhouette=0.920, CH=4300413.5
2025-10-25 00:18:42,005 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=8
2025-10-25 00:18:43,817 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=8: Silhouette=0.924, CH=5046774.5
2025-10-25 00:18:43,818 - src.models.segmentation.segmentation - INFO - determine_k:161 - Optimal k determined: 8 (based on score: 0.856)
2025-10-25 00:18:43,818 - root - INFO - process_reference_image:299 - Optimal clusters determined: 8
2025-10-25 00:18:43,818 - root - INFO - process_reference_image:305 - Determining DPC clusters
2025-10-25 00:18:43,828 - root - INFO - optimal_clusters_dpc:157 - Number of unique colors: 111. Using dynamic_max_k: 10
2025-10-25 00:18:43,830 - root - INFO - optimal_clusters_dpc:185 - Calculated DPC bandwidth: 106.963
2025-10-25 00:18:43,833 - root - INFO - optimal_clusters_dpc:218 - DPC gamma analysis: mean=365.698, std=1921.040, threshold=2286.738
2025-10-25 00:18:43,833 - root - INFO - optimal_clusters_dpc:229 - Optimal number of clusters estimated by DPC gamma heuristic: 2
2025-10-25 00:18:43,833 - root - INFO - process_reference_image:313 - Performing reference segmentation with k=8
2025-10-25 00:18:43,834 - src.models.segmentation.segmentation - INFO - __init__:248 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 00:18:43,834 - src.models.segmentation.segmentation - INFO - quantize_image:194 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 00:18:44,025 - src.models.segmentation.segmentation - INFO - __init__:493 - SOMSegmenter initialized with k_type: predefined
2025-10-25 00:18:44,025 - src.models.segmentation.segmentation - INFO - quantize_image:194 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 00:18:44,149 - src.models.segmentation.segmentation - INFO - segment:519 - Running SOM segmentation with k=8
2025-10-25 00:18:44,623 - src.models.segmentation.segmentation - WARNING - segment:559 - SOM generated empty mask for cluster 2 (k=8). Skipping avg color.
2025-10-25 00:18:44,624 - src.models.segmentation.segmentation - WARNING - segment:559 - SOM generated empty mask for cluster 3 (k=8). Skipping avg color.
2025-10-25 00:18:44,624 - root - INFO - process_reference_image:346 - Reference image processing finished in 16.66 seconds.
2025-10-25 00:18:44,953 - root - INFO - run_reference_processing:382 - Formatted K-Means reference results.
2025-10-25 00:18:45,069 - root - INFO - run_reference_processing:418 - Formatted SOM reference results.
2025-10-25 00:18:46,280 - src.utils.output_manager - INFO - save_reference_summary:136 - Saved reference summary image to datasets\block\summaries\reference_summary.png
2025-10-25 00:18:46,280 - root - INFO - run_reference_processing:438 - Reference processed - Target LAB colors shape: (8, 3), DPC k: 2
2025-10-25 00:18:46,280 - root - INFO - timer:154 - Completed: Reference image loading and processing in 18.31 seconds
2025-10-25 00:18:46,287 - root - INFO - timer:148 - Starting: Processing test image block1
2025-10-25 00:18:46,288 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3950, 3950, 3)
2025-10-25 00:18:46,316 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3950x3950 to 512x512
2025-10-25 00:18:47,637 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:18:47,958 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 332 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:18:48,383 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:18:48,384 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:18:48,384 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:18:48,386 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-25 00:18:48,386 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: determined
2025-10-25 00:18:48,387 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:18:48,387 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: determined in 0.00 seconds
2025-10-25 00:18:48,387 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: predefined
2025-10-25 00:18:48,388 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:18:48,388 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: predefined in 0.00 seconds
2025-10-25 00:18:48,389 - root - INFO - timer:154 - Completed: Processing test image block1 in 2.10 seconds
2025-10-25 00:18:48,389 - root - INFO - timer:148 - Starting: Processing test image block2
2025-10-25 00:18:48,389 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 00:18:48,420 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 00:18:49,728 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:18:50,046 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 316 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:18:50,441 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:18:50,442 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:18:50,442 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:18:50,443 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-25 00:18:50,444 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: determined
2025-10-25 00:18:50,445 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:18:50,445 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: determined in 0.00 seconds
2025-10-25 00:18:50,445 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: predefined
2025-10-25 00:18:50,446 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:18:50,446 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: predefined in 0.00 seconds
2025-10-25 00:18:50,446 - root - INFO - timer:154 - Completed: Processing test image block2 in 2.06 seconds
2025-10-25 00:18:50,447 - root - INFO - timer:148 - Starting: Processing test image block3
2025-10-25 00:18:50,447 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3477, 3477, 3)
2025-10-25 00:18:50,471 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3477x3477 to 511x511
2025-10-25 00:18:51,727 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:18:52,060 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 358 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:18:52,458 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:18:52,460 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:18:52,460 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:18:52,461 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-25 00:18:52,461 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: determined
2025-10-25 00:18:52,462 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:18:52,462 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: determined in 0.00 seconds
2025-10-25 00:18:52,462 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: predefined
2025-10-25 00:18:52,463 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:18:52,463 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: predefined in 0.00 seconds
2025-10-25 00:18:52,464 - root - INFO - timer:154 - Completed: Processing test image block3 in 2.02 seconds
2025-10-25 00:18:52,464 - root - INFO - timer:148 - Starting: Processing test image block4
2025-10-25 00:18:52,465 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3622, 3622, 3)
2025-10-25 00:18:52,489 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3622x3622 to 512x512
2025-10-25 00:18:53,783 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:18:54,105 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 258 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:18:54,521 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:18:54,522 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:18:54,522 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:18:54,523 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-25 00:18:54,524 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: determined
2025-10-25 00:18:54,525 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:18:54,525 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: determined in 0.00 seconds
2025-10-25 00:18:54,525 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: predefined
2025-10-25 00:18:54,526 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:18:54,526 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: predefined in 0.00 seconds
2025-10-25 00:18:54,527 - root - INFO - timer:154 - Completed: Processing test image block4 in 2.06 seconds
2025-10-25 00:18:54,527 - root - INFO - timer:148 - Starting: Processing test image block5
2025-10-25 00:18:54,527 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3504, 3504, 3)
2025-10-25 00:18:54,544 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3504x3504 to 512x512
2025-10-25 00:18:55,826 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:18:56,136 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 307 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:18:56,551 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:18:56,552 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:18:56,553 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:18:56,554 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-25 00:18:56,554 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: determined
2025-10-25 00:18:56,555 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:18:56,555 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: determined in 0.00 seconds
2025-10-25 00:18:56,555 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: predefined
2025-10-25 00:18:56,556 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:18:56,556 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: predefined in 0.00 seconds
2025-10-25 00:18:56,557 - root - INFO - timer:154 - Completed: Processing test image block5 in 2.03 seconds
2025-10-25 00:18:56,558 - root - INFO - main:684 - ================================================================================
PROCESSING COMPLETED IN 190.97 SECONDS
================================================================================
2025-10-25 00:18:56,611 - root - INFO - main:692 - Profiling results saved to: C:\Users\LENOVO\Desktop\prints\output\profile_stats.txt
2025-10-25 00:36:45,599 - root - INFO - setup_logging:135 - Logging setup complete. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-25 00:36:45,600 - root - INFO - timer:148 - Starting: Configuration loading and validation
2025-10-25 00:36:45,612 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from c:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-25 00:36:45,614 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-25 00:36:45,614 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-25 00:36:45,615 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-25 00:36:45,617 - root - INFO - validate_processing_config:232 - Processing configuration validation passed
2025-10-25 00:36:45,617 - root - INFO - timer:154 - Completed: Configuration loading and validation in 0.02 seconds
2025-10-25 00:36:45,622 - src.utils.output_manager - INFO - __init__:28 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-25 00:36:45,622 - root - INFO - main:601 - Processing dataset: block
2025-10-25 00:36:45,623 - root - INFO - timer:148 - Starting: Loading all test images
2025-10-25 00:36:46,317 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-25 00:36:47,204 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-25 00:36:47,699 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-25 00:36:48,249 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-25 00:36:48,830 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-25 00:36:48,830 - root - INFO - timer:154 - Completed: Loading all test images in 3.21 seconds
2025-10-25 00:36:48,830 - root - INFO - timer:148 - Starting: Loading training data
2025-10-25 00:36:48,831 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-25 00:36:50,946 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-25 00:36:50,947 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-25 00:36:50,953 - root - INFO - validate_loaded_data:267 - Data validation passed: 50000 total pixels available from 5 images.
2025-10-25 00:36:50,953 - root - INFO - timer:154 - Completed: Loading training data in 2.12 seconds
2025-10-25 00:36:50,954 - root - INFO - timer:148 - Starting: DBN initialization and training
2025-10-25 00:36:50,954 - src.models.dbn_trainer - INFO - __init__:48 - DBNTrainer initialized.
2025-10-25 00:36:50,954 - src.models.dbn_trainer - INFO - train:64 - Starting DBN training and PSO optimization process...
2025-10-25 00:36:50,955 - src.data.preprocess - INFO - efficient_data_sampling:207 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-25 00:36:50,961 - src.data.preprocess - INFO - efficient_data_sampling:282 - Sampling completed: 800 samples extracted.
2025-10-25 00:36:50,962 - src.data.preprocess - INFO - efficient_data_sampling:283 - RGB range: [30.00, 214.00]
2025-10-25 00:36:50,962 - src.data.preprocess - INFO - efficient_data_sampling:284 - LAB ranges: L[10.98, 84.31], a[-2.00, 2.00], b[-1.00, 8.00]
2025-10-25 00:36:50,963 - src.models.dbn_trainer - INFO - train:77 - Training set: (640, 3), Test set: (160, 3)
2025-10-25 00:36:50,963 - src.models.dbn_trainer - INFO - _prepare_scalers:109 - Preparing and fitting scalers...
2025-10-25 00:36:50,968 - src.models.dbn_trainer - INFO - _prepare_scalers:128 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-25 00:36:50,968 - src.models.dbn_trainer - INFO - _prepare_scalers:129 - X range: [0.000, 1.000]
2025-10-25 00:36:50,968 - src.models.dbn_trainer - INFO - _prepare_scalers:130 - Y range: [0.000, 1.000]
2025-10-25 00:36:50,968 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-25 00:36:51,317 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-25 00:36:51,382 - src.models.dbn_trainer - INFO - train:88 - Initial model has 20 weight layers
2025-10-25 00:36:51,382 - src.models.dbn_trainer - INFO - train:90 - Layer 0: shape (3, 100), range [-0.240, 0.241]
2025-10-25 00:36:51,382 - src.models.dbn_trainer - INFO - train:90 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-25 00:36:51,383 - src.models.dbn_trainer - INFO - train:90 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-25 00:36:51,383 - src.models.dbn_trainer - INFO - train:90 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-25 00:36:51,383 - src.models.dbn_trainer - INFO - train:90 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-25 00:36:51,383 - src.models.dbn_trainer - INFO - train:90 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-25 00:36:51,383 - src.models.dbn_trainer - INFO - train:90 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-25 00:36:51,383 - src.models.dbn_trainer - INFO - train:90 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-25 00:36:51,384 - src.models.dbn_trainer - INFO - train:90 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-25 00:36:51,384 - src.models.dbn_trainer - INFO - train:90 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-25 00:36:51,384 - src.models.dbn_trainer - INFO - train:90 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-25 00:36:51,384 - src.models.dbn_trainer - INFO - train:90 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-25 00:36:51,384 - src.models.dbn_trainer - INFO - train:90 - Layer 12: shape (50, 25), range [-0.283, 0.282]
2025-10-25 00:36:51,384 - src.models.dbn_trainer - INFO - train:90 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-25 00:36:51,385 - src.models.dbn_trainer - INFO - train:90 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-25 00:36:51,385 - src.models.dbn_trainer - INFO - train:90 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-25 00:36:51,385 - src.models.dbn_trainer - INFO - train:90 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-25 00:36:51,385 - src.models.dbn_trainer - INFO - train:90 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-25 00:36:51,385 - src.models.dbn_trainer - INFO - train:90 - Layer 18: shape (25, 3), range [-0.450, 0.454]
2025-10-25 00:36:51,386 - src.models.dbn_trainer - INFO - train:90 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-25 00:36:51,386 - src.models.dbn_trainer - INFO - _run_pso_with_retries:139 - PSO optimization attempt 1/3
2025-10-25 00:36:51,386 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-25 00:39:22,033 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 150.64s - Final fitness: 0.016699
2025-10-25 00:39:22,033 - src.models.dbn_trainer - INFO - _run_pso_with_retries:154 - PSO optimization completed successfully
2025-10-25 00:39:22,049 - src.models.dbn_trainer - INFO - train:96 - DBN training and PSO optimization complete.
2025-10-25 00:39:22,050 - root - INFO - timer:154 - Completed: DBN initialization and training in 151.10 seconds
2025-10-25 00:39:22,052 - root - INFO - timer:148 - Starting: Reference image loading and processing
2025-10-25 00:39:22,053 - root - INFO - process_reference_image:259 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-25 00:39:22,442 - root - INFO - process_reference_image:274 - Starting preprocessing for reference image
2025-10-25 00:39:22,442 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 00:39:22,471 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 00:39:23,702 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:39:24,017 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:39:24,780 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:39:24,781 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:39:24,781 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:39:24,782 - root - INFO - process_reference_image:278 - Preprocessing completed, shape: (128, 128, 3)
2025-10-25 00:39:24,782 - root - INFO - process_reference_image:286 - Determining optimal number of clusters for reference
2025-10-25 00:39:24,783 - src.models.segmentation.segmentation - WARNING - determine_k:106 - Using default k-range [2, 3, 4, 5, 6, 7, 8] for k-determination.
2025-10-25 00:39:24,793 - src.models.segmentation.segmentation - INFO - determine_k:116 - Unique colors: 117. Adjusted k-range for metric search: [2, 8]
2025-10-25 00:39:24,793 - src.models.segmentation.segmentation - INFO - determine_k:144 - Testing k=2
2025-10-25 00:39:26,604 - src.models.segmentation.segmentation - INFO - determine_k:156 - Metrics for k=2: Silhouette=0.970, CH=1914175.8
2025-10-25 00:39:26,604 - src.models.segmentation.segmentation - INFO - determine_k:144 - Testing k=3
2025-10-25 00:39:28,369 - src.models.segmentation.segmentation - INFO - determine_k:156 - Metrics for k=3: Silhouette=0.799, CH=1319986.8
2025-10-25 00:39:28,370 - src.models.segmentation.segmentation - INFO - determine_k:144 - Testing k=4
2025-10-25 00:39:30,111 - src.models.segmentation.segmentation - INFO - determine_k:156 - Metrics for k=4: Silhouette=0.804, CH=1866615.9
2025-10-25 00:39:30,111 - src.models.segmentation.segmentation - INFO - determine_k:144 - Testing k=5
2025-10-25 00:39:31,886 - src.models.segmentation.segmentation - INFO - determine_k:156 - Metrics for k=5: Silhouette=0.753, CH=1995735.9
2025-10-25 00:39:31,886 - src.models.segmentation.segmentation - INFO - determine_k:144 - Testing k=6
2025-10-25 00:39:33,601 - src.models.segmentation.segmentation - INFO - determine_k:156 - Metrics for k=6: Silhouette=0.891, CH=2666565.8
2025-10-25 00:39:33,601 - src.models.segmentation.segmentation - INFO - determine_k:144 - Testing k=7
2025-10-25 00:39:35,309 - src.models.segmentation.segmentation - INFO - determine_k:156 - Metrics for k=7: Silhouette=0.899, CH=4165659.0
2025-10-25 00:39:35,309 - src.models.segmentation.segmentation - INFO - determine_k:144 - Testing k=8
2025-10-25 00:39:37,023 - src.models.segmentation.segmentation - INFO - determine_k:156 - Metrics for k=8: Silhouette=0.943, CH=4786717.0
2025-10-25 00:39:37,023 - src.models.segmentation.segmentation - INFO - determine_k:177 - Optimal k determined: 8 (score: 0.937)
2025-10-25 00:39:37,023 - root - INFO - process_reference_image:299 - Optimal clusters determined: 8
2025-10-25 00:39:37,024 - root - INFO - process_reference_image:305 - Determining DPC clusters
2025-10-25 00:39:37,033 - root - INFO - optimal_clusters_dpc:157 - Number of unique colors: 117. Using dynamic_max_k: 10
2025-10-25 00:39:37,035 - root - INFO - optimal_clusters_dpc:185 - Calculated DPC bandwidth: 104.580
2025-10-25 00:39:37,037 - root - INFO - optimal_clusters_dpc:218 - DPC gamma analysis: mean=366.369, std=1982.490, threshold=2348.860
2025-10-25 00:39:37,037 - root - INFO - optimal_clusters_dpc:229 - Optimal number of clusters estimated by DPC gamma heuristic: 2
2025-10-25 00:39:37,037 - root - INFO - process_reference_image:313 - Performing reference segmentation with k=8
2025-10-25 00:39:37,039 - src.models.segmentation.segmentation - INFO - __init__:260 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 00:39:37,039 - src.models.segmentation.segmentation - INFO - quantize_image:212 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 00:39:37,211 - src.models.segmentation.segmentation - INFO - __init__:430 - SOMSegmenter initialized with k_type: predefined
2025-10-25 00:39:37,212 - src.models.segmentation.segmentation - INFO - quantize_image:212 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 00:39:37,337 - src.models.segmentation.segmentation - INFO - segment:450 - Running SOM segmentation with k=8
2025-10-25 00:39:37,775 - src.models.segmentation.segmentation - WARNING - segment:470 - SOM empty mask cluster 2 (k=8).
2025-10-25 00:39:37,775 - src.models.segmentation.segmentation - WARNING - segment:470 - SOM empty mask cluster 3 (k=8).
2025-10-25 00:39:37,776 - root - INFO - process_reference_image:346 - Reference image processing finished in 15.72 seconds.
2025-10-25 00:39:38,023 - root - INFO - run_reference_processing:382 - Formatted K-Means reference results.
2025-10-25 00:39:38,138 - root - INFO - run_reference_processing:418 - Formatted SOM reference results.
2025-10-25 00:39:39,340 - src.utils.output_manager - INFO - save_reference_summary:136 - Saved reference summary image to datasets\block\summaries\reference_summary.png
2025-10-25 00:39:39,340 - root - INFO - run_reference_processing:438 - Reference processed - Target LAB colors shape: (8, 3), DPC k: 2
2025-10-25 00:39:39,340 - root - INFO - timer:154 - Completed: Reference image loading and processing in 17.29 seconds
2025-10-25 00:39:39,347 - root - INFO - timer:148 - Starting: Processing test image block1
2025-10-25 00:39:39,348 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3950, 3950, 3)
2025-10-25 00:39:39,372 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3950x3950 to 512x512
2025-10-25 00:39:40,638 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:39:40,978 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 332 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:39:41,402 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:39:41,403 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:39:41,403 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:39:41,405 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-25 00:39:41,406 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: determined
2025-10-25 00:39:41,407 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:39:41,407 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: determined in 0.00 seconds
2025-10-25 00:39:41,407 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: predefined
2025-10-25 00:39:41,408 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:39:41,408 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: predefined in 0.00 seconds
2025-10-25 00:39:41,409 - root - INFO - timer:154 - Completed: Processing test image block1 in 2.06 seconds
2025-10-25 00:39:41,409 - root - INFO - timer:148 - Starting: Processing test image block2
2025-10-25 00:39:41,410 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 00:39:41,445 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 00:39:42,747 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:39:43,070 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 316 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:39:43,477 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:39:43,479 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:39:43,479 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:39:43,480 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-25 00:39:43,480 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: determined
2025-10-25 00:39:43,482 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:39:43,482 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: determined in 0.00 seconds
2025-10-25 00:39:43,482 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: predefined
2025-10-25 00:39:43,483 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:39:43,483 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: predefined in 0.00 seconds
2025-10-25 00:39:43,483 - root - INFO - timer:154 - Completed: Processing test image block2 in 2.07 seconds
2025-10-25 00:39:43,484 - root - INFO - timer:148 - Starting: Processing test image block3
2025-10-25 00:39:43,484 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3477, 3477, 3)
2025-10-25 00:39:43,503 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3477x3477 to 511x511
2025-10-25 00:39:44,729 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:39:45,056 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 358 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:39:45,459 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:39:45,460 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:39:45,460 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:39:45,462 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-25 00:39:45,462 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: determined
2025-10-25 00:39:45,463 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:39:45,463 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: determined in 0.00 seconds
2025-10-25 00:39:45,463 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: predefined
2025-10-25 00:39:45,464 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:39:45,464 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: predefined in 0.00 seconds
2025-10-25 00:39:45,465 - root - INFO - timer:154 - Completed: Processing test image block3 in 1.98 seconds
2025-10-25 00:39:45,465 - root - INFO - timer:148 - Starting: Processing test image block4
2025-10-25 00:39:45,466 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3622, 3622, 3)
2025-10-25 00:39:45,485 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3622x3622 to 512x512
2025-10-25 00:39:46,764 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:39:47,094 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 258 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:39:47,543 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:39:47,544 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:39:47,545 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:39:47,546 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-25 00:39:47,546 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: determined
2025-10-25 00:39:47,547 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:39:47,548 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: determined in 0.00 seconds
2025-10-25 00:39:47,548 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: predefined
2025-10-25 00:39:47,549 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:39:47,549 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: predefined in 0.00 seconds
2025-10-25 00:39:47,549 - root - INFO - timer:154 - Completed: Processing test image block4 in 2.08 seconds
2025-10-25 00:39:47,550 - root - INFO - timer:148 - Starting: Processing test image block5
2025-10-25 00:39:47,550 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3504, 3504, 3)
2025-10-25 00:39:47,574 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3504x3504 to 512x512
2025-10-25 00:39:48,854 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:39:49,170 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 307 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:39:49,602 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:39:49,603 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:39:49,603 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:39:49,604 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-25 00:39:49,604 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: determined
2025-10-25 00:39:49,605 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:39:49,605 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: determined in 0.00 seconds
2025-10-25 00:39:49,605 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: predefined
2025-10-25 00:39:49,606 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:39:49,606 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: predefined in 0.00 seconds
2025-10-25 00:39:49,607 - root - INFO - timer:154 - Completed: Processing test image block5 in 2.06 seconds
2025-10-25 00:39:49,608 - root - INFO - main:684 - ================================================================================
PROCESSING COMPLETED IN 184.01 SECONDS
================================================================================
2025-10-25 00:39:49,662 - root - INFO - main:692 - Profiling results saved to: C:\Users\LENOVO\Desktop\prints\output\profile_stats.txt
2025-10-25 00:46:44,412 - root - INFO - setup_logging:135 - Logging setup complete. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-25 00:46:44,413 - root - INFO - timer:148 - Starting: Configuration loading and validation
2025-10-25 00:46:44,424 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from c:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-25 00:46:44,427 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-25 00:46:44,427 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-25 00:46:44,427 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-25 00:46:44,429 - root - INFO - validate_processing_config:232 - Processing configuration validation passed
2025-10-25 00:46:44,429 - root - INFO - timer:154 - Completed: Configuration loading and validation in 0.02 seconds
2025-10-25 00:46:44,431 - src.utils.output_manager - INFO - __init__:28 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-25 00:46:44,431 - root - INFO - main:601 - Processing dataset: block
2025-10-25 00:46:44,431 - root - INFO - timer:148 - Starting: Loading all test images
2025-10-25 00:46:45,055 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-25 00:46:45,873 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-25 00:46:46,321 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-25 00:46:46,806 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-25 00:46:47,307 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-25 00:46:47,307 - root - INFO - timer:154 - Completed: Loading all test images in 2.89 seconds
2025-10-25 00:46:47,307 - root - INFO - timer:148 - Starting: Loading training data
2025-10-25 00:46:47,307 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-25 00:46:49,156 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-25 00:46:49,156 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-25 00:46:49,156 - root - INFO - validate_loaded_data:267 - Data validation passed: 50000 total pixels available from 5 images.
2025-10-25 00:46:49,156 - root - INFO - timer:154 - Completed: Loading training data in 1.85 seconds
2025-10-25 00:46:49,156 - root - INFO - timer:148 - Starting: DBN initialization and training
2025-10-25 00:46:49,156 - src.models.dbn_trainer - INFO - __init__:48 - DBNTrainer initialized.
2025-10-25 00:46:49,156 - src.models.dbn_trainer - INFO - train:64 - Starting DBN training and PSO optimization process...
2025-10-25 00:46:49,156 - src.data.preprocess - INFO - efficient_data_sampling:207 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-25 00:46:49,172 - src.data.preprocess - INFO - efficient_data_sampling:282 - Sampling completed: 800 samples extracted.
2025-10-25 00:46:49,172 - src.data.preprocess - INFO - efficient_data_sampling:283 - RGB range: [32.00, 213.00]
2025-10-25 00:46:49,172 - src.data.preprocess - INFO - efficient_data_sampling:284 - LAB ranges: L[12.16, 84.31], a[-2.00, 3.00], b[-2.00, 8.00]
2025-10-25 00:46:49,172 - src.models.dbn_trainer - INFO - train:77 - Training set: (640, 3), Test set: (160, 3)
2025-10-25 00:46:49,172 - src.models.dbn_trainer - INFO - _prepare_scalers:109 - Preparing and fitting scalers...
2025-10-25 00:46:49,172 - src.models.dbn_trainer - INFO - _prepare_scalers:128 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-25 00:46:49,172 - src.models.dbn_trainer - INFO - _prepare_scalers:129 - X range: [0.000, 1.000]
2025-10-25 00:46:49,172 - src.models.dbn_trainer - INFO - _prepare_scalers:130 - Y range: [0.000, 1.000]
2025-10-25 00:46:49,172 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-25 00:46:49,456 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:88 - Initial model has 20 weight layers
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 0: shape (3, 100), range [-0.239, 0.240]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 12: shape (50, 25), range [-0.283, 0.283]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 18: shape (25, 3), range [-0.454, 0.457]
2025-10-25 00:46:49,519 - src.models.dbn_trainer - INFO - train:90 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-25 00:46:49,525 - src.models.dbn_trainer - INFO - _run_pso_with_retries:139 - PSO optimization attempt 1/3
2025-10-25 00:46:49,525 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-25 00:49:29,084 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 159.56s - Final fitness: 0.013018
2025-10-25 00:49:29,085 - src.models.dbn_trainer - INFO - _run_pso_with_retries:154 - PSO optimization completed successfully
2025-10-25 00:49:29,095 - src.models.dbn_trainer - INFO - train:96 - DBN training and PSO optimization complete.
2025-10-25 00:49:29,095 - root - INFO - timer:154 - Completed: DBN initialization and training in 159.93 seconds
2025-10-25 00:49:29,096 - root - INFO - timer:148 - Starting: Reference image loading and processing
2025-10-25 00:49:29,096 - root - INFO - process_reference_image:259 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-25 00:49:29,466 - root - INFO - process_reference_image:274 - Starting preprocessing for reference image
2025-10-25 00:49:29,466 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 00:49:29,508 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 00:49:30,769 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:49:31,101 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:49:31,864 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:49:31,866 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:49:31,866 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:49:31,866 - root - INFO - process_reference_image:278 - Preprocessing completed, shape: (128, 128, 3)
2025-10-25 00:49:31,866 - root - INFO - process_reference_image:286 - Determining optimal number of clusters for reference
2025-10-25 00:49:31,877 - src.models.segmentation.segmentation - INFO - determine_k:107 - Unique colors: 116. Adjusted k-range for metric search: [2, 8]
2025-10-25 00:49:31,877 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=2
2025-10-25 00:49:33,712 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=2: Silhouette=0.971, CH=2081761.2
2025-10-25 00:49:33,712 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=3
2025-10-25 00:49:35,986 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=3: Silhouette=0.948, CH=1623853.1
2025-10-25 00:49:35,986 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=4
2025-10-25 00:49:38,004 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=4: Silhouette=0.779, CH=1844533.4
2025-10-25 00:49:38,004 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=5
2025-10-25 00:49:39,782 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=5: Silhouette=0.717, CH=1933258.6
2025-10-25 00:49:39,782 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=6
2025-10-25 00:49:41,603 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=6: Silhouette=0.718, CH=2198404.2
2025-10-25 00:49:41,603 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=7
2025-10-25 00:49:43,359 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=7: Silhouette=0.820, CH=3455211.0
2025-10-25 00:49:43,359 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=8
2025-10-25 00:49:45,166 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=8: Silhouette=0.824, CH=4178938.8
2025-10-25 00:49:45,166 - src.models.segmentation.segmentation - INFO - determine_k:161 - Optimal k determined: 8 (based on score: 0.711)
2025-10-25 00:49:45,166 - root - INFO - process_reference_image:299 - Optimal clusters determined: 8
2025-10-25 00:49:45,166 - root - INFO - process_reference_image:305 - Determining DPC clusters
2025-10-25 00:49:45,176 - root - INFO - optimal_clusters_dpc:157 - Number of unique colors: 116. Using dynamic_max_k: 10
2025-10-25 00:49:45,178 - root - INFO - optimal_clusters_dpc:185 - Calculated DPC bandwidth: 108.042
2025-10-25 00:49:45,181 - root - INFO - optimal_clusters_dpc:218 - DPC gamma analysis: mean=369.966, std=1978.999, threshold=2348.965
2025-10-25 00:49:45,181 - root - INFO - optimal_clusters_dpc:229 - Optimal number of clusters estimated by DPC gamma heuristic: 2
2025-10-25 00:49:45,181 - root - INFO - process_reference_image:313 - Performing reference segmentation with k=8
2025-10-25 00:49:45,183 - src.models.segmentation.segmentation - INFO - __init__:255 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 00:49:45,183 - src.models.segmentation.segmentation - INFO - quantize_image:194 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 00:49:45,484 - src.models.segmentation.segmentation - INFO - __init__:515 - SOMSegmenter initialized with k_type: predefined
2025-10-25 00:49:45,485 - src.models.segmentation.segmentation - INFO - quantize_image:194 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 00:49:45,620 - src.models.segmentation.segmentation - INFO - segment:541 - Running SOM segmentation with k=8
2025-10-25 00:49:46,061 - src.models.segmentation.segmentation - WARNING - segment:581 - SOM generated empty mask for cluster 2 (k=8). Skipping avg color.
2025-10-25 00:49:46,061 - src.models.segmentation.segmentation - WARNING - segment:581 - SOM generated empty mask for cluster 3 (k=8). Skipping avg color.
2025-10-25 00:49:46,061 - root - INFO - process_reference_image:346 - Reference image processing finished in 16.97 seconds.
2025-10-25 00:49:46,313 - root - INFO - run_reference_processing:382 - Formatted K-Means reference results.
2025-10-25 00:49:46,452 - root - INFO - run_reference_processing:418 - Formatted SOM reference results.
2025-10-25 00:49:47,788 - src.utils.output_manager - INFO - save_reference_summary:136 - Saved reference summary image to datasets\block\summaries\reference_summary.png
2025-10-25 00:49:47,788 - root - INFO - run_reference_processing:438 - Reference processed - Target LAB colors shape: (8, 3), DPC k: 2
2025-10-25 00:49:47,789 - root - INFO - timer:154 - Completed: Reference image loading and processing in 18.69 seconds
2025-10-25 00:49:47,797 - root - INFO - timer:148 - Starting: Processing test image block1
2025-10-25 00:49:47,797 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3950, 3950, 3)
2025-10-25 00:49:47,826 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3950x3950 to 512x512
2025-10-25 00:49:49,259 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:49:49,657 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 332 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:49:50,099 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:49:50,100 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:49:50,101 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:49:50,102 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-25 00:49:50,102 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: determined
2025-10-25 00:49:50,103 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:49:50,104 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: determined in 0.00 seconds
2025-10-25 00:49:50,104 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: predefined
2025-10-25 00:49:50,104 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:49:50,105 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: predefined in 0.00 seconds
2025-10-25 00:49:50,105 - root - INFO - timer:154 - Completed: Processing test image block1 in 2.31 seconds
2025-10-25 00:49:50,106 - root - INFO - timer:148 - Starting: Processing test image block2
2025-10-25 00:49:50,106 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 00:49:50,136 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 00:49:51,606 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:49:51,936 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 316 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:49:52,346 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:49:52,346 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:49:52,346 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:49:52,346 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-25 00:49:52,346 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: determined
2025-10-25 00:49:52,346 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:49:52,346 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: determined in 0.00 seconds
2025-10-25 00:49:52,346 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: predefined
2025-10-25 00:49:52,346 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:49:52,346 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: predefined in 0.00 seconds
2025-10-25 00:49:52,346 - root - INFO - timer:154 - Completed: Processing test image block2 in 2.25 seconds
2025-10-25 00:49:52,360 - root - INFO - timer:148 - Starting: Processing test image block3
2025-10-25 00:49:52,361 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3477, 3477, 3)
2025-10-25 00:49:52,380 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3477x3477 to 511x511
2025-10-25 00:49:53,649 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:49:53,965 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 358 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:49:54,390 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:49:54,392 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:49:54,392 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:49:54,393 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-25 00:49:54,394 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: determined
2025-10-25 00:49:54,395 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:49:54,395 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: determined in 0.00 seconds
2025-10-25 00:49:54,395 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: predefined
2025-10-25 00:49:54,396 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:49:54,396 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: predefined in 0.00 seconds
2025-10-25 00:49:54,397 - root - INFO - timer:154 - Completed: Processing test image block3 in 2.04 seconds
2025-10-25 00:49:54,397 - root - INFO - timer:148 - Starting: Processing test image block4
2025-10-25 00:49:54,398 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3622, 3622, 3)
2025-10-25 00:49:54,419 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3622x3622 to 512x512
2025-10-25 00:49:55,806 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:49:56,146 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 258 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:49:56,589 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:49:56,589 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:49:56,589 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:49:56,589 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-25 00:49:56,589 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: determined
2025-10-25 00:49:56,589 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:49:56,589 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: determined in 0.00 seconds
2025-10-25 00:49:56,589 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: predefined
2025-10-25 00:49:56,589 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:49:56,589 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: predefined in 0.00 seconds
2025-10-25 00:49:56,589 - root - INFO - timer:154 - Completed: Processing test image block4 in 2.21 seconds
2025-10-25 00:49:56,605 - root - INFO - timer:148 - Starting: Processing test image block5
2025-10-25 00:49:56,605 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3504, 3504, 3)
2025-10-25 00:49:56,623 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3504x3504 to 512x512
2025-10-25 00:49:57,908 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 00:49:58,222 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 307 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 00:49:58,634 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 00:49:58,635 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 00:49:58,635 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 00:49:58,636 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-25 00:49:58,637 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: determined
2025-10-25 00:49:58,638 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:49:58,638 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: determined in 0.00 seconds
2025-10-25 00:49:58,638 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: predefined
2025-10-25 00:49:58,639 - root - ERROR - process_single_test_image:549 - Ellipsis
2025-10-25 00:49:58,639 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: predefined in 0.00 seconds
2025-10-25 00:49:58,640 - root - INFO - timer:154 - Completed: Processing test image block5 in 2.03 seconds
2025-10-25 00:49:58,641 - root - INFO - main:684 - ================================================================================
PROCESSING COMPLETED IN 194.23 SECONDS
================================================================================
2025-10-25 00:49:58,695 - root - INFO - main:692 - Profiling results saved to: C:\Users\LENOVO\Desktop\prints\output\profile_stats.txt
2025-10-25 01:08:28,455 - root - INFO - setup_logging:135 - Logging setup complete. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-25 01:08:28,456 - root - INFO - timer:148 - Starting: Configuration loading and validation
2025-10-25 01:08:28,468 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from c:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-25 01:08:28,472 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-25 01:08:28,472 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-25 01:08:28,472 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-25 01:08:28,475 - root - INFO - validate_processing_config:232 - Processing configuration validation passed
2025-10-25 01:08:28,476 - root - INFO - timer:154 - Completed: Configuration loading and validation in 0.02 seconds
2025-10-25 01:08:28,478 - src.utils.output_manager - INFO - __init__:28 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-25 01:08:28,478 - root - INFO - main:602 - Processing dataset: block
2025-10-25 01:08:28,479 - root - INFO - timer:148 - Starting: Loading all test images
2025-10-25 01:08:29,125 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-25 01:08:29,973 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-25 01:08:30,429 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-25 01:08:30,939 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-25 01:08:31,458 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-25 01:08:31,458 - root - INFO - timer:154 - Completed: Loading all test images in 2.98 seconds
2025-10-25 01:08:31,459 - root - INFO - timer:148 - Starting: Loading training data
2025-10-25 01:08:31,459 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-25 01:08:33,397 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-25 01:08:33,398 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-25 01:08:33,402 - root - INFO - validate_loaded_data:267 - Data validation passed: 50000 total pixels available from 5 images.
2025-10-25 01:08:33,402 - root - INFO - timer:154 - Completed: Loading training data in 1.94 seconds
2025-10-25 01:08:33,402 - root - INFO - timer:148 - Starting: DBN initialization and training
2025-10-25 01:08:33,403 - src.models.dbn_trainer - INFO - __init__:48 - DBNTrainer initialized.
2025-10-25 01:08:33,403 - src.models.dbn_trainer - INFO - train:64 - Starting DBN training and PSO optimization process...
2025-10-25 01:08:33,403 - src.data.preprocess - INFO - efficient_data_sampling:207 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-25 01:08:33,405 - src.data.preprocess - INFO - efficient_data_sampling:282 - Sampling completed: 800 samples extracted.
2025-10-25 01:08:33,406 - src.data.preprocess - INFO - efficient_data_sampling:283 - RGB range: [31.00, 214.00]
2025-10-25 01:08:33,406 - src.data.preprocess - INFO - efficient_data_sampling:284 - LAB ranges: L[11.76, 84.31], a[-2.00, 3.00], b[-2.00, 9.00]
2025-10-25 01:08:33,407 - src.models.dbn_trainer - INFO - train:77 - Training set: (640, 3), Test set: (160, 3)
2025-10-25 01:08:33,407 - src.models.dbn_trainer - INFO - _prepare_scalers:109 - Preparing and fitting scalers...
2025-10-25 01:08:33,410 - src.models.dbn_trainer - INFO - _prepare_scalers:128 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-25 01:08:33,410 - src.models.dbn_trainer - INFO - _prepare_scalers:129 - X range: [0.000, 1.000]
2025-10-25 01:08:33,410 - src.models.dbn_trainer - INFO - _prepare_scalers:130 - Y range: [0.000, 1.000]
2025-10-25 01:08:33,411 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-25 01:08:33,709 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-25 01:08:33,759 - src.models.dbn_trainer - INFO - train:88 - Initial model has 20 weight layers
2025-10-25 01:08:33,759 - src.models.dbn_trainer - INFO - train:90 - Layer 0: shape (3, 100), range [-0.241, 0.237]
2025-10-25 01:08:33,760 - src.models.dbn_trainer - INFO - train:90 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-25 01:08:33,760 - src.models.dbn_trainer - INFO - train:90 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-25 01:08:33,760 - src.models.dbn_trainer - INFO - train:90 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-25 01:08:33,760 - src.models.dbn_trainer - INFO - train:90 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-25 01:08:33,760 - src.models.dbn_trainer - INFO - train:90 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-25 01:08:33,760 - src.models.dbn_trainer - INFO - train:90 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-25 01:08:33,760 - src.models.dbn_trainer - INFO - train:90 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-25 01:08:33,761 - src.models.dbn_trainer - INFO - train:90 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-25 01:08:33,761 - src.models.dbn_trainer - INFO - train:90 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-25 01:08:33,761 - src.models.dbn_trainer - INFO - train:90 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-25 01:08:33,761 - src.models.dbn_trainer - INFO - train:90 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-25 01:08:33,761 - src.models.dbn_trainer - INFO - train:90 - Layer 12: shape (50, 25), range [-0.282, 0.282]
2025-10-25 01:08:33,761 - src.models.dbn_trainer - INFO - train:90 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-25 01:08:33,761 - src.models.dbn_trainer - INFO - train:90 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-25 01:08:33,762 - src.models.dbn_trainer - INFO - train:90 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-25 01:08:33,762 - src.models.dbn_trainer - INFO - train:90 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-25 01:08:33,762 - src.models.dbn_trainer - INFO - train:90 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-25 01:08:33,762 - src.models.dbn_trainer - INFO - train:90 - Layer 18: shape (25, 3), range [-0.442, 0.454]
2025-10-25 01:08:33,762 - src.models.dbn_trainer - INFO - train:90 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-25 01:08:33,762 - src.models.dbn_trainer - INFO - _run_pso_with_retries:139 - PSO optimization attempt 1/3
2025-10-25 01:08:33,762 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-25 01:11:10,892 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 157.12s - Final fitness: 0.018996
2025-10-25 01:11:10,892 - src.models.dbn_trainer - INFO - _run_pso_with_retries:154 - PSO optimization completed successfully
2025-10-25 01:11:10,902 - src.models.dbn_trainer - INFO - train:96 - DBN training and PSO optimization complete.
2025-10-25 01:11:10,902 - root - INFO - timer:154 - Completed: DBN initialization and training in 157.50 seconds
2025-10-25 01:11:10,903 - root - INFO - timer:148 - Starting: Reference image loading and processing
2025-10-25 01:11:10,903 - root - INFO - process_reference_image:259 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-25 01:11:11,296 - root - INFO - process_reference_image:274 - Starting preprocessing for reference image
2025-10-25 01:11:11,296 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 01:11:11,330 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 01:11:12,624 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:11:12,961 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:11:13,748 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:11:13,749 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:11:13,749 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:11:13,749 - root - INFO - process_reference_image:278 - Preprocessing completed, shape: (128, 128, 3)
2025-10-25 01:11:13,750 - root - INFO - process_reference_image:286 - Determining optimal number of clusters for reference
2025-10-25 01:11:13,760 - src.models.segmentation.segmentation - INFO - determine_k:107 - Unique colors: 116. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:11:13,760 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=2
2025-10-25 01:11:15,646 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=2: Silhouette=0.970, CH=1852367.8
2025-10-25 01:11:15,646 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=3
2025-10-25 01:11:17,486 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=3: Silhouette=0.821, CH=1307357.0
2025-10-25 01:11:17,486 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=4
2025-10-25 01:11:19,343 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=4: Silhouette=0.822, CH=1922775.6
2025-10-25 01:11:19,343 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=5
2025-10-25 01:11:21,148 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=5: Silhouette=0.768, CH=2077904.6
2025-10-25 01:11:21,148 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=6
2025-10-25 01:11:22,994 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=6: Silhouette=0.773, CH=2086422.1
2025-10-25 01:11:22,994 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=7
2025-10-25 01:11:24,915 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=7: Silhouette=0.905, CH=3100650.2
2025-10-25 01:11:24,915 - src.models.segmentation.segmentation - INFO - determine_k:131 - Testing k=8
2025-10-25 01:11:26,726 - src.models.segmentation.segmentation - INFO - determine_k:145 - Metrics for k=8: Silhouette=0.910, CH=5102699.5
2025-10-25 01:11:26,727 - src.models.segmentation.segmentation - INFO - determine_k:161 - Optimal k determined: 8 (based on score: 0.850)
2025-10-25 01:11:26,727 - root - INFO - process_reference_image:299 - Optimal clusters determined: 8
2025-10-25 01:11:26,727 - root - INFO - process_reference_image:305 - Determining DPC clusters
2025-10-25 01:11:26,737 - root - INFO - optimal_clusters_dpc:157 - Number of unique colors: 116. Using dynamic_max_k: 10
2025-10-25 01:11:26,739 - root - INFO - optimal_clusters_dpc:185 - Calculated DPC bandwidth: 106.311
2025-10-25 01:11:26,742 - root - INFO - optimal_clusters_dpc:218 - DPC gamma analysis: mean=372.548, std=2004.967, threshold=2377.516
2025-10-25 01:11:26,742 - root - INFO - optimal_clusters_dpc:229 - Optimal number of clusters estimated by DPC gamma heuristic: 2
2025-10-25 01:11:26,742 - root - INFO - process_reference_image:313 - Performing reference segmentation with k=8
2025-10-25 01:11:26,744 - src.models.segmentation.segmentation - INFO - __init__:255 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:11:26,744 - src.models.segmentation.segmentation - INFO - quantize_image:194 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:11:26,941 - src.models.segmentation.segmentation - INFO - __init__:515 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:11:26,941 - src.models.segmentation.segmentation - INFO - quantize_image:194 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:11:27,079 - src.models.segmentation.segmentation - INFO - segment:541 - Running SOM segmentation with k=8
2025-10-25 01:11:27,525 - src.models.segmentation.segmentation - WARNING - segment:581 - SOM generated empty mask for cluster 2 (k=8). Skipping avg color.
2025-10-25 01:11:27,525 - src.models.segmentation.segmentation - WARNING - segment:581 - SOM generated empty mask for cluster 3 (k=8). Skipping avg color.
2025-10-25 01:11:27,525 - src.models.segmentation.segmentation - WARNING - segment:581 - SOM generated empty mask for cluster 4 (k=8). Skipping avg color.
2025-10-25 01:11:27,526 - root - INFO - process_reference_image:346 - Reference image processing finished in 16.62 seconds.
2025-10-25 01:11:27,799 - root - INFO - run_reference_processing:382 - Formatted K-Means reference results.
2025-10-25 01:11:27,927 - root - INFO - run_reference_processing:418 - Formatted SOM reference results.
2025-10-25 01:11:29,174 - src.utils.output_manager - INFO - save_reference_summary:136 - Saved reference summary image to datasets\block\summaries\reference_summary.png
2025-10-25 01:11:29,174 - root - INFO - run_reference_processing:438 - Reference processed - Target LAB colors shape: (8, 3), DPC k: 2
2025-10-25 01:11:29,174 - root - INFO - timer:154 - Completed: Reference image loading and processing in 18.27 seconds
2025-10-25 01:11:29,182 - root - INFO - timer:148 - Starting: Processing test image block1
2025-10-25 01:11:29,183 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3950, 3950, 3)
2025-10-25 01:11:29,213 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3950x3950 to 512x512
2025-10-25 01:11:30,547 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:11:30,894 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 332 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:11:31,385 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:11:31,386 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:11:31,387 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:11:31,388 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-25 01:11:31,388 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: determined
2025-10-25 01:11:31,389 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:11:31,389 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: determined in 0.00 seconds
2025-10-25 01:11:31,389 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: predefined
2025-10-25 01:11:31,390 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:11:31,390 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: predefined in 0.00 seconds
2025-10-25 01:11:31,390 - root - INFO - timer:154 - Completed: Processing test image block1 in 2.21 seconds
2025-10-25 01:11:31,391 - root - INFO - timer:148 - Starting: Processing test image block2
2025-10-25 01:11:31,391 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 01:11:31,424 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 01:11:32,715 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:11:33,044 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 316 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:11:33,470 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:11:33,471 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:11:33,471 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:11:33,472 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-25 01:11:33,473 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: determined
2025-10-25 01:11:33,474 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:11:33,474 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: determined in 0.00 seconds
2025-10-25 01:11:33,474 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: predefined
2025-10-25 01:11:33,475 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:11:33,475 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: predefined in 0.00 seconds
2025-10-25 01:11:33,475 - root - INFO - timer:154 - Completed: Processing test image block2 in 2.08 seconds
2025-10-25 01:11:33,475 - root - INFO - timer:148 - Starting: Processing test image block3
2025-10-25 01:11:33,476 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3477, 3477, 3)
2025-10-25 01:11:33,499 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3477x3477 to 511x511
2025-10-25 01:11:34,781 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:11:35,132 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 358 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:11:35,554 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:11:35,556 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:11:35,556 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:11:35,558 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-25 01:11:35,558 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: determined
2025-10-25 01:11:35,559 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:11:35,559 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: determined in 0.00 seconds
2025-10-25 01:11:35,559 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: predefined
2025-10-25 01:11:35,560 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:11:35,560 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: predefined in 0.00 seconds
2025-10-25 01:11:35,561 - root - INFO - timer:154 - Completed: Processing test image block3 in 2.09 seconds
2025-10-25 01:11:35,561 - root - INFO - timer:148 - Starting: Processing test image block4
2025-10-25 01:11:35,562 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3622, 3622, 3)
2025-10-25 01:11:35,586 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3622x3622 to 512x512
2025-10-25 01:11:36,944 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:11:37,279 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 258 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:11:37,734 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:11:37,735 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:11:37,735 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:11:37,736 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-25 01:11:37,737 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: determined
2025-10-25 01:11:37,737 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:11:37,738 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: determined in 0.00 seconds
2025-10-25 01:11:37,738 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: predefined
2025-10-25 01:11:37,738 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:11:37,739 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: predefined in 0.00 seconds
2025-10-25 01:11:37,739 - root - INFO - timer:154 - Completed: Processing test image block4 in 2.18 seconds
2025-10-25 01:11:37,740 - root - INFO - timer:148 - Starting: Processing test image block5
2025-10-25 01:11:37,740 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3504, 3504, 3)
2025-10-25 01:11:37,764 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3504x3504 to 512x512
2025-10-25 01:11:39,074 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:11:39,402 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 307 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:11:39,810 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:11:39,811 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:11:39,811 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:11:39,812 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-25 01:11:39,813 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: determined
2025-10-25 01:11:39,814 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:11:39,814 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: determined in 0.00 seconds
2025-10-25 01:11:39,814 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: predefined
2025-10-25 01:11:39,815 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:11:39,815 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: predefined in 0.00 seconds
2025-10-25 01:11:39,815 - root - INFO - timer:154 - Completed: Processing test image block5 in 2.08 seconds
2025-10-25 01:11:39,817 - root - INFO - main:685 - ================================================================================
PROCESSING COMPLETED IN 191.36 SECONDS
================================================================================
2025-10-25 01:11:39,866 - root - INFO - main:693 - Profiling results saved to: C:\Users\LENOVO\Desktop\prints\output\profile_stats.txt
2025-10-25 01:15:45,905 - root - INFO - setup_logging:135 - Logging setup complete. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-25 01:15:45,906 - root - INFO - timer:148 - Starting: Configuration loading and validation
2025-10-25 01:15:45,919 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from c:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-25 01:15:45,924 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-25 01:15:45,924 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-25 01:15:45,924 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-25 01:15:45,927 - root - INFO - validate_processing_config:232 - Processing configuration validation passed
2025-10-25 01:15:45,928 - root - INFO - timer:154 - Completed: Configuration loading and validation in 0.02 seconds
2025-10-25 01:15:45,930 - src.utils.output_manager - INFO - __init__:28 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-25 01:15:45,930 - root - INFO - main:602 - Processing dataset: block
2025-10-25 01:15:45,930 - root - INFO - timer:148 - Starting: Loading all test images
2025-10-25 01:15:46,734 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-25 01:15:47,674 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-25 01:15:48,349 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-25 01:15:48,934 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-25 01:15:49,540 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-25 01:15:49,541 - root - INFO - timer:154 - Completed: Loading all test images in 3.61 seconds
2025-10-25 01:15:49,541 - root - INFO - timer:148 - Starting: Loading training data
2025-10-25 01:15:49,541 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-25 01:15:51,677 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-25 01:15:51,677 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-25 01:15:51,681 - root - INFO - validate_loaded_data:267 - Data validation passed: 50000 total pixels available from 5 images.
2025-10-25 01:15:51,682 - root - INFO - timer:154 - Completed: Loading training data in 2.14 seconds
2025-10-25 01:15:51,682 - root - INFO - timer:148 - Starting: DBN initialization and training
2025-10-25 01:15:51,682 - src.models.dbn_trainer - INFO - __init__:48 - DBNTrainer initialized.
2025-10-25 01:15:51,682 - src.models.dbn_trainer - INFO - train:64 - Starting DBN training and PSO optimization process...
2025-10-25 01:15:51,683 - src.data.preprocess - INFO - efficient_data_sampling:207 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-25 01:15:51,685 - src.data.preprocess - INFO - efficient_data_sampling:282 - Sampling completed: 800 samples extracted.
2025-10-25 01:15:51,685 - src.data.preprocess - INFO - efficient_data_sampling:283 - RGB range: [31.00, 215.00]
2025-10-25 01:15:51,685 - src.data.preprocess - INFO - efficient_data_sampling:284 - LAB ranges: L[11.76, 84.71], a[-2.00, 2.00], b[-2.00, 8.00]
2025-10-25 01:15:51,687 - src.models.dbn_trainer - INFO - train:77 - Training set: (640, 3), Test set: (160, 3)
2025-10-25 01:15:51,687 - src.models.dbn_trainer - INFO - _prepare_scalers:109 - Preparing and fitting scalers...
2025-10-25 01:15:51,691 - src.models.dbn_trainer - INFO - _prepare_scalers:128 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-25 01:15:51,691 - src.models.dbn_trainer - INFO - _prepare_scalers:129 - X range: [0.000, 1.000]
2025-10-25 01:15:51,691 - src.models.dbn_trainer - INFO - _prepare_scalers:130 - Y range: [0.000, 1.000]
2025-10-25 01:15:51,692 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-25 01:15:51,997 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-25 01:15:52,056 - src.models.dbn_trainer - INFO - train:88 - Initial model has 20 weight layers
2025-10-25 01:15:52,056 - src.models.dbn_trainer - INFO - train:90 - Layer 0: shape (3, 100), range [-0.240, 0.241]
2025-10-25 01:15:52,057 - src.models.dbn_trainer - INFO - train:90 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-25 01:15:52,057 - src.models.dbn_trainer - INFO - train:90 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-25 01:15:52,057 - src.models.dbn_trainer - INFO - train:90 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-25 01:15:52,057 - src.models.dbn_trainer - INFO - train:90 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-25 01:15:52,057 - src.models.dbn_trainer - INFO - train:90 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-25 01:15:52,057 - src.models.dbn_trainer - INFO - train:90 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-25 01:15:52,057 - src.models.dbn_trainer - INFO - train:90 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-25 01:15:52,058 - src.models.dbn_trainer - INFO - train:90 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-25 01:15:52,058 - src.models.dbn_trainer - INFO - train:90 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-25 01:15:52,058 - src.models.dbn_trainer - INFO - train:90 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-25 01:15:52,058 - src.models.dbn_trainer - INFO - train:90 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-25 01:15:52,058 - src.models.dbn_trainer - INFO - train:90 - Layer 12: shape (50, 25), range [-0.283, 0.282]
2025-10-25 01:15:52,058 - src.models.dbn_trainer - INFO - train:90 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-25 01:15:52,058 - src.models.dbn_trainer - INFO - train:90 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-25 01:15:52,058 - src.models.dbn_trainer - INFO - train:90 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-25 01:15:52,059 - src.models.dbn_trainer - INFO - train:90 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-25 01:15:52,059 - src.models.dbn_trainer - INFO - train:90 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-25 01:15:52,059 - src.models.dbn_trainer - INFO - train:90 - Layer 18: shape (25, 3), range [-0.457, 0.461]
2025-10-25 01:15:52,059 - src.models.dbn_trainer - INFO - train:90 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-25 01:15:52,059 - src.models.dbn_trainer - INFO - _run_pso_with_retries:139 - PSO optimization attempt 1/3
2025-10-25 01:15:52,059 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-25 01:18:12,817 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 140.75s - Final fitness: 0.035191
2025-10-25 01:18:12,817 - src.models.dbn_trainer - INFO - _run_pso_with_retries:154 - PSO optimization completed successfully
2025-10-25 01:18:12,827 - src.models.dbn_trainer - INFO - train:96 - DBN training and PSO optimization complete.
2025-10-25 01:18:12,827 - root - INFO - timer:154 - Completed: DBN initialization and training in 141.15 seconds
2025-10-25 01:18:12,828 - root - INFO - timer:148 - Starting: Reference image loading and processing
2025-10-25 01:18:12,829 - root - INFO - process_reference_image:259 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-25 01:18:13,232 - root - INFO - process_reference_image:274 - Starting preprocessing for reference image
2025-10-25 01:18:13,232 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 01:18:13,259 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 01:18:14,536 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:18:14,851 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:18:15,634 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:18:15,635 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:18:15,635 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:18:15,635 - root - INFO - process_reference_image:278 - Preprocessing completed, shape: (128, 128, 3)
2025-10-25 01:18:15,635 - root - INFO - process_reference_image:286 - Determining optimal number of clusters for reference
2025-10-25 01:18:15,646 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 118. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:18:15,646 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:18:17,518 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.971, CH=1928419.2
2025-10-25 01:18:17,518 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:18:19,408 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.949, CH=1736550.6
2025-10-25 01:18:19,409 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:18:21,249 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.838, CH=2100819.8
2025-10-25 01:18:21,250 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:18:23,090 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.944, CH=1990492.0
2025-10-25 01:18:23,090 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:18:24,896 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.939, CH=2117556.2
2025-10-25 01:18:24,896 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:18:26,690 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.845, CH=3010854.2
2025-10-25 01:18:26,691 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:18:28,441 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.946, CH=4690803.5
2025-10-25 01:18:28,442 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.908)
2025-10-25 01:18:28,442 - root - INFO - process_reference_image:299 - Optimal clusters determined: 8
2025-10-25 01:18:28,442 - root - INFO - process_reference_image:305 - Determining DPC clusters
2025-10-25 01:18:28,451 - root - INFO - optimal_clusters_dpc:157 - Number of unique colors: 118. Using dynamic_max_k: 10
2025-10-25 01:18:28,453 - root - INFO - optimal_clusters_dpc:185 - Calculated DPC bandwidth: 106.311
2025-10-25 01:18:28,455 - root - INFO - optimal_clusters_dpc:218 - DPC gamma analysis: mean=371.057, std=2016.944, threshold=2388.001
2025-10-25 01:18:28,455 - root - INFO - optimal_clusters_dpc:229 - Optimal number of clusters estimated by DPC gamma heuristic: 2
2025-10-25 01:18:28,455 - root - INFO - process_reference_image:313 - Performing reference segmentation with k=8
2025-10-25 01:18:28,457 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:18:28,457 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:18:28,640 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:18:28,641 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:18:28,772 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=8
2025-10-25 01:18:29,242 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 2 (k=8). Skipping avg color.
2025-10-25 01:18:29,242 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 3 (k=8). Skipping avg color.
2025-10-25 01:18:29,242 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 4 (k=8). Skipping avg color.
2025-10-25 01:18:29,243 - root - INFO - process_reference_image:346 - Reference image processing finished in 16.41 seconds.
2025-10-25 01:18:29,506 - root - INFO - run_reference_processing:382 - Formatted K-Means reference results.
2025-10-25 01:18:29,626 - root - INFO - run_reference_processing:418 - Formatted SOM reference results.
2025-10-25 01:18:30,829 - src.utils.output_manager - INFO - save_reference_summary:136 - Saved reference summary image to datasets\block\summaries\reference_summary.png
2025-10-25 01:18:30,830 - root - INFO - run_reference_processing:438 - Reference processed - Target LAB colors shape: (8, 3), DPC k: 2
2025-10-25 01:18:30,830 - root - INFO - timer:154 - Completed: Reference image loading and processing in 18.00 seconds
2025-10-25 01:18:30,837 - root - INFO - timer:148 - Starting: Processing test image block1
2025-10-25 01:18:30,837 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3950, 3950, 3)
2025-10-25 01:18:30,866 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3950x3950 to 512x512
2025-10-25 01:18:32,177 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:18:32,532 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 332 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:18:32,954 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:18:32,955 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:18:32,956 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:18:32,957 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-25 01:18:32,958 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: determined
2025-10-25 01:18:32,959 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:18:32,959 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: determined in 0.00 seconds
2025-10-25 01:18:32,959 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: predefined
2025-10-25 01:18:32,960 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:18:32,960 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: predefined in 0.00 seconds
2025-10-25 01:18:32,960 - root - INFO - timer:154 - Completed: Processing test image block1 in 2.12 seconds
2025-10-25 01:18:32,961 - root - INFO - timer:148 - Starting: Processing test image block2
2025-10-25 01:18:32,962 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 01:18:32,994 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 01:18:34,293 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:18:34,634 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 316 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:18:35,062 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:18:35,064 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:18:35,064 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:18:35,065 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-25 01:18:35,066 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: determined
2025-10-25 01:18:35,067 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:18:35,067 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: determined in 0.00 seconds
2025-10-25 01:18:35,067 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: predefined
2025-10-25 01:18:35,068 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:18:35,068 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: predefined in 0.00 seconds
2025-10-25 01:18:35,069 - root - INFO - timer:154 - Completed: Processing test image block2 in 2.11 seconds
2025-10-25 01:18:35,069 - root - INFO - timer:148 - Starting: Processing test image block3
2025-10-25 01:18:35,070 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3477, 3477, 3)
2025-10-25 01:18:35,096 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3477x3477 to 511x511
2025-10-25 01:18:36,391 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:18:36,699 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 358 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:18:37,104 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:18:37,106 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:18:37,106 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:18:37,108 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-25 01:18:37,108 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: determined
2025-10-25 01:18:37,109 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:18:37,110 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: determined in 0.00 seconds
2025-10-25 01:18:37,110 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: predefined
2025-10-25 01:18:37,111 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:18:37,111 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: predefined in 0.00 seconds
2025-10-25 01:18:37,111 - root - INFO - timer:154 - Completed: Processing test image block3 in 2.04 seconds
2025-10-25 01:18:37,112 - root - INFO - timer:148 - Starting: Processing test image block4
2025-10-25 01:18:37,112 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3622, 3622, 3)
2025-10-25 01:18:37,138 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3622x3622 to 512x512
2025-10-25 01:18:38,499 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:18:38,830 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 258 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:18:39,250 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:18:39,251 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:18:39,251 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:18:39,252 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-25 01:18:39,253 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: determined
2025-10-25 01:18:39,254 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:18:39,254 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: determined in 0.00 seconds
2025-10-25 01:18:39,254 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: predefined
2025-10-25 01:18:39,255 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:18:39,255 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: predefined in 0.00 seconds
2025-10-25 01:18:39,256 - root - INFO - timer:154 - Completed: Processing test image block4 in 2.14 seconds
2025-10-25 01:18:39,256 - root - INFO - timer:148 - Starting: Processing test image block5
2025-10-25 01:18:39,257 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3504, 3504, 3)
2025-10-25 01:18:39,279 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3504x3504 to 512x512
2025-10-25 01:18:40,628 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:18:40,949 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 307 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:18:41,373 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:18:41,374 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:18:41,375 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:18:41,376 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-25 01:18:41,376 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: determined
2025-10-25 01:18:41,377 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:18:41,377 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: determined in 0.00 seconds
2025-10-25 01:18:41,377 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: predefined
2025-10-25 01:18:41,378 - root - ERROR - process_single_test_image:550 - Ellipsis
2025-10-25 01:18:41,378 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: predefined in 0.00 seconds
2025-10-25 01:18:41,379 - root - INFO - timer:154 - Completed: Processing test image block5 in 2.12 seconds
2025-10-25 01:18:41,380 - root - INFO - main:685 - ================================================================================
PROCESSING COMPLETED IN 175.48 SECONDS
================================================================================
2025-10-25 01:18:41,426 - root - INFO - main:693 - Profiling results saved to: C:\Users\LENOVO\Desktop\prints\output\profile_stats.txt
2025-10-25 01:26:14,955 - root - INFO - setup_logging:135 - Logging setup complete. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-25 01:26:14,956 - root - INFO - timer:148 - Starting: Configuration loading and validation
2025-10-25 01:26:14,969 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from c:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-25 01:26:14,972 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-25 01:26:14,972 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-25 01:26:14,972 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-25 01:26:14,975 - root - INFO - validate_processing_config:232 - Processing configuration validation passed
2025-10-25 01:26:14,975 - root - INFO - timer:154 - Completed: Configuration loading and validation in 0.02 seconds
2025-10-25 01:26:14,977 - src.utils.output_manager - INFO - __init__:28 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-25 01:26:14,977 - root - INFO - main:608 - Processing dataset: block
2025-10-25 01:26:14,979 - root - INFO - timer:148 - Starting: Loading all test images
2025-10-25 01:26:15,664 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-25 01:26:16,520 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-25 01:26:17,005 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-25 01:26:17,524 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-25 01:26:18,037 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-25 01:26:18,037 - root - INFO - timer:154 - Completed: Loading all test images in 3.06 seconds
2025-10-25 01:26:18,037 - root - INFO - timer:148 - Starting: Loading training data
2025-10-25 01:26:18,038 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-25 01:26:20,065 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-25 01:26:20,066 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-25 01:26:20,070 - root - INFO - validate_loaded_data:267 - Data validation passed: 50000 total pixels available from 5 images.
2025-10-25 01:26:20,070 - root - INFO - timer:154 - Completed: Loading training data in 2.03 seconds
2025-10-25 01:26:20,071 - root - INFO - timer:148 - Starting: DBN initialization and training
2025-10-25 01:26:20,071 - src.models.dbn_trainer - INFO - __init__:48 - DBNTrainer initialized.
2025-10-25 01:26:20,071 - src.models.dbn_trainer - INFO - train:64 - Starting DBN training and PSO optimization process...
2025-10-25 01:26:20,071 - src.data.preprocess - INFO - efficient_data_sampling:207 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-25 01:26:20,074 - src.data.preprocess - INFO - efficient_data_sampling:282 - Sampling completed: 800 samples extracted.
2025-10-25 01:26:20,074 - src.data.preprocess - INFO - efficient_data_sampling:283 - RGB range: [32.00, 213.00]
2025-10-25 01:26:20,075 - src.data.preprocess - INFO - efficient_data_sampling:284 - LAB ranges: L[12.16, 84.31], a[-2.00, 2.00], b[-1.00, 8.00]
2025-10-25 01:26:20,076 - src.models.dbn_trainer - INFO - train:77 - Training set: (640, 3), Test set: (160, 3)
2025-10-25 01:26:20,076 - src.models.dbn_trainer - INFO - _prepare_scalers:109 - Preparing and fitting scalers...
2025-10-25 01:26:20,082 - src.models.dbn_trainer - INFO - _prepare_scalers:128 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-25 01:26:20,082 - src.models.dbn_trainer - INFO - _prepare_scalers:129 - X range: [0.000, 1.000]
2025-10-25 01:26:20,082 - src.models.dbn_trainer - INFO - _prepare_scalers:130 - Y range: [0.000, 1.000]
2025-10-25 01:26:20,082 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-25 01:26:20,371 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-25 01:26:20,428 - src.models.dbn_trainer - INFO - train:88 - Initial model has 20 weight layers
2025-10-25 01:26:20,429 - src.models.dbn_trainer - INFO - train:90 - Layer 0: shape (3, 100), range [-0.240, 0.240]
2025-10-25 01:26:20,429 - src.models.dbn_trainer - INFO - train:90 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-25 01:26:20,429 - src.models.dbn_trainer - INFO - train:90 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-25 01:26:20,429 - src.models.dbn_trainer - INFO - train:90 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-25 01:26:20,429 - src.models.dbn_trainer - INFO - train:90 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-25 01:26:20,429 - src.models.dbn_trainer - INFO - train:90 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-25 01:26:20,429 - src.models.dbn_trainer - INFO - train:90 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-25 01:26:20,430 - src.models.dbn_trainer - INFO - train:90 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-25 01:26:20,430 - src.models.dbn_trainer - INFO - train:90 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-25 01:26:20,430 - src.models.dbn_trainer - INFO - train:90 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-25 01:26:20,430 - src.models.dbn_trainer - INFO - train:90 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-25 01:26:20,430 - src.models.dbn_trainer - INFO - train:90 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-25 01:26:20,430 - src.models.dbn_trainer - INFO - train:90 - Layer 12: shape (50, 25), range [-0.283, 0.282]
2025-10-25 01:26:20,430 - src.models.dbn_trainer - INFO - train:90 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-25 01:26:20,430 - src.models.dbn_trainer - INFO - train:90 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-25 01:26:20,430 - src.models.dbn_trainer - INFO - train:90 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-25 01:26:20,431 - src.models.dbn_trainer - INFO - train:90 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-25 01:26:20,431 - src.models.dbn_trainer - INFO - train:90 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-25 01:26:20,431 - src.models.dbn_trainer - INFO - train:90 - Layer 18: shape (25, 3), range [-0.462, 0.458]
2025-10-25 01:26:20,431 - src.models.dbn_trainer - INFO - train:90 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-25 01:26:20,431 - src.models.dbn_trainer - INFO - _run_pso_with_retries:139 - PSO optimization attempt 1/3
2025-10-25 01:26:20,431 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-25 01:28:51,979 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 151.54s - Final fitness: 0.040410
2025-10-25 01:28:51,979 - src.models.dbn_trainer - INFO - _run_pso_with_retries:154 - PSO optimization completed successfully
2025-10-25 01:28:51,990 - src.models.dbn_trainer - INFO - train:96 - DBN training and PSO optimization complete.
2025-10-25 01:28:51,990 - root - INFO - timer:154 - Completed: DBN initialization and training in 151.92 seconds
2025-10-25 01:28:51,991 - root - INFO - timer:148 - Starting: Reference image loading and processing
2025-10-25 01:28:51,991 - root - INFO - process_reference_image:259 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-25 01:28:52,435 - root - INFO - process_reference_image:274 - Starting preprocessing for reference image
2025-10-25 01:28:52,435 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 01:28:52,466 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 01:28:53,777 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:28:54,094 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:28:54,844 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:28:54,845 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:28:54,845 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:28:54,845 - root - INFO - process_reference_image:278 - Preprocessing completed, shape: (128, 128, 3)
2025-10-25 01:28:54,845 - root - INFO - process_reference_image:286 - Determining optimal number of clusters for reference
2025-10-25 01:28:54,856 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 107. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:28:54,857 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:28:56,739 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.970, CH=1874056.2
2025-10-25 01:28:56,739 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:28:58,646 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.947, CH=1605900.1
2025-10-25 01:28:58,646 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:29:00,494 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.809, CH=1848090.4
2025-10-25 01:29:00,495 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:29:02,304 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.943, CH=1909713.0
2025-10-25 01:29:02,304 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:29:04,107 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.935, CH=2231179.5
2025-10-25 01:29:04,107 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:29:05,940 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.906, CH=3619498.0
2025-10-25 01:29:05,940 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:29:07,760 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.940, CH=3890680.5
2025-10-25 01:29:07,760 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.905)
2025-10-25 01:29:07,761 - root - INFO - process_reference_image:299 - Optimal clusters determined: 8
2025-10-25 01:29:07,761 - root - INFO - process_reference_image:305 - Determining DPC clusters
2025-10-25 01:29:07,770 - root - INFO - optimal_clusters_dpc:157 - Number of unique colors: 107. Using dynamic_max_k: 10
2025-10-25 01:29:07,773 - root - INFO - optimal_clusters_dpc:185 - Calculated DPC bandwidth: 103.446
2025-10-25 01:29:07,775 - root - INFO - optimal_clusters_dpc:218 - DPC gamma analysis: mean=370.325, std=1949.660, threshold=2319.985
2025-10-25 01:29:07,775 - root - INFO - optimal_clusters_dpc:229 - Optimal number of clusters estimated by DPC gamma heuristic: 2
2025-10-25 01:29:07,775 - root - INFO - process_reference_image:313 - Performing reference segmentation with k=8
2025-10-25 01:29:07,776 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:29:07,777 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:29:07,980 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:29:07,980 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:29:08,125 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=8
2025-10-25 01:29:08,622 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 2 (k=8). Skipping avg color.
2025-10-25 01:29:08,622 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 3 (k=8). Skipping avg color.
2025-10-25 01:29:08,622 - root - INFO - process_reference_image:346 - Reference image processing finished in 16.63 seconds.
2025-10-25 01:29:08,911 - root - INFO - run_reference_processing:382 - Formatted K-Means reference results.
2025-10-25 01:29:09,033 - root - INFO - run_reference_processing:418 - Formatted SOM reference results.
2025-10-25 01:29:10,272 - src.utils.output_manager - INFO - save_reference_summary:136 - Saved reference summary image to datasets\block\summaries\reference_summary.png
2025-10-25 01:29:10,273 - root - INFO - run_reference_processing:438 - Reference processed - Target LAB colors shape: (8, 3), DPC k: 2
2025-10-25 01:29:10,273 - root - INFO - timer:154 - Completed: Reference image loading and processing in 18.28 seconds
2025-10-25 01:29:10,280 - root - INFO - timer:148 - Starting: Processing test image block1
2025-10-25 01:29:10,280 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3950, 3950, 3)
2025-10-25 01:29:10,306 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3950x3950 to 512x512
2025-10-25 01:29:11,673 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:29:12,042 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 332 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:29:12,474 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:29:12,476 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:29:12,476 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:29:12,477 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-25 01:29:12,478 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: determined
2025-10-25 01:29:12,481 - root - ERROR - process_single_test_image:555 - Segmentation failed for block1 with determined: KeyError: 's'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 519, in process_single_test_image
    scalers=[scalers['scaler_x'], scalers['scaler_y'], scalers['s']], # Pass as list
KeyError: 's'
2025-10-25 01:29:12,481 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: determined in 0.00 seconds
2025-10-25 01:29:12,481 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: predefined
2025-10-25 01:29:12,483 - root - ERROR - process_single_test_image:555 - Segmentation failed for block1 with predefined: KeyError: 's'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 519, in process_single_test_image
    scalers=[scalers['scaler_x'], scalers['scaler_y'], scalers['s']], # Pass as list
KeyError: 's'
2025-10-25 01:29:12,484 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: predefined in 0.00 seconds
2025-10-25 01:29:12,484 - root - INFO - timer:154 - Completed: Processing test image block1 in 2.20 seconds
2025-10-25 01:29:12,485 - root - INFO - timer:148 - Starting: Processing test image block2
2025-10-25 01:29:12,486 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 01:29:12,520 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 01:29:13,869 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:29:14,227 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 316 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:29:14,629 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:29:14,630 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:29:14,630 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:29:14,632 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-25 01:29:14,633 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: determined
2025-10-25 01:29:14,635 - root - ERROR - process_single_test_image:555 - Segmentation failed for block2 with determined: KeyError: 's'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 519, in process_single_test_image
    scalers=[scalers['scaler_x'], scalers['scaler_y'], scalers['s']], # Pass as list
KeyError: 's'
2025-10-25 01:29:14,635 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: determined in 0.00 seconds
2025-10-25 01:29:14,636 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: predefined
2025-10-25 01:29:14,638 - root - ERROR - process_single_test_image:555 - Segmentation failed for block2 with predefined: KeyError: 's'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 519, in process_single_test_image
    scalers=[scalers['scaler_x'], scalers['scaler_y'], scalers['s']], # Pass as list
KeyError: 's'
2025-10-25 01:29:14,638 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: predefined in 0.00 seconds
2025-10-25 01:29:14,639 - root - INFO - timer:154 - Completed: Processing test image block2 in 2.15 seconds
2025-10-25 01:29:14,639 - root - INFO - timer:148 - Starting: Processing test image block3
2025-10-25 01:29:14,640 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3477, 3477, 3)
2025-10-25 01:29:14,661 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3477x3477 to 511x511
2025-10-25 01:29:15,972 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:29:16,310 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 358 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:29:16,753 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:29:16,755 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:29:16,755 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:29:16,756 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-25 01:29:16,757 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: determined
2025-10-25 01:29:16,759 - root - ERROR - process_single_test_image:555 - Segmentation failed for block3 with determined: KeyError: 's'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 519, in process_single_test_image
    scalers=[scalers['scaler_x'], scalers['scaler_y'], scalers['s']], # Pass as list
KeyError: 's'
2025-10-25 01:29:16,760 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: determined in 0.00 seconds
2025-10-25 01:29:16,760 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: predefined
2025-10-25 01:29:16,762 - root - ERROR - process_single_test_image:555 - Segmentation failed for block3 with predefined: KeyError: 's'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 519, in process_single_test_image
    scalers=[scalers['scaler_x'], scalers['scaler_y'], scalers['s']], # Pass as list
KeyError: 's'
2025-10-25 01:29:16,763 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: predefined in 0.00 seconds
2025-10-25 01:29:16,764 - root - INFO - timer:154 - Completed: Processing test image block3 in 2.12 seconds
2025-10-25 01:29:16,765 - root - INFO - timer:148 - Starting: Processing test image block4
2025-10-25 01:29:16,765 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3622, 3622, 3)
2025-10-25 01:29:16,790 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3622x3622 to 512x512
2025-10-25 01:29:18,194 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:29:18,527 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 258 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:29:18,967 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:29:18,968 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:29:18,968 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:29:18,969 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-25 01:29:18,970 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: determined
2025-10-25 01:29:18,972 - root - ERROR - process_single_test_image:555 - Segmentation failed for block4 with determined: KeyError: 's'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 519, in process_single_test_image
    scalers=[scalers['scaler_x'], scalers['scaler_y'], scalers['s']], # Pass as list
KeyError: 's'
2025-10-25 01:29:18,973 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: determined in 0.00 seconds
2025-10-25 01:29:18,973 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: predefined
2025-10-25 01:29:18,975 - root - ERROR - process_single_test_image:555 - Segmentation failed for block4 with predefined: KeyError: 's'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 519, in process_single_test_image
    scalers=[scalers['scaler_x'], scalers['scaler_y'], scalers['s']], # Pass as list
KeyError: 's'
2025-10-25 01:29:18,975 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: predefined in 0.00 seconds
2025-10-25 01:29:18,976 - root - INFO - timer:154 - Completed: Processing test image block4 in 2.21 seconds
2025-10-25 01:29:18,976 - root - INFO - timer:148 - Starting: Processing test image block5
2025-10-25 01:29:18,977 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3504, 3504, 3)
2025-10-25 01:29:19,000 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3504x3504 to 512x512
2025-10-25 01:29:20,330 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:29:20,661 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 307 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:29:21,106 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:29:21,107 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:29:21,107 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:29:21,108 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-25 01:29:21,108 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: determined
2025-10-25 01:29:21,110 - root - ERROR - process_single_test_image:555 - Segmentation failed for block5 with determined: KeyError: 's'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 519, in process_single_test_image
    scalers=[scalers['scaler_x'], scalers['scaler_y'], scalers['s']], # Pass as list
KeyError: 's'
2025-10-25 01:29:21,111 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: determined in 0.00 seconds
2025-10-25 01:29:21,111 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: predefined
2025-10-25 01:29:21,113 - root - ERROR - process_single_test_image:555 - Segmentation failed for block5 with predefined: KeyError: 's'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 519, in process_single_test_image
    scalers=[scalers['scaler_x'], scalers['scaler_y'], scalers['s']], # Pass as list
KeyError: 's'
2025-10-25 01:29:21,113 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: predefined in 0.00 seconds
2025-10-25 01:29:21,114 - root - INFO - timer:154 - Completed: Processing test image block5 in 2.14 seconds
2025-10-25 01:29:21,115 - root - INFO - main:691 - ================================================================================
PROCESSING COMPLETED IN 186.16 SECONDS
================================================================================
2025-10-25 01:29:21,163 - root - INFO - main:699 - Profiling results saved to: C:\Users\LENOVO\Desktop\prints\output\profile_stats.txt
2025-10-25 01:32:48,427 - root - INFO - setup_logging:135 - Logging setup complete. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-25 01:32:48,428 - root - INFO - timer:148 - Starting: Configuration loading and validation
2025-10-25 01:32:48,441 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from c:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-25 01:32:48,443 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-25 01:32:48,444 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-25 01:32:48,444 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-25 01:32:48,446 - root - INFO - validate_processing_config:232 - Processing configuration validation passed
2025-10-25 01:32:48,446 - root - INFO - timer:154 - Completed: Configuration loading and validation in 0.02 seconds
2025-10-25 01:32:48,449 - src.utils.output_manager - INFO - __init__:28 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-25 01:32:48,450 - root - INFO - main:608 - Processing dataset: block
2025-10-25 01:32:48,451 - root - INFO - timer:148 - Starting: Loading all test images
2025-10-25 01:32:49,173 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-25 01:32:50,052 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-25 01:32:50,522 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-25 01:32:51,037 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-25 01:32:51,572 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-25 01:32:51,572 - root - INFO - timer:154 - Completed: Loading all test images in 3.12 seconds
2025-10-25 01:32:51,573 - root - INFO - timer:148 - Starting: Loading training data
2025-10-25 01:32:51,573 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-25 01:32:53,584 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-25 01:32:53,584 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-25 01:32:53,590 - root - INFO - validate_loaded_data:267 - Data validation passed: 50000 total pixels available from 5 images.
2025-10-25 01:32:53,590 - root - INFO - timer:154 - Completed: Loading training data in 2.02 seconds
2025-10-25 01:32:53,590 - root - INFO - timer:148 - Starting: DBN initialization and training
2025-10-25 01:32:53,591 - src.models.dbn_trainer - INFO - __init__:48 - DBNTrainer initialized.
2025-10-25 01:32:53,591 - src.models.dbn_trainer - INFO - train:64 - Starting DBN training and PSO optimization process...
2025-10-25 01:32:53,591 - src.data.preprocess - INFO - efficient_data_sampling:207 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-25 01:32:53,596 - src.data.preprocess - INFO - efficient_data_sampling:282 - Sampling completed: 800 samples extracted.
2025-10-25 01:32:53,596 - src.data.preprocess - INFO - efficient_data_sampling:283 - RGB range: [31.00, 214.00]
2025-10-25 01:32:53,596 - src.data.preprocess - INFO - efficient_data_sampling:284 - LAB ranges: L[11.76, 84.31], a[-2.00, 2.00], b[-1.00, 8.00]
2025-10-25 01:32:53,598 - src.models.dbn_trainer - INFO - train:77 - Training set: (640, 3), Test set: (160, 3)
2025-10-25 01:32:53,598 - src.models.dbn_trainer - INFO - _prepare_scalers:109 - Preparing and fitting scalers...
2025-10-25 01:32:53,603 - src.models.dbn_trainer - INFO - _prepare_scalers:128 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-25 01:32:53,603 - src.models.dbn_trainer - INFO - _prepare_scalers:129 - X range: [0.000, 1.000]
2025-10-25 01:32:53,604 - src.models.dbn_trainer - INFO - _prepare_scalers:130 - Y range: [0.000, 1.000]
2025-10-25 01:32:53,604 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-25 01:32:53,901 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-25 01:32:53,960 - src.models.dbn_trainer - INFO - train:88 - Initial model has 20 weight layers
2025-10-25 01:32:53,960 - src.models.dbn_trainer - INFO - train:90 - Layer 0: shape (3, 100), range [-0.240, 0.241]
2025-10-25 01:32:53,960 - src.models.dbn_trainer - INFO - train:90 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-25 01:32:53,961 - src.models.dbn_trainer - INFO - train:90 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-25 01:32:53,961 - src.models.dbn_trainer - INFO - train:90 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-25 01:32:53,961 - src.models.dbn_trainer - INFO - train:90 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-25 01:32:53,961 - src.models.dbn_trainer - INFO - train:90 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-25 01:32:53,961 - src.models.dbn_trainer - INFO - train:90 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-25 01:32:53,961 - src.models.dbn_trainer - INFO - train:90 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-25 01:32:53,961 - src.models.dbn_trainer - INFO - train:90 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-25 01:32:53,962 - src.models.dbn_trainer - INFO - train:90 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-25 01:32:53,962 - src.models.dbn_trainer - INFO - train:90 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-25 01:32:53,962 - src.models.dbn_trainer - INFO - train:90 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-25 01:32:53,962 - src.models.dbn_trainer - INFO - train:90 - Layer 12: shape (50, 25), range [-0.282, 0.282]
2025-10-25 01:32:53,962 - src.models.dbn_trainer - INFO - train:90 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-25 01:32:53,962 - src.models.dbn_trainer - INFO - train:90 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-25 01:32:53,962 - src.models.dbn_trainer - INFO - train:90 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-25 01:32:53,963 - src.models.dbn_trainer - INFO - train:90 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-25 01:32:53,963 - src.models.dbn_trainer - INFO - train:90 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-25 01:32:53,963 - src.models.dbn_trainer - INFO - train:90 - Layer 18: shape (25, 3), range [-0.448, 0.463]
2025-10-25 01:32:53,963 - src.models.dbn_trainer - INFO - train:90 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-25 01:32:53,963 - src.models.dbn_trainer - INFO - _run_pso_with_retries:139 - PSO optimization attempt 1/3
2025-10-25 01:32:53,963 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-25 01:35:36,295 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 162.32s - Final fitness: 0.045005
2025-10-25 01:35:36,295 - src.models.dbn_trainer - INFO - _run_pso_with_retries:154 - PSO optimization completed successfully
2025-10-25 01:35:36,305 - src.models.dbn_trainer - INFO - train:96 - DBN training and PSO optimization complete.
2025-10-25 01:35:36,305 - root - INFO - timer:154 - Completed: DBN initialization and training in 162.72 seconds
2025-10-25 01:35:36,306 - root - INFO - timer:148 - Starting: Reference image loading and processing
2025-10-25 01:35:36,306 - root - INFO - process_reference_image:259 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-25 01:35:36,696 - root - INFO - process_reference_image:274 - Starting preprocessing for reference image
2025-10-25 01:35:36,697 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 01:35:36,727 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 01:35:38,032 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:35:38,353 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:35:39,128 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:35:39,129 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:35:39,129 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:35:39,129 - root - INFO - process_reference_image:278 - Preprocessing completed, shape: (128, 128, 3)
2025-10-25 01:35:39,130 - root - INFO - process_reference_image:286 - Determining optimal number of clusters for reference
2025-10-25 01:35:39,141 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 111. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:35:39,141 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:35:41,186 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.970, CH=1802043.2
2025-10-25 01:35:41,186 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:35:43,202 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.796, CH=1208665.8
2025-10-25 01:35:43,202 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:35:45,079 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.803, CH=1832646.4
2025-10-25 01:35:45,079 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:35:46,905 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.944, CH=1916141.1
2025-10-25 01:35:46,905 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:35:49,064 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.936, CH=2230498.2
2025-10-25 01:35:49,064 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:35:51,057 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.904, CH=3568156.5
2025-10-25 01:35:51,057 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:35:52,865 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.946, CH=4223537.0
2025-10-25 01:35:52,866 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.930)
2025-10-25 01:35:52,866 - root - INFO - process_reference_image:299 - Optimal clusters determined: 8
2025-10-25 01:35:52,866 - root - INFO - process_reference_image:305 - Determining DPC clusters
2025-10-25 01:35:52,876 - root - INFO - optimal_clusters_dpc:157 - Number of unique colors: 111. Using dynamic_max_k: 10
2025-10-25 01:35:52,878 - root - INFO - optimal_clusters_dpc:185 - Calculated DPC bandwidth: 105.769
2025-10-25 01:35:52,880 - root - INFO - optimal_clusters_dpc:218 - DPC gamma analysis: mean=374.391, std=1995.643, threshold=2370.034
2025-10-25 01:35:52,880 - root - INFO - optimal_clusters_dpc:229 - Optimal number of clusters estimated by DPC gamma heuristic: 2
2025-10-25 01:35:52,880 - root - INFO - process_reference_image:313 - Performing reference segmentation with k=8
2025-10-25 01:35:52,881 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:35:52,882 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:35:53,065 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:35:53,066 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:35:53,199 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=8
2025-10-25 01:35:53,690 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 2 (k=8). Skipping avg color.
2025-10-25 01:35:53,690 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 3 (k=8). Skipping avg color.
2025-10-25 01:35:53,691 - root - INFO - process_reference_image:346 - Reference image processing finished in 17.38 seconds.
2025-10-25 01:35:53,966 - root - INFO - run_reference_processing:382 - Formatted K-Means reference results.
2025-10-25 01:35:54,089 - root - INFO - run_reference_processing:418 - Formatted SOM reference results.
2025-10-25 01:35:55,318 - src.utils.output_manager - INFO - save_reference_summary:136 - Saved reference summary image to datasets\block\summaries\reference_summary.png
2025-10-25 01:35:55,319 - root - INFO - run_reference_processing:438 - Reference processed - Target LAB colors shape: (8, 3), DPC k: 2
2025-10-25 01:35:55,319 - root - INFO - timer:154 - Completed: Reference image loading and processing in 19.01 seconds
2025-10-25 01:35:55,327 - root - INFO - timer:148 - Starting: Processing test image block1
2025-10-25 01:35:55,327 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3950, 3950, 3)
2025-10-25 01:35:55,358 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3950x3950 to 512x512
2025-10-25 01:35:56,713 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:35:57,113 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 332 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:35:57,538 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:35:57,539 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:35:57,539 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:35:57,540 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-25 01:35:57,541 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: determined
2025-10-25 01:35:57,544 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: determined
2025-10-25 01:35:57,548 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: determined
2025-10-25 01:35:57,551 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 01:35:57,552 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 01:35:57,552 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:35:57,553 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_opt
2025-10-25 01:35:57,553 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:35:57,766 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:35:57,766 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:35:57,768 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:35:59,657 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.986, CH=2828374.2
2025-10-25 01:35:59,657 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:36:01,538 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.978, CH=4290683.0
2025-10-25 01:36:01,539 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:36:03,437 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.969, CH=4192395.0
2025-10-25 01:36:03,437 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:36:05,320 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.954, CH=4131505.8
2025-10-25 01:36:05,320 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:36:07,179 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.897, CH=5228626.0
2025-10-25 01:36:07,180 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:36:09,045 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.897, CH=6353310.5
2025-10-25 01:36:09,045 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:36:10,897 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.906, CH=8052819.5
2025-10-25 01:36:10,897 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 3 (based on score: 0.594)
2025-10-25 01:36:10,914 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_opt completed in 13.36s with 3 clusters.
2025-10-25 01:36:10,916 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_opt_determined_segmented.png
2025-10-25 01:36:10,916 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_opt
2025-10-25 01:36:10,917 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:36:11,070 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:36:11,070 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:36:11,071 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:36:13,020 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.986, CH=2812363.5
2025-10-25 01:36:13,020 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:36:14,913 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.978, CH=4567257.5
2025-10-25 01:36:14,914 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:36:16,797 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.965, CH=3986410.5
2025-10-25 01:36:16,797 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:36:18,688 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.955, CH=4531906.0
2025-10-25 01:36:18,688 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:36:20,543 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.902, CH=5698208.5
2025-10-25 01:36:20,543 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:36:22,376 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.903, CH=7269333.5
2025-10-25 01:36:22,377 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:36:24,251 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.903, CH=7576965.0
2025-10-25 01:36:24,251 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 3 (based on score: 0.636)
2025-10-25 01:36:24,251 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=3
2025-10-25 01:36:24,691 - src.models.segmentation.segmentation - INFO - process:693 - Method som_opt completed in 13.78s with 3 clusters.
2025-10-25 01:36:24,692 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_opt_determined_segmented.png
2025-10-25 01:36:24,693 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:36:24,693 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:36:24,811 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:387 - Finding optimal DBSCAN parameters...
2025-10-25 01:36:26,671 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=5) found 5 clusters.
2025-10-25 01:36:32,179 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=5) -> clusters=5, silhouette: 0.960
2025-10-25 01:36:33,904 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=10) found 6 clusters.
2025-10-25 01:36:39,498 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=10) -> clusters=6, silhouette: 0.955
2025-10-25 01:36:41,186 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=20) found 4 clusters.
2025-10-25 01:36:46,720 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=20) -> clusters=4, silhouette: 0.963
2025-10-25 01:36:48,453 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=5) found 1 clusters.
2025-10-25 01:36:48,454 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=15, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:36:50,231 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=10) found 3 clusters.
2025-10-25 01:36:55,820 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=10) -> clusters=3, silhouette: 0.970
2025-10-25 01:36:57,603 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=20) found 3 clusters.
2025-10-25 01:37:03,080 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=20) -> clusters=3, silhouette: 0.975
2025-10-25 01:37:04,820 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=5) found 1 clusters.
2025-10-25 01:37:04,820 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:37:06,633 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=10) found 1 clusters.
2025-10-25 01:37:06,633 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=10) -> found <= 1 cluster. Skipping score.
2025-10-25 01:37:08,385 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=20) found 3 clusters.
2025-10-25 01:37:13,903 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=20, min=20) -> clusters=3, silhouette: 0.970
2025-10-25 01:37:13,903 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:412 - Optimal DBSCAN parameters found: eps=15, min_samples=20
2025-10-25 01:37:15,653 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=20) found 3 clusters.
2025-10-25 01:37:15,671 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 50.98s with 3 clusters.
2025-10-25 01:37:15,674 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_determined_segmented.png
2025-10-25 01:37:15,675 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='determined'.
2025-10-25 01:37:15,676 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: determined in 78.14 seconds
2025-10-25 01:37:15,677 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: predefined
2025-10-25 01:37:15,681 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:37:15,685 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:37:15,689 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 01:37:15,689 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 01:37:15,689 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:37:15,690 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_predef
2025-10-25 01:37:15,690 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:37:15,838 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_predef completed in 0.14s with 2 clusters.
2025-10-25 01:37:15,840 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_predef_predefined_segmented.png
2025-10-25 01:37:15,840 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_predef
2025-10-25 01:37:15,840 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:37:16,000 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=2
2025-10-25 01:37:16,477 - src.models.segmentation.segmentation - INFO - process:693 - Method som_predef completed in 0.64s with 2 clusters.
2025-10-25 01:37:16,478 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_predef_predefined_segmented.png
2025-10-25 01:37:16,478 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:37:16,478 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:37:16,595 - src.models.segmentation.segmentation - INFO - segment:431 - Using predefined DBSCAN params: eps=10.0, min_samples=5
2025-10-25 01:37:18,433 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10.0, min=5) found 5 clusters.
2025-10-25 01:37:18,454 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 1.98s with 5 clusters.
2025-10-25 01:37:18,455 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_predefined_segmented.png
2025-10-25 01:37:18,455 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='predefined'.
2025-10-25 01:37:18,457 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: predefined in 2.78 seconds
2025-10-25 01:37:18,458 - root - INFO - timer:154 - Completed: Processing test image block1 in 83.13 seconds
2025-10-25 01:37:18,458 - root - INFO - timer:148 - Starting: Processing test image block2
2025-10-25 01:37:18,459 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 01:37:18,492 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 01:37:19,846 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:37:20,183 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 316 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:37:20,607 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:37:20,608 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:37:20,609 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:37:20,610 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-25 01:37:20,610 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: determined
2025-10-25 01:37:20,614 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: determined
2025-10-25 01:37:20,618 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: determined
2025-10-25 01:37:20,621 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 01:37:20,622 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 01:37:20,622 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:37:20,622 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_opt
2025-10-25 01:37:20,623 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:37:20,770 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:37:20,770 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:37:20,772 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:37:22,661 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.981, CH=2504983.2
2025-10-25 01:37:22,661 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:37:24,629 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.966, CH=2766195.5
2025-10-25 01:37:24,629 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:37:26,525 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.950, CH=2622377.0
2025-10-25 01:37:26,525 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:37:28,399 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.937, CH=2476370.5
2025-10-25 01:37:28,399 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:37:30,305 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.855, CH=3075288.2
2025-10-25 01:37:30,306 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:37:32,133 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.830, CH=3546745.0
2025-10-25 01:37:32,133 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:37:33,950 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.920, CH=5625964.5
2025-10-25 01:37:33,950 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.798)
2025-10-25 01:37:34,009 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_opt completed in 13.39s with 8 clusters.
2025-10-25 01:37:34,010 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_opt_determined_segmented.png
2025-10-25 01:37:34,010 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_opt
2025-10-25 01:37:34,010 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:37:34,163 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:37:34,164 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:37:34,165 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:37:36,144 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.981, CH=2514499.5
2025-10-25 01:37:36,144 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:37:38,057 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.968, CH=2855102.8
2025-10-25 01:37:38,057 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:37:39,954 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.953, CH=2781413.8
2025-10-25 01:37:39,955 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:37:41,810 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.905, CH=2482358.0
2025-10-25 01:37:41,810 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:37:43,646 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.821, CH=3069611.2
2025-10-25 01:37:43,647 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:37:45,465 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.833, CH=4035854.5
2025-10-25 01:37:45,465 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:37:47,271 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.918, CH=6876205.5
2025-10-25 01:37:47,271 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.802)
2025-10-25 01:37:47,271 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=8
2025-10-25 01:37:47,686 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 2 (k=8). Skipping avg color.
2025-10-25 01:37:47,686 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 3 (k=8). Skipping avg color.
2025-10-25 01:37:47,686 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 6 (k=8). Skipping avg color.
2025-10-25 01:37:47,687 - src.models.segmentation.segmentation - INFO - process:693 - Method som_opt completed in 13.68s with 8 clusters.
2025-10-25 01:37:47,688 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_opt_determined_segmented.png
2025-10-25 01:37:47,688 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:37:47,688 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:37:47,811 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:387 - Finding optimal DBSCAN parameters...
2025-10-25 01:37:49,817 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=5) found 5 clusters.
2025-10-25 01:37:55,286 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=5) -> clusters=5, silhouette: 0.955
2025-10-25 01:37:57,143 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=10) found 5 clusters.
2025-10-25 01:38:02,590 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=10) -> clusters=5, silhouette: 0.955
2025-10-25 01:38:04,421 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=20) found 5 clusters.
2025-10-25 01:38:10,062 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=20) -> clusters=5, silhouette: 0.926
2025-10-25 01:38:11,924 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=5) found 1 clusters.
2025-10-25 01:38:11,924 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=15, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:38:13,994 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=10) found 1 clusters.
2025-10-25 01:38:13,994 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=15, min=10) -> found <= 1 cluster. Skipping score.
2025-10-25 01:38:15,936 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=20) found 2 clusters.
2025-10-25 01:38:21,639 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=20) -> clusters=2, silhouette: 0.967
2025-10-25 01:38:23,982 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=5) found 1 clusters.
2025-10-25 01:38:23,983 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:38:26,398 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=10) found 1 clusters.
2025-10-25 01:38:26,398 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=10) -> found <= 1 cluster. Skipping score.
2025-10-25 01:38:28,409 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=20) found 3 clusters.
2025-10-25 01:38:34,598 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=20, min=20) -> clusters=3, silhouette: 0.964
2025-10-25 01:38:34,598 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:412 - Optimal DBSCAN parameters found: eps=15, min_samples=20
2025-10-25 01:38:36,494 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=20) found 2 clusters.
2025-10-25 01:38:36,535 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 48.85s with 2 clusters.
2025-10-25 01:38:36,537 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_determined_segmented.png
2025-10-25 01:38:36,537 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='determined'.
2025-10-25 01:38:36,541 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: determined in 75.93 seconds
2025-10-25 01:38:36,541 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: predefined
2025-10-25 01:38:36,552 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:38:36,556 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:38:36,561 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 01:38:36,562 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 01:38:36,562 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:38:36,562 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_predef
2025-10-25 01:38:36,563 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:38:36,757 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_predef completed in 0.19s with 2 clusters.
2025-10-25 01:38:36,758 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_predef_predefined_segmented.png
2025-10-25 01:38:36,759 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_predef
2025-10-25 01:38:36,759 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:38:36,922 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=2
2025-10-25 01:38:37,419 - src.models.segmentation.segmentation - INFO - process:693 - Method som_predef completed in 0.66s with 2 clusters.
2025-10-25 01:38:37,420 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_predef_predefined_segmented.png
2025-10-25 01:38:37,421 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:38:37,421 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:38:37,561 - src.models.segmentation.segmentation - INFO - segment:431 - Using predefined DBSCAN params: eps=10.0, min_samples=5
2025-10-25 01:38:39,689 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10.0, min=5) found 5 clusters.
2025-10-25 01:38:39,709 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 2.29s with 5 clusters.
2025-10-25 01:38:39,710 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_predefined_segmented.png
2025-10-25 01:38:39,710 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='predefined'.
2025-10-25 01:38:39,712 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: predefined in 3.17 seconds
2025-10-25 01:38:39,713 - root - INFO - timer:154 - Completed: Processing test image block2 in 81.25 seconds
2025-10-25 01:38:39,714 - root - INFO - timer:148 - Starting: Processing test image block3
2025-10-25 01:38:39,715 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3477, 3477, 3)
2025-10-25 01:38:39,739 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3477x3477 to 511x511
2025-10-25 01:38:41,170 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:38:41,518 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 358 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:38:41,941 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:38:41,943 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:38:41,943 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:38:41,944 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-25 01:38:41,945 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: determined
2025-10-25 01:38:41,951 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: determined
2025-10-25 01:38:41,954 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: determined
2025-10-25 01:38:41,958 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 01:38:41,959 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 01:38:41,959 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:38:41,960 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_opt
2025-10-25 01:38:41,960 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:38:42,129 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:38:42,129 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:38:42,132 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:38:44,108 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.967, CH=1734522.9
2025-10-25 01:38:44,108 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:38:46,103 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.936, CH=1221756.6
2025-10-25 01:38:46,104 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:38:48,003 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.866, CH=1598228.5
2025-10-25 01:38:48,003 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:38:49,939 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.861, CH=1973955.9
2025-10-25 01:38:49,939 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:38:51,766 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.911, CH=2646201.0
2025-10-25 01:38:51,766 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:38:53,600 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.921, CH=3987693.2
2025-10-25 01:38:53,600 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:38:55,410 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.953, CH=4347355.5
2025-10-25 01:38:55,410 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.936)
2025-10-25 01:38:55,469 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_opt completed in 13.51s with 8 clusters.
2025-10-25 01:38:55,470 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_opt_determined_segmented.png
2025-10-25 01:38:55,470 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_opt
2025-10-25 01:38:55,470 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:38:55,630 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:38:55,630 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:38:55,632 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:38:57,619 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.967, CH=1759605.2
2025-10-25 01:38:57,620 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:38:59,476 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.783, CH=1232342.8
2025-10-25 01:38:59,476 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:39:01,359 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.771, CH=1331362.4
2025-10-25 01:39:01,359 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:39:03,333 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.899, CH=1635093.2
2025-10-25 01:39:03,333 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:39:05,198 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.911, CH=2593926.8
2025-10-25 01:39:05,199 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:39:07,000 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.918, CH=3818299.2
2025-10-25 01:39:07,000 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:39:08,849 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.922, CH=5719173.5
2025-10-25 01:39:08,849 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.887)
2025-10-25 01:39:08,849 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=8
2025-10-25 01:39:09,289 - src.models.segmentation.segmentation - INFO - process:693 - Method som_opt completed in 13.82s with 8 clusters.
2025-10-25 01:39:09,290 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_opt_determined_segmented.png
2025-10-25 01:39:09,291 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:39:09,291 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:39:09,408 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:387 - Finding optimal DBSCAN parameters...
2025-10-25 01:39:10,476 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=5) found 7 clusters.
2025-10-25 01:39:15,835 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=5) -> clusters=7, silhouette: 0.848
2025-10-25 01:39:16,856 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=10) found 7 clusters.
2025-10-25 01:39:22,198 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=10) -> clusters=7, silhouette: 0.835
2025-10-25 01:39:23,212 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=20) found 3 clusters.
2025-10-25 01:39:28,719 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=20) -> clusters=3, silhouette: 0.907
2025-10-25 01:39:30,442 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=5) found 1 clusters.
2025-10-25 01:39:30,442 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=15, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:39:32,155 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=10) found 1 clusters.
2025-10-25 01:39:32,155 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=15, min=10) -> found <= 1 cluster. Skipping score.
2025-10-25 01:39:33,773 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=20) found 2 clusters.
2025-10-25 01:39:39,199 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=20) -> clusters=2, silhouette: 0.933
2025-10-25 01:39:41,107 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=5) found 1 clusters.
2025-10-25 01:39:41,108 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:39:43,068 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=10) found 1 clusters.
2025-10-25 01:39:43,069 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=10) -> found <= 1 cluster. Skipping score.
2025-10-25 01:39:44,725 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=20) found 3 clusters.
2025-10-25 01:39:50,061 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=20, min=20) -> clusters=3, silhouette: 0.924
2025-10-25 01:39:50,061 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:412 - Optimal DBSCAN parameters found: eps=15, min_samples=20
2025-10-25 01:39:51,615 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=20) found 2 clusters.
2025-10-25 01:39:51,644 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 42.35s with 2 clusters.
2025-10-25 01:39:51,645 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_determined_segmented.png
2025-10-25 01:39:51,646 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='determined'.
2025-10-25 01:39:51,648 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: determined in 69.70 seconds
2025-10-25 01:39:51,648 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: predefined
2025-10-25 01:39:51,652 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:39:51,656 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:39:51,659 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 01:39:51,660 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 01:39:51,660 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:39:51,660 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_predef
2025-10-25 01:39:51,661 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:39:51,804 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_predef completed in 0.14s with 2 clusters.
2025-10-25 01:39:51,806 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_predef_predefined_segmented.png
2025-10-25 01:39:51,807 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_predef
2025-10-25 01:39:51,807 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:39:51,957 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=2
2025-10-25 01:39:52,448 - src.models.segmentation.segmentation - INFO - process:693 - Method som_predef completed in 0.64s with 2 clusters.
2025-10-25 01:39:52,449 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_predef_predefined_segmented.png
2025-10-25 01:39:52,449 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:39:52,450 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:39:52,581 - src.models.segmentation.segmentation - INFO - segment:431 - Using predefined DBSCAN params: eps=10.0, min_samples=5
2025-10-25 01:39:53,707 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10.0, min=5) found 7 clusters.
2025-10-25 01:39:53,741 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 1.29s with 7 clusters.
2025-10-25 01:39:53,743 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_predefined_segmented.png
2025-10-25 01:39:53,743 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='predefined'.
2025-10-25 01:39:53,746 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: predefined in 2.10 seconds
2025-10-25 01:39:53,746 - root - INFO - timer:154 - Completed: Processing test image block3 in 74.03 seconds
2025-10-25 01:39:53,747 - root - INFO - timer:148 - Starting: Processing test image block4
2025-10-25 01:39:53,748 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3622, 3622, 3)
2025-10-25 01:39:53,777 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3622x3622 to 512x512
2025-10-25 01:39:55,206 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:39:55,559 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 258 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:39:55,993 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:39:55,994 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:39:55,994 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:39:55,996 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-25 01:39:55,997 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: determined
2025-10-25 01:39:56,001 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: determined
2025-10-25 01:39:56,004 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: determined
2025-10-25 01:39:56,008 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 01:39:56,009 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 01:39:56,009 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:39:56,009 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_opt
2025-10-25 01:39:56,010 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:39:56,167 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:39:56,168 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:39:56,169 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:39:58,075 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.979, CH=2733576.2
2025-10-25 01:39:58,076 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:40:00,051 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.964, CH=2867804.8
2025-10-25 01:40:00,051 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:40:01,930 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.962, CH=3008202.2
2025-10-25 01:40:01,930 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:40:03,848 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.958, CH=3389032.2
2025-10-25 01:40:03,849 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:40:05,707 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.883, CH=5842935.5
2025-10-25 01:40:05,707 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:40:07,543 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.883, CH=5934344.5
2025-10-25 01:40:07,543 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:40:09,406 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.962, CH=7815538.0
2025-10-25 01:40:09,406 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.910)
2025-10-25 01:40:09,464 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_opt completed in 13.45s with 8 clusters.
2025-10-25 01:40:09,465 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_opt_determined_segmented.png
2025-10-25 01:40:09,465 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_opt
2025-10-25 01:40:09,465 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:40:09,652 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:40:09,652 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:40:09,654 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:40:11,615 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.978, CH=2402399.5
2025-10-25 01:40:11,616 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:40:13,500 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.963, CH=2590283.0
2025-10-25 01:40:13,500 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:40:15,396 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.875, CH=2188293.2
2025-10-25 01:40:15,396 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:40:17,262 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.873, CH=2855170.8
2025-10-25 01:40:17,262 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:40:19,152 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.884, CH=4519526.5
2025-10-25 01:40:19,152 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:40:21,010 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.956, CH=4704041.0
2025-10-25 01:40:21,011 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:40:22,838 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.961, CH=6812387.0
2025-10-25 01:40:22,838 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.919)
2025-10-25 01:40:22,838 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=8
2025-10-25 01:40:23,280 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 3 (k=8). Skipping avg color.
2025-10-25 01:40:23,280 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 4 (k=8). Skipping avg color.
2025-10-25 01:40:23,280 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 5 (k=8). Skipping avg color.
2025-10-25 01:40:23,280 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 7 (k=8). Skipping avg color.
2025-10-25 01:40:23,281 - src.models.segmentation.segmentation - INFO - process:693 - Method som_opt completed in 13.82s with 8 clusters.
2025-10-25 01:40:23,282 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_opt_determined_segmented.png
2025-10-25 01:40:23,282 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:40:23,282 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:40:23,400 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:387 - Finding optimal DBSCAN parameters...
2025-10-25 01:40:25,237 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=5) found 4 clusters.
2025-10-25 01:40:30,887 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=5) -> clusters=4, silhouette: 0.950
2025-10-25 01:40:32,613 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=10) found 7 clusters.
2025-10-25 01:40:38,213 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=10) -> clusters=7, silhouette: 0.922
2025-10-25 01:40:39,936 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=20) found 4 clusters.
2025-10-25 01:40:45,675 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=20) -> clusters=4, silhouette: 0.919
2025-10-25 01:40:47,813 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=5) found 1 clusters.
2025-10-25 01:40:47,813 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=15, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:40:49,910 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=10) found 1 clusters.
2025-10-25 01:40:49,910 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=15, min=10) -> found <= 1 cluster. Skipping score.
2025-10-25 01:40:51,633 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=20) found 4 clusters.
2025-10-25 01:40:57,291 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=20) -> clusters=4, silhouette: 0.945
2025-10-25 01:40:59,402 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=5) found 1 clusters.
2025-10-25 01:40:59,402 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:41:01,586 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=10) found 1 clusters.
2025-10-25 01:41:01,586 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=10) -> found <= 1 cluster. Skipping score.
2025-10-25 01:41:03,309 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=20) found 2 clusters.
2025-10-25 01:41:08,928 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=20, min=20) -> clusters=2, silhouette: 0.978
2025-10-25 01:41:08,928 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:412 - Optimal DBSCAN parameters found: eps=20, min_samples=20
2025-10-25 01:41:10,674 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=20) found 2 clusters.
2025-10-25 01:41:10,695 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 47.41s with 2 clusters.
2025-10-25 01:41:10,696 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_determined_segmented.png
2025-10-25 01:41:10,696 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='determined'.
2025-10-25 01:41:10,698 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: determined in 74.70 seconds
2025-10-25 01:41:10,698 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: predefined
2025-10-25 01:41:10,702 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:41:10,706 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:41:10,710 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 01:41:10,711 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 01:41:10,711 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:41:10,712 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_predef
2025-10-25 01:41:10,712 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:41:10,861 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_predef completed in 0.15s with 2 clusters.
2025-10-25 01:41:10,863 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_predef_predefined_segmented.png
2025-10-25 01:41:10,863 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_predef
2025-10-25 01:41:10,863 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:41:11,016 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=2
2025-10-25 01:41:11,508 - src.models.segmentation.segmentation - INFO - process:693 - Method som_predef completed in 0.64s with 2 clusters.
2025-10-25 01:41:11,509 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_predef_predefined_segmented.png
2025-10-25 01:41:11,510 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:41:11,510 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:41:11,627 - src.models.segmentation.segmentation - INFO - segment:431 - Using predefined DBSCAN params: eps=10.0, min_samples=5
2025-10-25 01:41:13,467 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10.0, min=5) found 4 clusters.
2025-10-25 01:41:13,489 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 1.98s with 4 clusters.
2025-10-25 01:41:13,491 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_predefined_segmented.png
2025-10-25 01:41:13,492 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='predefined'.
2025-10-25 01:41:13,494 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: predefined in 2.80 seconds
2025-10-25 01:41:13,494 - root - INFO - timer:154 - Completed: Processing test image block4 in 79.75 seconds
2025-10-25 01:41:13,495 - root - INFO - timer:148 - Starting: Processing test image block5
2025-10-25 01:41:13,496 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3504, 3504, 3)
2025-10-25 01:41:13,521 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3504x3504 to 512x512
2025-10-25 01:41:14,921 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:41:15,251 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 307 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:41:15,682 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:41:15,683 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:41:15,683 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:41:15,684 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-25 01:41:15,685 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: determined
2025-10-25 01:41:15,688 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: determined
2025-10-25 01:41:15,691 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: determined
2025-10-25 01:41:15,694 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 01:41:15,695 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 01:41:15,695 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:41:15,695 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_opt
2025-10-25 01:41:15,696 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:41:15,859 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:41:15,859 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:41:15,861 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:41:17,764 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.977, CH=2360287.5
2025-10-25 01:41:17,764 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:41:19,747 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.960, CH=2414459.0
2025-10-25 01:41:19,748 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:41:21,662 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.940, CH=2177716.0
2025-10-25 01:41:21,662 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:41:23,542 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.817, CH=2262844.8
2025-10-25 01:41:23,542 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:41:25,391 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.744, CH=2696729.0
2025-10-25 01:41:25,391 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:41:27,275 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.824, CH=3297797.8
2025-10-25 01:41:27,275 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:41:29,128 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.910, CH=3245267.8
2025-10-25 01:41:29,129 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.832)
2025-10-25 01:41:29,191 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_opt completed in 13.49s with 8 clusters.
2025-10-25 01:41:29,192 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_opt_determined_segmented.png
2025-10-25 01:41:29,192 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_opt
2025-10-25 01:41:29,192 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:41:29,345 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:41:29,346 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:41:29,348 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:41:31,289 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.977, CH=2421986.8
2025-10-25 01:41:31,290 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:41:33,184 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.960, CH=2442854.5
2025-10-25 01:41:33,185 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:41:35,098 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.940, CH=2154942.5
2025-10-25 01:41:35,098 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:41:37,043 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.895, CH=2237759.5
2025-10-25 01:41:37,043 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:41:38,897 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.773, CH=2923104.8
2025-10-25 01:41:38,897 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:41:40,715 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.855, CH=3053498.0
2025-10-25 01:41:40,715 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:41:42,525 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.908, CH=4076317.8
2025-10-25 01:41:42,525 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.831)
2025-10-25 01:41:42,526 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=8
2025-10-25 01:41:42,967 - src.models.segmentation.segmentation - INFO - process:693 - Method som_opt completed in 13.78s with 8 clusters.
2025-10-25 01:41:42,969 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_opt_determined_segmented.png
2025-10-25 01:41:42,969 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:41:42,969 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:41:43,100 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:387 - Finding optimal DBSCAN parameters...
2025-10-25 01:41:44,880 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=5) found 7 clusters.
2025-10-25 01:41:50,590 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=5) -> clusters=7, silhouette: 0.919
2025-10-25 01:41:52,253 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=10) found 6 clusters.
2025-10-25 01:41:57,745 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=10) -> clusters=6, silhouette: 0.919
2025-10-25 01:41:59,371 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=20) found 3 clusters.
2025-10-25 01:42:04,853 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=20) -> clusters=3, silhouette: 0.953
2025-10-25 01:42:06,735 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=5) found 2 clusters.
2025-10-25 01:42:12,203 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=5) -> clusters=2, silhouette: 0.976
2025-10-25 01:42:14,091 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=10) found 2 clusters.
2025-10-25 01:42:19,623 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=10) -> clusters=2, silhouette: 0.976
2025-10-25 01:42:21,426 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=20) found 4 clusters.
2025-10-25 01:42:26,830 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=20) -> clusters=4, silhouette: 0.948
2025-10-25 01:42:28,696 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=5) found 1 clusters.
2025-10-25 01:42:28,696 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:42:30,550 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=10) found 1 clusters.
2025-10-25 01:42:30,550 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=10) -> found <= 1 cluster. Skipping score.
2025-10-25 01:42:32,403 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=20) found 3 clusters.
2025-10-25 01:42:37,815 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=20, min=20) -> clusters=3, silhouette: 0.950
2025-10-25 01:42:37,815 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:412 - Optimal DBSCAN parameters found: eps=15, min_samples=5
2025-10-25 01:42:39,606 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=5) found 2 clusters.
2025-10-25 01:42:39,624 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 56.65s with 2 clusters.
2025-10-25 01:42:39,626 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_determined_segmented.png
2025-10-25 01:42:39,626 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='determined'.
2025-10-25 01:42:39,628 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: determined in 83.94 seconds
2025-10-25 01:42:39,628 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: predefined
2025-10-25 01:42:39,632 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:42:39,636 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:42:39,640 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 01:42:39,640 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 01:42:39,641 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:42:39,641 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_predef
2025-10-25 01:42:39,641 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:42:39,784 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_predef completed in 0.14s with 2 clusters.
2025-10-25 01:42:39,785 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_predef_predefined_segmented.png
2025-10-25 01:42:39,786 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_predef
2025-10-25 01:42:39,786 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:42:39,948 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=2
2025-10-25 01:42:40,427 - src.models.segmentation.segmentation - INFO - process:693 - Method som_predef completed in 0.64s with 2 clusters.
2025-10-25 01:42:40,428 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_predef_predefined_segmented.png
2025-10-25 01:42:40,428 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:42:40,428 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:42:40,542 - src.models.segmentation.segmentation - INFO - segment:431 - Using predefined DBSCAN params: eps=10.0, min_samples=5
2025-10-25 01:42:42,248 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10.0, min=5) found 7 clusters.
2025-10-25 01:42:42,266 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 1.84s with 7 clusters.
2025-10-25 01:42:42,267 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_predefined_segmented.png
2025-10-25 01:42:42,268 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='predefined'.
2025-10-25 01:42:42,270 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: predefined in 2.64 seconds
2025-10-25 01:42:42,270 - root - INFO - timer:154 - Completed: Processing test image block5 in 88.77 seconds
2025-10-25 01:42:42,271 - root - INFO - main:691 - ================================================================================
PROCESSING COMPLETED IN 593.85 SECONDS
================================================================================
2025-10-25 01:42:42,319 - root - INFO - main:699 - Profiling results saved to: C:\Users\LENOVO\Desktop\prints\output\profile_stats.txt
2025-10-25 01:46:57,571 - root - INFO - setup_logging:135 - Logging setup complete. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-25 01:46:57,572 - root - INFO - timer:148 - Starting: Configuration loading and validation
2025-10-25 01:46:57,584 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from c:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-25 01:46:57,587 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-25 01:46:57,587 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-25 01:46:57,588 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-25 01:46:57,591 - root - INFO - validate_processing_config:232 - Processing configuration validation passed
2025-10-25 01:46:57,592 - root - INFO - timer:154 - Completed: Configuration loading and validation in 0.02 seconds
2025-10-25 01:46:57,595 - src.utils.output_manager - INFO - __init__:28 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-25 01:46:57,595 - root - INFO - main:648 - Processing dataset: block
2025-10-25 01:46:57,596 - root - INFO - timer:148 - Starting: Loading all test images
2025-10-25 01:46:58,259 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-25 01:46:59,094 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-25 01:46:59,554 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-25 01:47:00,080 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-25 01:47:00,606 - src.utils.output_manager - INFO - save_test_image:77 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-25 01:47:00,606 - root - INFO - timer:154 - Completed: Loading all test images in 3.01 seconds
2025-10-25 01:47:00,606 - root - INFO - timer:148 - Starting: Loading training data
2025-10-25 01:47:00,607 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-25 01:47:02,635 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-25 01:47:02,635 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-25 01:47:02,639 - root - INFO - validate_loaded_data:267 - Data validation passed: 50000 total pixels available from 5 images.
2025-10-25 01:47:02,639 - root - INFO - timer:154 - Completed: Loading training data in 2.03 seconds
2025-10-25 01:47:02,640 - root - INFO - timer:148 - Starting: DBN initialization and training
2025-10-25 01:47:02,640 - src.models.dbn_trainer - INFO - __init__:48 - DBNTrainer initialized.
2025-10-25 01:47:02,640 - src.models.dbn_trainer - INFO - train:64 - Starting DBN training and PSO optimization process...
2025-10-25 01:47:02,640 - src.data.preprocess - INFO - efficient_data_sampling:207 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-25 01:47:02,643 - src.data.preprocess - INFO - efficient_data_sampling:282 - Sampling completed: 800 samples extracted.
2025-10-25 01:47:02,644 - src.data.preprocess - INFO - efficient_data_sampling:283 - RGB range: [32.00, 214.00]
2025-10-25 01:47:02,644 - src.data.preprocess - INFO - efficient_data_sampling:284 - LAB ranges: L[12.16, 84.31], a[-2.00, 3.00], b[-1.00, 8.00]
2025-10-25 01:47:02,646 - src.models.dbn_trainer - INFO - train:77 - Training set: (640, 3), Test set: (160, 3)
2025-10-25 01:47:02,647 - src.models.dbn_trainer - INFO - _prepare_scalers:109 - Preparing and fitting scalers...
2025-10-25 01:47:02,651 - src.models.dbn_trainer - INFO - _prepare_scalers:128 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-25 01:47:02,651 - src.models.dbn_trainer - INFO - _prepare_scalers:129 - X range: [0.000, 1.000]
2025-10-25 01:47:02,652 - src.models.dbn_trainer - INFO - _prepare_scalers:130 - Y range: [0.000, 1.000]
2025-10-25 01:47:02,652 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-25 01:47:02,959 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-25 01:47:03,017 - src.models.dbn_trainer - INFO - train:88 - Initial model has 20 weight layers
2025-10-25 01:47:03,018 - src.models.dbn_trainer - INFO - train:90 - Layer 0: shape (3, 100), range [-0.240, 0.238]
2025-10-25 01:47:03,018 - src.models.dbn_trainer - INFO - train:90 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-25 01:47:03,018 - src.models.dbn_trainer - INFO - train:90 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-25 01:47:03,018 - src.models.dbn_trainer - INFO - train:90 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-25 01:47:03,018 - src.models.dbn_trainer - INFO - train:90 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-25 01:47:03,018 - src.models.dbn_trainer - INFO - train:90 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-25 01:47:03,019 - src.models.dbn_trainer - INFO - train:90 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-25 01:47:03,019 - src.models.dbn_trainer - INFO - train:90 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-25 01:47:03,019 - src.models.dbn_trainer - INFO - train:90 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-25 01:47:03,019 - src.models.dbn_trainer - INFO - train:90 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-25 01:47:03,019 - src.models.dbn_trainer - INFO - train:90 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-25 01:47:03,019 - src.models.dbn_trainer - INFO - train:90 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-25 01:47:03,019 - src.models.dbn_trainer - INFO - train:90 - Layer 12: shape (50, 25), range [-0.282, 0.283]
2025-10-25 01:47:03,019 - src.models.dbn_trainer - INFO - train:90 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-25 01:47:03,020 - src.models.dbn_trainer - INFO - train:90 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-25 01:47:03,020 - src.models.dbn_trainer - INFO - train:90 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-25 01:47:03,020 - src.models.dbn_trainer - INFO - train:90 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-25 01:47:03,020 - src.models.dbn_trainer - INFO - train:90 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-25 01:47:03,020 - src.models.dbn_trainer - INFO - train:90 - Layer 18: shape (25, 3), range [-0.462, 0.454]
2025-10-25 01:47:03,020 - src.models.dbn_trainer - INFO - train:90 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-25 01:47:03,020 - src.models.dbn_trainer - INFO - _run_pso_with_retries:139 - PSO optimization attempt 1/3
2025-10-25 01:47:03,020 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-25 01:49:43,489 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 160.46s - Final fitness: 0.050187
2025-10-25 01:49:43,490 - src.models.dbn_trainer - INFO - _run_pso_with_retries:154 - PSO optimization completed successfully
2025-10-25 01:49:43,499 - src.models.dbn_trainer - INFO - train:96 - DBN training and PSO optimization complete.
2025-10-25 01:49:43,499 - root - INFO - timer:154 - Completed: DBN initialization and training in 160.86 seconds
2025-10-25 01:49:43,500 - root - INFO - timer:148 - Starting: Reference image loading and processing
2025-10-25 01:49:43,500 - root - INFO - process_reference_image:259 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-25 01:49:43,890 - root - INFO - process_reference_image:274 - Starting preprocessing for reference image
2025-10-25 01:49:43,890 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 01:49:43,923 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 01:49:45,195 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:49:45,513 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:49:46,235 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:49:46,237 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:49:46,237 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:49:46,237 - root - INFO - process_reference_image:278 - Preprocessing completed, shape: (128, 128, 3)
2025-10-25 01:49:46,237 - root - INFO - process_reference_image:286 - Determining optimal number of clusters for reference
2025-10-25 01:49:46,248 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 105. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:49:46,248 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:49:48,137 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.969, CH=1910956.0
2025-10-25 01:49:48,137 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:49:50,050 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.908, CH=1151577.5
2025-10-25 01:49:50,050 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:49:51,966 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.915, CH=1295546.6
2025-10-25 01:49:51,966 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:49:53,775 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.769, CH=2148690.8
2025-10-25 01:49:53,775 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:49:55,615 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.740, CH=2009514.5
2025-10-25 01:49:55,615 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:49:57,378 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.896, CH=2195705.2
2025-10-25 01:49:57,378 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:49:59,167 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.906, CH=4006997.8
2025-10-25 01:49:59,168 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.861)
2025-10-25 01:49:59,168 - root - INFO - process_reference_image:299 - Optimal clusters determined: 8
2025-10-25 01:49:59,168 - root - INFO - process_reference_image:305 - Determining DPC clusters
2025-10-25 01:49:59,178 - root - INFO - optimal_clusters_dpc:157 - Number of unique colors: 105. Using dynamic_max_k: 10
2025-10-25 01:49:59,180 - root - INFO - optimal_clusters_dpc:185 - Calculated DPC bandwidth: 110.399
2025-10-25 01:49:59,182 - root - INFO - optimal_clusters_dpc:218 - DPC gamma analysis: mean=372.392, std=1926.063, threshold=2298.456
2025-10-25 01:49:59,182 - root - INFO - optimal_clusters_dpc:229 - Optimal number of clusters estimated by DPC gamma heuristic: 2
2025-10-25 01:49:59,182 - root - INFO - process_reference_image:313 - Performing reference segmentation with k=8
2025-10-25 01:49:59,184 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:49:59,185 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:49:59,376 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:49:59,377 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:49:59,514 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=8
2025-10-25 01:50:00,001 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 2 (k=8). Skipping avg color.
2025-10-25 01:50:00,002 - root - INFO - process_reference_image:346 - Reference image processing finished in 16.50 seconds.
2025-10-25 01:50:00,278 - root - INFO - run_reference_processing:382 - Formatted K-Means reference results.
2025-10-25 01:50:00,394 - root - INFO - run_reference_processing:418 - Formatted SOM reference results.
2025-10-25 01:50:01,627 - src.utils.output_manager - INFO - save_reference_summary:136 - Saved reference summary image to datasets\block\summaries\reference_summary.png
2025-10-25 01:50:01,627 - root - INFO - run_reference_processing:438 - Reference processed - Target LAB colors shape: (8, 3), DPC k: 2
2025-10-25 01:50:01,627 - root - INFO - timer:154 - Completed: Reference image loading and processing in 18.13 seconds
2025-10-25 01:50:01,635 - root - INFO - timer:148 - Starting: Processing test image block1
2025-10-25 01:50:01,635 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3950, 3950, 3)
2025-10-25 01:50:01,661 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3950x3950 to 512x512
2025-10-25 01:50:03,006 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:50:03,381 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 332 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:50:03,804 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:50:03,805 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:50:03,805 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:50:03,806 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-25 01:50:03,824 - root - INFO - process_single_test_image:479 - Preprocessing completed for block1 - unique colors: 145
2025-10-25 01:50:03,824 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: determined
2025-10-25 01:50:03,828 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: determined
2025-10-25 01:50:03,832 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: determined
2025-10-25 01:50:03,835 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 01:50:03,836 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 01:50:03,836 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:50:03,837 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_opt
2025-10-25 01:50:03,838 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:50:04,023 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 49. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:50:04,024 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:50:04,025 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:50:05,908 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.985, CH=2975847.8
2025-10-25 01:50:05,908 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:50:07,762 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.976, CH=3738018.0
2025-10-25 01:50:07,762 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:50:09,674 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.965, CH=4099452.8
2025-10-25 01:50:09,674 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:50:11,515 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.862, CH=3830808.8
2025-10-25 01:50:11,515 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:50:13,383 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.862, CH=4407350.5
2025-10-25 01:50:13,383 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:50:15,224 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.937, CH=5320823.5
2025-10-25 01:50:15,224 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:50:17,065 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.879, CH=5986026.0
2025-10-25 01:50:17,065 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 7 (based on score: 0.695)
2025-10-25 01:50:17,117 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_opt completed in 13.28s with 7 clusters.
2025-10-25 01:50:17,118 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_opt_determined_segmented.png
2025-10-25 01:50:17,118 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_opt
2025-10-25 01:50:17,118 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:50:17,264 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 49. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:50:17,264 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:50:17,266 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:50:19,245 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.985, CH=2575482.8
2025-10-25 01:50:19,245 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:50:21,151 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.975, CH=3834045.8
2025-10-25 01:50:21,151 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:50:23,036 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.966, CH=3784921.8
2025-10-25 01:50:23,036 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:50:24,897 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.877, CH=3616866.0
2025-10-25 01:50:24,897 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:50:26,717 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.876, CH=4172031.5
2025-10-25 01:50:26,717 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:50:28,557 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.887, CH=5021079.0
2025-10-25 01:50:28,557 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:50:30,386 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.894, CH=6041660.0
2025-10-25 01:50:30,386 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 3 (based on score: 0.638)
2025-10-25 01:50:30,387 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=3
2025-10-25 01:50:30,826 - src.models.segmentation.segmentation - INFO - process:693 - Method som_opt completed in 13.71s with 3 clusters.
2025-10-25 01:50:30,827 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_opt_determined_segmented.png
2025-10-25 01:50:30,827 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:50:30,827 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:50:30,942 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:387 - Finding optimal DBSCAN parameters...
2025-10-25 01:50:32,782 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=5) found 7 clusters.
2025-10-25 01:50:38,373 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=5) -> clusters=7, silhouette: 0.950
2025-10-25 01:50:40,023 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=10) found 7 clusters.
2025-10-25 01:50:45,527 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=10) -> clusters=7, silhouette: 0.952
2025-10-25 01:50:47,188 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=20) found 2 clusters.
2025-10-25 01:50:52,740 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=20) -> clusters=2, silhouette: 0.975
2025-10-25 01:50:54,474 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=5) found 1 clusters.
2025-10-25 01:50:54,474 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=15, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:50:56,417 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=10) found 2 clusters.
2025-10-25 01:51:02,255 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=10) -> clusters=2, silhouette: 0.984
2025-10-25 01:51:03,979 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=20) found 4 clusters.
2025-10-25 01:51:09,527 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=20) -> clusters=4, silhouette: 0.967
2025-10-25 01:51:11,634 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=5) found 1 clusters.
2025-10-25 01:51:11,634 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:51:13,745 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=10) found 1 clusters.
2025-10-25 01:51:13,745 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=10) -> found <= 1 cluster. Skipping score.
2025-10-25 01:51:15,538 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=20) found 3 clusters.
2025-10-25 01:51:21,019 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=20, min=20) -> clusters=3, silhouette: 0.969
2025-10-25 01:51:21,020 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:412 - Optimal DBSCAN parameters found: eps=15, min_samples=10
2025-10-25 01:51:22,714 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=10) found 2 clusters.
2025-10-25 01:51:22,730 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 51.90s with 2 clusters.
2025-10-25 01:51:22,731 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_determined_segmented.png
2025-10-25 01:51:22,731 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='determined'.
2025-10-25 01:51:22,855 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for kmeans_opt on block1: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:51:22,974 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for som_opt on block1: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:51:23,095 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for dbscan on block1: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:51:23,096 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: determined in 79.27 seconds
2025-10-25 01:51:23,096 - root - INFO - timer:148 - Starting: Segmentation (block1) with k_type: predefined
2025-10-25 01:51:23,100 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:51:23,103 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:51:23,106 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 01:51:23,107 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 01:51:23,107 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:51:23,107 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_predef
2025-10-25 01:51:23,108 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:51:23,239 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_predef completed in 0.13s with 2 clusters.
2025-10-25 01:51:23,240 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_predef_predefined_segmented.png
2025-10-25 01:51:23,241 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_predef
2025-10-25 01:51:23,241 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:51:23,397 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=2
2025-10-25 01:51:23,874 - src.models.segmentation.segmentation - INFO - process:693 - Method som_predef completed in 0.63s with 2 clusters.
2025-10-25 01:51:23,875 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_predef_predefined_segmented.png
2025-10-25 01:51:23,876 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:51:23,876 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:51:23,997 - src.models.segmentation.segmentation - INFO - segment:431 - Using predefined DBSCAN params: eps=10.0, min_samples=5
2025-10-25 01:51:25,762 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10.0, min=5) found 7 clusters.
2025-10-25 01:51:25,784 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 1.91s with 7 clusters.
2025-10-25 01:51:25,785 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_predefined_segmented.png
2025-10-25 01:51:25,785 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='predefined'.
2025-10-25 01:51:25,908 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for kmeans_predef on block1: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:51:26,050 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for som_predef on block1: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:51:26,182 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for dbscan on block1: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:51:26,183 - root - INFO - timer:154 - Completed: Segmentation (block1) with k_type: predefined in 3.09 seconds
2025-10-25 01:51:26,184 - root - INFO - timer:154 - Completed: Processing test image block1 in 84.55 seconds
2025-10-25 01:51:26,184 - root - INFO - timer:148 - Starting: Processing test image block2
2025-10-25 01:51:26,184 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 01:51:26,220 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 01:51:27,559 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:51:27,890 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 316 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:51:28,330 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:51:28,331 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:51:28,331 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:51:28,333 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-25 01:51:28,348 - root - INFO - process_single_test_image:479 - Preprocessing completed for block2 - unique colors: 117
2025-10-25 01:51:28,349 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: determined
2025-10-25 01:51:28,353 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: determined
2025-10-25 01:51:28,356 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: determined
2025-10-25 01:51:28,360 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 01:51:28,360 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 01:51:28,361 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:51:28,361 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_opt
2025-10-25 01:51:28,362 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:51:28,503 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 49. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:51:28,504 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:51:28,506 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:51:30,403 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.980, CH=2787217.8
2025-10-25 01:51:30,403 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:51:32,372 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.965, CH=2842453.0
2025-10-25 01:51:32,373 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:51:34,218 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.827, CH=2256263.2
2025-10-25 01:51:34,218 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:51:36,052 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.842, CH=2469155.5
2025-10-25 01:51:36,053 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:51:37,879 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.751, CH=2818019.2
2025-10-25 01:51:37,879 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:51:39,667 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.825, CH=2852949.2
2025-10-25 01:51:39,667 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:51:41,477 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.854, CH=4413489.5
2025-10-25 01:51:41,478 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.725)
2025-10-25 01:51:41,534 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_opt completed in 13.17s with 8 clusters.
2025-10-25 01:51:41,535 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_opt_determined_segmented.png
2025-10-25 01:51:41,536 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_opt
2025-10-25 01:51:41,536 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:51:41,691 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 49. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:51:41,692 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:51:41,694 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:51:43,612 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.980, CH=2653870.8
2025-10-25 01:51:43,613 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:51:45,520 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.964, CH=2584989.2
2025-10-25 01:51:45,521 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:51:47,402 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.883, CH=2171635.5
2025-10-25 01:51:47,402 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:51:49,362 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.879, CH=2724309.5
2025-10-25 01:51:49,363 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:51:51,329 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.871, CH=2685012.0
2025-10-25 01:51:51,329 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:51:53,139 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.779, CH=3453514.0
2025-10-25 01:51:53,140 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:51:54,973 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.845, CH=4594942.0
2025-10-25 01:51:54,973 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.664)
2025-10-25 01:51:54,973 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=8
2025-10-25 01:51:55,412 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 2 (k=8). Skipping avg color.
2025-10-25 01:51:55,412 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 3 (k=8). Skipping avg color.
2025-10-25 01:51:55,413 - src.models.segmentation.segmentation - INFO - process:693 - Method som_opt completed in 13.88s with 8 clusters.
2025-10-25 01:51:55,414 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_opt_determined_segmented.png
2025-10-25 01:51:55,414 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:51:55,414 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:51:55,533 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:387 - Finding optimal DBSCAN parameters...
2025-10-25 01:51:57,509 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=5) found 8 clusters.
2025-10-25 01:52:03,287 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=5) -> clusters=8, silhouette: 0.922
2025-10-25 01:52:05,050 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=10) found 8 clusters.
2025-10-25 01:52:10,591 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=10) -> clusters=8, silhouette: 0.919
2025-10-25 01:52:12,335 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=20) found 3 clusters.
2025-10-25 01:52:17,848 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=20) -> clusters=3, silhouette: 0.938
2025-10-25 01:52:19,699 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=5) found 3 clusters.
2025-10-25 01:52:25,233 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=5) -> clusters=3, silhouette: 0.955
2025-10-25 01:52:27,071 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=10) found 4 clusters.
2025-10-25 01:52:32,620 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=10) -> clusters=4, silhouette: 0.950
2025-10-25 01:52:34,506 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=20) found 4 clusters.
2025-10-25 01:52:39,961 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=20) -> clusters=4, silhouette: 0.944
2025-10-25 01:52:42,026 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=5) found 1 clusters.
2025-10-25 01:52:42,026 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:52:44,094 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=10) found 1 clusters.
2025-10-25 01:52:44,094 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=10) -> found <= 1 cluster. Skipping score.
2025-10-25 01:52:45,979 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=20) found 3 clusters.
2025-10-25 01:52:51,521 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=20, min=20) -> clusters=3, silhouette: 0.961
2025-10-25 01:52:51,521 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:412 - Optimal DBSCAN parameters found: eps=20, min_samples=20
2025-10-25 01:52:53,410 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=20) found 3 clusters.
2025-10-25 01:52:53,427 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 58.01s with 3 clusters.
2025-10-25 01:52:53,428 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_determined_segmented.png
2025-10-25 01:52:53,428 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='determined'.
2025-10-25 01:52:53,565 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for kmeans_opt on block2: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:52:53,693 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for som_opt on block2: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:52:53,813 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for dbscan on block2: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:52:53,813 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: determined in 85.46 seconds
2025-10-25 01:52:53,814 - root - INFO - timer:148 - Starting: Segmentation (block2) with k_type: predefined
2025-10-25 01:52:53,817 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:52:53,819 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:52:53,823 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 01:52:53,823 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 01:52:53,824 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:52:53,824 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_predef
2025-10-25 01:52:53,825 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:52:53,959 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_predef completed in 0.13s with 2 clusters.
2025-10-25 01:52:53,960 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_predef_predefined_segmented.png
2025-10-25 01:52:53,961 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_predef
2025-10-25 01:52:53,961 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:52:54,117 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=2
2025-10-25 01:52:54,585 - src.models.segmentation.segmentation - INFO - process:693 - Method som_predef completed in 0.62s with 2 clusters.
2025-10-25 01:52:54,586 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_predef_predefined_segmented.png
2025-10-25 01:52:54,586 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:52:54,587 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:52:54,725 - src.models.segmentation.segmentation - INFO - segment:431 - Using predefined DBSCAN params: eps=10.0, min_samples=5
2025-10-25 01:52:56,572 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10.0, min=5) found 8 clusters.
2025-10-25 01:52:56,594 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 2.01s with 8 clusters.
2025-10-25 01:52:56,595 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_predefined_segmented.png
2025-10-25 01:52:56,595 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='predefined'.
2025-10-25 01:52:56,733 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for kmeans_predef on block2: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:52:56,862 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for som_predef on block2: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:52:56,998 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for dbscan on block2: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:52:56,999 - root - INFO - timer:154 - Completed: Segmentation (block2) with k_type: predefined in 3.19 seconds
2025-10-25 01:52:57,000 - root - INFO - timer:154 - Completed: Processing test image block2 in 90.82 seconds
2025-10-25 01:52:57,000 - root - INFO - timer:148 - Starting: Processing test image block3
2025-10-25 01:52:57,000 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3477, 3477, 3)
2025-10-25 01:52:57,024 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3477x3477 to 511x511
2025-10-25 01:52:58,305 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:52:58,681 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 358 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:52:59,108 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:52:59,110 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:52:59,110 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:52:59,112 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-25 01:52:59,127 - root - INFO - process_single_test_image:479 - Preprocessing completed for block3 - unique colors: 176
2025-10-25 01:52:59,127 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: determined
2025-10-25 01:52:59,131 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: determined
2025-10-25 01:52:59,134 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: determined
2025-10-25 01:52:59,139 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 01:52:59,139 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 01:52:59,140 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:52:59,140 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_opt
2025-10-25 01:52:59,141 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:52:59,284 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:52:59,284 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:52:59,286 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:53:01,146 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.966, CH=1812764.6
2025-10-25 01:53:01,147 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:53:03,089 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.937, CH=1279425.6
2025-10-25 01:53:03,089 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:53:04,951 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.855, CH=1627324.9
2025-10-25 01:53:04,952 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:53:06,764 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.775, CH=1801422.6
2025-10-25 01:53:06,764 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:53:08,576 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.859, CH=2378266.8
2025-10-25 01:53:08,576 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:53:10,360 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.947, CH=2636276.5
2025-10-25 01:53:10,360 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:53:12,140 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.947, CH=3562398.2
2025-10-25 01:53:12,141 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.949)
2025-10-25 01:53:12,200 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_opt completed in 13.06s with 8 clusters.
2025-10-25 01:53:12,201 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_opt_determined_segmented.png
2025-10-25 01:53:12,202 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_opt
2025-10-25 01:53:12,202 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:53:12,352 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:53:12,352 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:53:12,354 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:53:14,285 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.966, CH=1784440.1
2025-10-25 01:53:14,286 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:53:16,193 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.936, CH=1286109.5
2025-10-25 01:53:16,193 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:53:18,074 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.867, CH=1611139.9
2025-10-25 01:53:18,074 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:53:19,903 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.769, CH=1807488.4
2025-10-25 01:53:19,903 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:53:21,712 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.856, CH=2414599.2
2025-10-25 01:53:21,713 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:53:23,526 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.868, CH=3292204.5
2025-10-25 01:53:23,526 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:53:25,310 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.955, CH=4364177.5
2025-10-25 01:53:25,311 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.971)
2025-10-25 01:53:25,311 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=8
2025-10-25 01:53:25,768 - src.models.segmentation.segmentation - INFO - process:693 - Method som_opt completed in 13.57s with 8 clusters.
2025-10-25 01:53:25,769 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_opt_determined_segmented.png
2025-10-25 01:53:25,770 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:53:25,770 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:53:25,896 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:387 - Finding optimal DBSCAN parameters...
2025-10-25 01:53:27,191 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=5) found 9 clusters.
2025-10-25 01:53:32,660 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=5) -> clusters=9, silhouette: 0.849
2025-10-25 01:53:33,916 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=10) found 6 clusters.
2025-10-25 01:53:39,330 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=10) -> clusters=6, silhouette: 0.849
2025-10-25 01:53:40,559 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=20) found 2 clusters.
2025-10-25 01:53:45,889 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=20) -> clusters=2, silhouette: 0.935
2025-10-25 01:53:47,500 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=5) found 2 clusters.
2025-10-25 01:53:52,807 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=5) -> clusters=2, silhouette: 0.966
2025-10-25 01:53:54,401 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=10) found 3 clusters.
2025-10-25 01:54:00,017 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=10) -> clusters=3, silhouette: 0.933
2025-10-25 01:54:01,793 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=20) found 3 clusters.
2025-10-25 01:54:07,209 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=20) -> clusters=3, silhouette: 0.901
2025-10-25 01:54:09,140 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=5) found 1 clusters.
2025-10-25 01:54:09,141 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:54:11,104 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=10) found 1 clusters.
2025-10-25 01:54:11,104 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=10) -> found <= 1 cluster. Skipping score.
2025-10-25 01:54:12,756 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=20) found 3 clusters.
2025-10-25 01:54:18,206 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=20, min=20) -> clusters=3, silhouette: 0.917
2025-10-25 01:54:18,206 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:412 - Optimal DBSCAN parameters found: eps=15, min_samples=5
2025-10-25 01:54:19,824 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=5) found 2 clusters.
2025-10-25 01:54:19,845 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 54.08s with 2 clusters.
2025-10-25 01:54:19,846 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_determined_segmented.png
2025-10-25 01:54:19,846 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='determined'.
2025-10-25 01:54:19,973 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for kmeans_opt on block3: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:54:20,090 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for som_opt on block3: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:54:20,209 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for dbscan on block3: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:54:20,210 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: determined in 81.08 seconds
2025-10-25 01:54:20,210 - root - INFO - timer:148 - Starting: Segmentation (block3) with k_type: predefined
2025-10-25 01:54:20,214 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:54:20,219 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:54:20,223 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 01:54:20,224 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 01:54:20,224 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:54:20,224 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_predef
2025-10-25 01:54:20,224 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:54:20,363 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_predef completed in 0.14s with 2 clusters.
2025-10-25 01:54:20,365 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_predef_predefined_segmented.png
2025-10-25 01:54:20,366 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_predef
2025-10-25 01:54:20,367 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:54:20,523 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=2
2025-10-25 01:54:21,002 - src.models.segmentation.segmentation - INFO - process:693 - Method som_predef completed in 0.63s with 2 clusters.
2025-10-25 01:54:21,003 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_predef_predefined_segmented.png
2025-10-25 01:54:21,004 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:54:21,004 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:54:21,129 - src.models.segmentation.segmentation - INFO - segment:431 - Using predefined DBSCAN params: eps=10.0, min_samples=5
2025-10-25 01:54:22,437 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10.0, min=5) found 9 clusters.
2025-10-25 01:54:22,465 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 1.46s with 9 clusters.
2025-10-25 01:54:22,466 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_predefined_segmented.png
2025-10-25 01:54:22,467 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='predefined'.
2025-10-25 01:54:22,600 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for kmeans_predef on block3: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:54:22,722 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for som_predef on block3: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:54:22,850 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for dbscan on block3: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:54:22,851 - root - INFO - timer:154 - Completed: Segmentation (block3) with k_type: predefined in 2.64 seconds
2025-10-25 01:54:22,851 - root - INFO - timer:154 - Completed: Processing test image block3 in 85.85 seconds
2025-10-25 01:54:22,852 - root - INFO - timer:148 - Starting: Processing test image block4
2025-10-25 01:54:22,852 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3622, 3622, 3)
2025-10-25 01:54:22,877 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3622x3622 to 512x512
2025-10-25 01:54:24,209 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:54:24,540 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 258 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:54:24,949 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:54:24,950 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:54:24,950 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:54:24,951 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-25 01:54:24,968 - root - INFO - process_single_test_image:479 - Preprocessing completed for block4 - unique colors: 127
2025-10-25 01:54:24,968 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: determined
2025-10-25 01:54:24,972 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: determined
2025-10-25 01:54:24,975 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: determined
2025-10-25 01:54:24,978 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 01:54:24,979 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 01:54:24,979 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:54:24,979 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_opt
2025-10-25 01:54:24,980 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:54:25,137 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 49. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:54:25,138 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:54:25,140 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:54:27,015 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.980, CH=2609842.5
2025-10-25 01:54:27,015 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:54:28,941 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.964, CH=2776688.2
2025-10-25 01:54:28,942 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:54:30,829 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.880, CH=2796789.5
2025-10-25 01:54:30,829 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:54:32,715 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.875, CH=3681434.5
2025-10-25 01:54:32,715 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:54:34,544 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.822, CH=4036019.2
2025-10-25 01:54:34,544 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:54:36,353 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.890, CH=4552280.0
2025-10-25 01:54:36,353 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:54:38,171 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.897, CH=6348755.5
2025-10-25 01:54:38,171 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.738)
2025-10-25 01:54:38,228 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_opt completed in 13.25s with 8 clusters.
2025-10-25 01:54:38,230 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_opt_determined_segmented.png
2025-10-25 01:54:38,230 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_opt
2025-10-25 01:54:38,231 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:54:38,375 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:54:38,375 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:54:38,376 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:54:40,275 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.980, CH=2670407.5
2025-10-25 01:54:40,275 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:54:42,169 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.965, CH=3033574.8
2025-10-25 01:54:42,169 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:54:44,064 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.888, CH=3177146.2
2025-10-25 01:54:44,064 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:54:45,939 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.880, CH=4018561.2
2025-10-25 01:54:45,939 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:54:47,763 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.829, CH=4554299.5
2025-10-25 01:54:47,763 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:54:49,596 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.834, CH=5042254.5
2025-10-25 01:54:49,596 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:54:51,415 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.898, CH=6617922.5
2025-10-25 01:54:51,416 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.729)
2025-10-25 01:54:51,416 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=8
2025-10-25 01:54:51,854 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 5 (k=8). Skipping avg color.
2025-10-25 01:54:51,854 - src.models.segmentation.segmentation - INFO - process:693 - Method som_opt completed in 13.62s with 8 clusters.
2025-10-25 01:54:51,855 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_opt_determined_segmented.png
2025-10-25 01:54:51,856 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:54:51,856 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:54:51,970 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:387 - Finding optimal DBSCAN parameters...
2025-10-25 01:54:53,646 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=5) found 5 clusters.
2025-10-25 01:54:59,295 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=5) -> clusters=5, silhouette: 0.931
2025-10-25 01:55:00,873 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=10) found 5 clusters.
2025-10-25 01:55:06,445 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=10) -> clusters=5, silhouette: 0.934
2025-10-25 01:55:08,009 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=20) found 3 clusters.
2025-10-25 01:55:13,604 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=20) -> clusters=3, silhouette: 0.951
2025-10-25 01:55:15,644 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=5) found 1 clusters.
2025-10-25 01:55:15,644 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=15, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:55:17,696 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=10) found 1 clusters.
2025-10-25 01:55:17,697 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=15, min=10) -> found <= 1 cluster. Skipping score.
2025-10-25 01:55:19,388 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=20) found 5 clusters.
2025-10-25 01:55:24,954 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=20) -> clusters=5, silhouette: 0.946
2025-10-25 01:55:26,990 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=5) found 1 clusters.
2025-10-25 01:55:26,990 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:55:29,054 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=10) found 1 clusters.
2025-10-25 01:55:29,055 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=10) -> found <= 1 cluster. Skipping score.
2025-10-25 01:55:31,134 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=20) found 1 clusters.
2025-10-25 01:55:31,135 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=20) -> found <= 1 cluster. Skipping score.
2025-10-25 01:55:31,135 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:412 - Optimal DBSCAN parameters found: eps=10, min_samples=20
2025-10-25 01:55:32,766 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=20) found 3 clusters.
2025-10-25 01:55:32,781 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 40.92s with 3 clusters.
2025-10-25 01:55:32,783 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_determined_segmented.png
2025-10-25 01:55:32,783 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='determined'.
2025-10-25 01:55:32,904 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for kmeans_opt on block4: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:55:33,070 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for som_opt on block4: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:55:33,187 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for dbscan on block4: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:55:33,188 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: determined in 68.22 seconds
2025-10-25 01:55:33,188 - root - INFO - timer:148 - Starting: Segmentation (block4) with k_type: predefined
2025-10-25 01:55:33,192 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:55:33,196 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:55:33,200 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 01:55:33,201 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 01:55:33,201 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:55:33,202 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_predef
2025-10-25 01:55:33,202 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:55:33,341 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_predef completed in 0.14s with 2 clusters.
2025-10-25 01:55:33,343 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_predef_predefined_segmented.png
2025-10-25 01:55:33,343 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_predef
2025-10-25 01:55:33,343 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:55:33,497 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=2
2025-10-25 01:55:33,972 - src.models.segmentation.segmentation - INFO - process:693 - Method som_predef completed in 0.63s with 2 clusters.
2025-10-25 01:55:33,973 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_predef_predefined_segmented.png
2025-10-25 01:55:33,973 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:55:33,973 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:55:34,089 - src.models.segmentation.segmentation - INFO - segment:431 - Using predefined DBSCAN params: eps=10.0, min_samples=5
2025-10-25 01:55:35,803 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10.0, min=5) found 5 clusters.
2025-10-25 01:55:35,822 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 1.85s with 5 clusters.
2025-10-25 01:55:35,823 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_predefined_segmented.png
2025-10-25 01:55:35,824 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='predefined'.
2025-10-25 01:55:35,948 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for kmeans_predef on block4: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:55:36,075 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for som_predef on block4: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:55:36,211 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for dbscan on block4: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:55:36,212 - root - INFO - timer:154 - Completed: Segmentation (block4) with k_type: predefined in 3.02 seconds
2025-10-25 01:55:36,212 - root - INFO - timer:154 - Completed: Processing test image block4 in 73.36 seconds
2025-10-25 01:55:36,213 - root - INFO - timer:148 - Starting: Processing test image block5
2025-10-25 01:55:36,213 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3504, 3504, 3)
2025-10-25 01:55:36,238 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3504x3504 to 512x512
2025-10-25 01:55:37,665 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 01:55:38,004 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 307 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 01:55:38,436 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 01:55:38,437 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 01:55:38,437 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 01:55:38,439 - src.utils.output_manager - INFO - save_preprocessed_image:87 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-25 01:55:38,454 - root - INFO - process_single_test_image:479 - Preprocessing completed for block5 - unique colors: 121
2025-10-25 01:55:38,455 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: determined
2025-10-25 01:55:38,458 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: determined
2025-10-25 01:55:38,462 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: determined
2025-10-25 01:55:38,466 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 01:55:38,467 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 01:55:38,467 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:55:38,468 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_opt
2025-10-25 01:55:38,468 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:55:38,637 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:55:38,637 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:55:38,638 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:55:40,533 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.979, CH=2263113.5
2025-10-25 01:55:40,534 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:55:42,501 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.963, CH=2536870.2
2025-10-25 01:55:42,501 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:55:44,380 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.844, CH=2246585.8
2025-10-25 01:55:44,381 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:55:46,283 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.822, CH=2193589.2
2025-10-25 01:55:46,283 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:55:48,341 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.831, CH=2542501.0
2025-10-25 01:55:48,341 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:55:50,358 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.848, CH=3396310.0
2025-10-25 01:55:50,358 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:55:52,242 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.887, CH=3783161.0
2025-10-25 01:55:52,242 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.707)
2025-10-25 01:55:52,304 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_opt completed in 13.84s with 8 clusters.
2025-10-25 01:55:52,305 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_opt_determined_segmented.png
2025-10-25 01:55:52,305 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_opt
2025-10-25 01:55:52,305 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:55:52,459 - src.models.segmentation.segmentation - INFO - determine_k:108 - Unique colors: 50. Adjusted k-range for metric search: [2, 8]
2025-10-25 01:55:52,459 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 01:55:52,461 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=2
2025-10-25 01:55:54,346 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=2: Silhouette=0.979, CH=2316801.5
2025-10-25 01:55:54,346 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=3
2025-10-25 01:55:56,306 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=3: Silhouette=0.963, CH=2339518.8
2025-10-25 01:55:56,306 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=4
2025-10-25 01:55:58,189 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=4: Silhouette=0.881, CH=2275228.8
2025-10-25 01:55:58,189 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=5
2025-10-25 01:56:00,049 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=5: Silhouette=0.851, CH=2243578.2
2025-10-25 01:56:00,049 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=6
2025-10-25 01:56:01,896 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=6: Silhouette=0.855, CH=2877987.5
2025-10-25 01:56:01,896 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=7
2025-10-25 01:56:03,733 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=7: Silhouette=0.892, CH=3682219.8
2025-10-25 01:56:03,733 - src.models.segmentation.segmentation - INFO - determine_k:132 - Testing k=8
2025-10-25 01:56:05,548 - src.models.segmentation.segmentation - INFO - determine_k:146 - Metrics for k=8: Silhouette=0.902, CH=5990951.5
2025-10-25 01:56:05,548 - src.models.segmentation.segmentation - INFO - determine_k:162 - Optimal k determined: 8 (based on score: 0.699)
2025-10-25 01:56:05,548 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=8
2025-10-25 01:56:05,994 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 3 (k=8). Skipping avg color.
2025-10-25 01:56:05,994 - src.models.segmentation.segmentation - WARNING - segment:582 - SOM generated empty mask for cluster 7 (k=8). Skipping avg color.
2025-10-25 01:56:05,995 - src.models.segmentation.segmentation - INFO - process:693 - Method som_opt completed in 13.69s with 8 clusters.
2025-10-25 01:56:05,996 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_opt_determined_segmented.png
2025-10-25 01:56:05,996 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:56:05,996 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:56:06,112 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:387 - Finding optimal DBSCAN parameters...
2025-10-25 01:56:07,996 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=5) found 4 clusters.
2025-10-25 01:56:13,488 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=5) -> clusters=4, silhouette: 0.945
2025-10-25 01:56:15,249 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=10) found 5 clusters.
2025-10-25 01:56:20,785 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=10) -> clusters=5, silhouette: 0.928
2025-10-25 01:56:22,606 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10, min=20) found 4 clusters.
2025-10-25 01:56:28,122 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=10, min=20) -> clusters=4, silhouette: 0.934
2025-10-25 01:56:30,197 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=5) found 1 clusters.
2025-10-25 01:56:30,197 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=15, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:56:32,089 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=10) found 3 clusters.
2025-10-25 01:56:37,609 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=10) -> clusters=3, silhouette: 0.961
2025-10-25 01:56:39,667 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=15, min=20) found 3 clusters.
2025-10-25 01:56:45,541 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=15, min=20) -> clusters=3, silhouette: 0.955
2025-10-25 01:56:47,639 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=5) found 1 clusters.
2025-10-25 01:56:47,639 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=5) -> found <= 1 cluster. Skipping score.
2025-10-25 01:56:49,744 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=10) found 1 clusters.
2025-10-25 01:56:49,744 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:410 - DBSCAN params (eps=20, min=10) -> found <= 1 cluster. Skipping score.
2025-10-25 01:56:51,678 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=20) found 3 clusters.
2025-10-25 01:56:57,172 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:403 - DBSCAN params (eps=20, min=20) -> clusters=3, silhouette: 0.961
2025-10-25 01:56:57,172 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:412 - Optimal DBSCAN parameters found: eps=20, min_samples=20
2025-10-25 01:56:58,990 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=20, min=20) found 3 clusters.
2025-10-25 01:56:59,009 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 53.01s with 3 clusters.
2025-10-25 01:56:59,011 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_determined_segmented.png
2025-10-25 01:56:59,011 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='determined'.
2025-10-25 01:56:59,134 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for kmeans_opt on block5: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:56:59,252 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for som_opt on block5: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:56:59,372 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for dbscan on block5: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:56:59,373 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: determined in 80.92 seconds
2025-10-25 01:56:59,373 - root - INFO - timer:148 - Starting: Segmentation (block5) with k_type: predefined
2025-10-25 01:56:59,379 - src.models.segmentation.segmentation - INFO - __init__:256 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 01:56:59,382 - src.models.segmentation.segmentation - INFO - __init__:516 - SOMSegmenter initialized with k_type: predefined
2025-10-25 01:56:59,385 - src.models.segmentation.segmentation - INFO - __init__:365 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 01:56:59,386 - src.models.segmentation.segmentation - INFO - __init__:623 - Segmenter (Facade) initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 01:56:59,386 - src.models.segmentation.segmentation - WARNING - process:677 - OutputManager does not have expected methods for image name/path. Using placeholder.
2025-10-25 01:56:59,387 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: kmeans_predef
2025-10-25 01:56:59,387 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:56:59,530 - src.models.segmentation.segmentation - INFO - process:693 - Method kmeans_predef completed in 0.14s with 2 clusters.
2025-10-25 01:56:59,532 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\kmeans_predef_predefined_segmented.png
2025-10-25 01:56:59,533 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: som_predef
2025-10-25 01:56:59,533 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:56:59,688 - src.models.segmentation.segmentation - INFO - segment:542 - Running SOM segmentation with k=2
2025-10-25 01:57:00,195 - src.models.segmentation.segmentation - INFO - process:693 - Method som_predef completed in 0.66s with 2 clusters.
2025-10-25 01:57:00,196 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\som_predef_predefined_segmented.png
2025-10-25 01:57:00,196 - src.models.segmentation.segmentation - INFO - process:689 - Running segmentation method: dbscan
2025-10-25 01:57:00,196 - src.models.segmentation.segmentation - INFO - quantize_image:195 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 01:57:00,318 - src.models.segmentation.segmentation - INFO - segment:431 - Using predefined DBSCAN params: eps=10.0, min_samples=5
2025-10-25 01:57:02,448 - src.models.segmentation.segmentation - INFO - _run_dbscan:379 - DBSCAN(eps=10.0, min=5) found 4 clusters.
2025-10-25 01:57:02,478 - src.models.segmentation.segmentation - INFO - process:693 - Method dbscan completed in 2.28s with 4 clusters.
2025-10-25 01:57:02,479 - src.utils.output_manager - INFO - save_segmentation_result:109 - Saved segmented image to datasets\block\processed\segmented\dbscan_predefined_segmented.png
2025-10-25 01:57:02,480 - src.models.segmentation.segmentation - INFO - process:710 - Segmentation processing completed for k_type='predefined'.
2025-10-25 01:57:02,675 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for kmeans_predef on block5: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:57:02,820 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for som_predef on block5: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:57:03,022 - root - ERROR - process_single_test_image:585 - Delta E calculation failed for dbscan on block5: 'list' object has no attribute 'size'
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 557, in process_single_test_image
    if segmented_lab_traditional.size == 0 or segmented_lab_dbn.size == 0:
AttributeError: 'list' object has no attribute 'size'
2025-10-25 01:57:03,022 - root - INFO - timer:154 - Completed: Segmentation (block5) with k_type: predefined in 3.65 seconds
2025-10-25 01:57:03,023 - root - INFO - timer:154 - Completed: Processing test image block5 in 86.81 seconds
2025-10-25 01:57:03,025 - root - INFO - main:731 - ================================================================================
PROCESSING COMPLETED IN 605.46 SECONDS
================================================================================
2025-10-25 01:57:03,117 - root - INFO - main:739 - Profiling results saved to: C:\Users\LENOVO\Desktop\prints\output\profile_stats.txt
2025-10-25 13:04:03,892 - root - INFO - setup_logging:76 - Logging setup complete. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-25 13:04:03,894 - root - INFO - main:522 - ================================================================================
TEXTILE COLOR ANALYSIS SYSTEM - PROCESSING START
================================================================================
2025-10-25 13:04:03,894 - root - INFO - main:523 - Project Root: c:\Users\LENOVO\Desktop\prints
2025-10-25 13:04:03,894 - root - INFO - main:524 - Output directory: C:\Users\LENOVO\Desktop\prints\output
2025-10-25 13:04:03,894 - root - INFO - main:525 - Using configuration file: C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml
2025-10-25 13:04:03,894 - root - INFO - timer:84 - Starting: Configuration loading and validation
2025-10-25 13:04:03,908 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from c:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-25 13:04:03,912 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-25 13:04:03,912 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-25 13:04:03,912 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-25 13:04:03,913 - root - INFO - validate_processing_config:156 - Processing configuration validation passed
2025-10-25 13:04:03,913 - root - INFO - timer:89 - Completed: Configuration loading and validation in 0.02 seconds
2025-10-25 13:04:03,915 - src.utils.output_manager - INFO - __init__:19 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-25 13:04:03,915 - root - INFO - main:535 - Processing dataset: block
2025-10-25 13:04:03,915 - root - INFO - timer:84 - Starting: Loading all test images
2025-10-25 13:04:04,621 - src.utils.output_manager - INFO - save_test_image:66 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-25 13:04:05,558 - src.utils.output_manager - INFO - save_test_image:66 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-25 13:04:06,012 - src.utils.output_manager - INFO - save_test_image:66 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-25 13:04:06,576 - src.utils.output_manager - INFO - save_test_image:66 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-25 13:04:07,120 - src.utils.output_manager - INFO - save_test_image:66 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-25 13:04:07,120 - root - INFO - timer:89 - Completed: Loading all test images in 3.21 seconds
2025-10-25 13:04:07,120 - root - INFO - main:550 - Successfully loaded 5 test images.
2025-10-25 13:04:07,120 - root - INFO - timer:84 - Starting: Loading training data
2025-10-25 13:04:07,120 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-25 13:04:09,038 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-25 13:04:09,038 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-25 13:04:09,038 - root - INFO - validate_loaded_data:180 - Data validation passed: 50000 total pixels available from 5 images.
2025-10-25 13:04:09,038 - root - INFO - timer:89 - Completed: Loading training data in 1.92 seconds
2025-10-25 13:04:09,038 - root - INFO - timer:84 - Starting: DBN initialization and training
2025-10-25 13:04:09,038 - src.models.dbn_trainer - INFO - __init__:48 - DBNTrainer initialized.
2025-10-25 13:04:09,038 - src.models.dbn_trainer - INFO - train:64 - Starting DBN training and PSO optimization process...
2025-10-25 13:04:09,038 - src.data.preprocess - INFO - efficient_data_sampling:207 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-25 13:04:09,038 - src.data.preprocess - INFO - efficient_data_sampling:282 - Sampling completed: 800 samples extracted.
2025-10-25 13:04:09,038 - src.data.preprocess - INFO - efficient_data_sampling:283 - RGB range: [31.00, 214.00]
2025-10-25 13:04:09,038 - src.data.preprocess - INFO - efficient_data_sampling:284 - LAB ranges: L[11.76, 84.31], a[-2.00, 2.00], b[-1.00, 8.00]
2025-10-25 13:04:09,054 - src.models.dbn_trainer - INFO - train:77 - Training set: (640, 3), Test set: (160, 3)
2025-10-25 13:04:09,054 - src.models.dbn_trainer - INFO - _prepare_scalers:109 - Preparing and fitting scalers...
2025-10-25 13:04:09,054 - src.models.dbn_trainer - INFO - _prepare_scalers:128 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-25 13:04:09,054 - src.models.dbn_trainer - INFO - _prepare_scalers:129 - X range: [0.000, 1.000]
2025-10-25 13:04:09,054 - src.models.dbn_trainer - INFO - _prepare_scalers:130 - Y range: [0.000, 1.000]
2025-10-25 13:04:09,054 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-25 13:04:09,392 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-25 13:04:09,455 - src.models.dbn_trainer - INFO - train:88 - Initial model has 20 weight layers
2025-10-25 13:04:09,455 - src.models.dbn_trainer - INFO - train:90 - Layer 0: shape (3, 100), range [-0.240, 0.237]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 12: shape (50, 25), range [-0.282, 0.283]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 18: shape (25, 3), range [-0.462, 0.463]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - train:90 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-25 13:04:09,470 - src.models.dbn_trainer - INFO - _run_pso_with_retries:139 - PSO optimization attempt 1/3
2025-10-25 13:04:09,470 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-25 13:07:03,822 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 174.35s - Final fitness: 0.059685
2025-10-25 13:07:03,822 - src.models.dbn_trainer - INFO - _run_pso_with_retries:154 - PSO optimization completed successfully
2025-10-25 13:07:03,837 - src.models.dbn_trainer - INFO - train:96 - DBN training and PSO optimization complete.
2025-10-25 13:07:03,837 - root - INFO - timer:89 - Completed: DBN initialization and training in 174.80 seconds
2025-10-25 13:07:03,837 - root - INFO - timer:84 - Starting: Reference image loading and processing
2025-10-25 13:07:03,837 - root - INFO - process_reference_image:259 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-25 13:07:04,285 - root - INFO - process_reference_image:274 - Starting preprocessing for reference image
2025-10-25 13:07:04,285 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 13:07:04,322 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 13:07:05,842 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 13:07:06,215 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 13:07:07,201 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 13:07:07,201 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 13:07:07,201 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 13:07:07,201 - root - INFO - process_reference_image:278 - Preprocessing completed, shape: (128, 128, 3)
2025-10-25 13:07:07,201 - root - INFO - process_reference_image:286 - Determining optimal number of clusters for reference
2025-10-25 13:07:07,213 - src.models.segmentation.segmentation - INFO - determine_k:105 - Unique colors: 118. Adjusted k-range: [2, 8]
2025-10-25 13:07:07,213 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=2
2025-10-25 13:07:09,434 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=2: Sil=0.972, CH=1905594.6
2025-10-25 13:07:09,434 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=3
2025-10-25 13:07:11,572 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=3: Sil=0.951, CH=1706930.4
2025-10-25 13:07:11,572 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=4
2025-10-25 13:07:13,628 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=4: Sil=0.946, CH=1403150.8
2025-10-25 13:07:13,628 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=5
2025-10-25 13:07:15,649 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=5: Sil=0.808, CH=2076144.5
2025-10-25 13:07:15,649 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=6
2025-10-25 13:07:17,669 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=6: Sil=0.941, CH=2527950.5
2025-10-25 13:07:17,669 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=7
2025-10-25 13:07:19,632 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=7: Sil=0.951, CH=4450625.5
2025-10-25 13:07:19,632 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=8
2025-10-25 13:07:21,624 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=8: Sil=0.957, CH=6006635.0
2025-10-25 13:07:21,624 - src.models.segmentation.segmentation - INFO - determine_k:156 - Optimal k determined: 8 (score: 0.955)
2025-10-25 13:07:21,624 - root - INFO - process_reference_image:299 - Optimal clusters determined: 8
2025-10-25 13:07:21,624 - root - INFO - process_reference_image:305 - Determining DPC clusters
2025-10-25 13:07:21,639 - root - INFO - optimal_clusters_dpc:157 - Number of unique colors: 118. Using dynamic_max_k: 10
2025-10-25 13:07:21,655 - root - INFO - optimal_clusters_dpc:185 - Calculated DPC bandwidth: 99.985
2025-10-25 13:07:21,655 - root - INFO - optimal_clusters_dpc:218 - DPC gamma analysis: mean=365.802, std=2013.502, threshold=2379.305
2025-10-25 13:07:21,655 - root - INFO - optimal_clusters_dpc:229 - Optimal number of clusters estimated by DPC gamma heuristic: 2
2025-10-25 13:07:21,655 - root - INFO - process_reference_image:313 - Performing reference segmentation with k=8
2025-10-25 13:07:21,655 - src.models.segmentation.segmentation - INFO - __init__:222 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 13:07:21,655 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:07:21,777 - src.models.segmentation.segmentation - INFO - segment:241 - KMeans: Using k = 8
2025-10-25 13:07:21,840 - src.models.segmentation.segmentation - INFO - __init__:358 - SOMSegmenter initialized with k_type: predefined
2025-10-25 13:07:21,840 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:07:21,995 - src.models.segmentation.segmentation - INFO - segment:375 - Running SOM segmentation with k=8
2025-10-25 13:07:22,524 - src.models.segmentation.segmentation - WARNING - segment:395 - SOM empty mask cluster 2 (k=8).
2025-10-25 13:07:22,524 - src.models.segmentation.segmentation - WARNING - segment:395 - SOM empty mask cluster 3 (k=8).
2025-10-25 13:07:22,524 - src.models.segmentation.segmentation - WARNING - segment:395 - SOM empty mask cluster 4 (k=8).
2025-10-25 13:07:22,524 - root - INFO - process_reference_image:346 - Reference image processing finished in 18.69 seconds.
2025-10-25 13:07:22,826 - root - INFO - run_reference_processing:282 - Formatted K-Means reference results.
2025-10-25 13:07:22,958 - root - INFO - run_reference_processing:309 - Formatted SOM reference results.
2025-10-25 13:07:24,301 - src.utils.output_manager - INFO - save_reference_summary:108 - Saved reference summary image to datasets\block\summaries\reference_summary.png
2025-10-25 13:07:24,301 - root - INFO - run_reference_processing:322 - Reference processed - Target LAB colors shape: (8, 3), DPC k: 2
2025-10-25 13:07:24,301 - root - INFO - timer:89 - Completed: Reference image loading and processing in 20.46 seconds
2025-10-25 13:07:24,313 - root - INFO - timer:84 - Starting: Processing test image block1
2025-10-25 13:07:24,313 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3950, 3950, 3)
2025-10-25 13:07:24,343 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3950x3950 to 512x512
2025-10-25 13:07:25,803 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 13:07:26,153 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 332 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 13:07:26,608 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 13:07:26,608 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 13:07:26,608 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 13:07:26,608 - src.utils.output_manager - INFO - save_preprocessed_image:75 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-25 13:07:26,623 - root - INFO - process_single_test_image:359 - Preprocessing completed for block1 - unique colors: 134
2025-10-25 13:07:26,623 - root - INFO - timer:84 - Starting: Segmentation (block1) with k_type: determined
2025-10-25 13:07:26,623 - src.models.segmentation.segmentation - INFO - __init__:222 - KMeansSegmenter initialized with k_type: determined
2025-10-25 13:07:26,623 - src.models.segmentation.segmentation - INFO - __init__:358 - SOMSegmenter initialized with k_type: determined
2025-10-25 13:07:26,623 - src.models.segmentation.segmentation - INFO - __init__:278 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 13:07:26,623 - src.models.segmentation.segmentation - INFO - __init__:427 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 13:07:26,623 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: kmeans_opt
2025-10-25 13:07:26,623 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:07:26,777 - src.models.segmentation.segmentation - INFO - determine_k:105 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-25 13:07:26,777 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 13:07:26,777 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=2
2025-10-25 13:07:28,933 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=2: Sil=0.987, CH=3002191.2
2025-10-25 13:07:28,933 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=3
2025-10-25 13:07:31,120 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=3: Sil=0.979, CH=4370115.5
2025-10-25 13:07:31,120 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=4
2025-10-25 13:07:33,161 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=4: Sil=0.967, CH=3799184.0
2025-10-25 13:07:33,161 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=5
2025-10-25 13:07:35,181 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=5: Sil=0.950, CH=3871854.2
2025-10-25 13:07:35,181 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=6
2025-10-25 13:07:37,224 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=6: Sil=0.883, CH=3913402.2
2025-10-25 13:07:37,224 - src.models.segmentation.segmentation - INFO - determine_k:156 - Optimal k determined: 3 (score: 0.964)
2025-10-25 13:07:37,224 - src.models.segmentation.segmentation - INFO - segment:241 - KMeans: Using k = 3
2025-10-25 13:07:37,240 - src.models.segmentation.segmentation - INFO - process:496 - Method kmeans_opt completed in 10.62s with 3 clusters.
2025-10-25 13:07:37,240 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: som_opt
2025-10-25 13:07:37,240 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:07:37,425 - src.models.segmentation.segmentation - INFO - determine_k:105 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-25 13:07:37,425 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 13:07:37,425 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=2
2025-10-25 13:07:39,421 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=2: Sil=0.987, CH=3096140.2
2025-10-25 13:07:39,421 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=3
2025-10-25 13:07:41,373 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=3: Sil=0.979, CH=4274207.0
2025-10-25 13:07:41,373 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=4
2025-10-25 13:07:43,322 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=4: Sil=0.970, CH=3828054.8
2025-10-25 13:07:43,322 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=5
2025-10-25 13:07:45,315 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=5: Sil=0.961, CH=4415574.5
2025-10-25 13:07:45,315 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=6
2025-10-25 13:07:47,341 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=6: Sil=0.905, CH=5072412.5
2025-10-25 13:07:47,341 - src.models.segmentation.segmentation - INFO - determine_k:156 - Optimal k determined: 3 (score: 0.749)
2025-10-25 13:07:47,341 - src.models.segmentation.segmentation - INFO - segment:375 - Running SOM segmentation with k=3
2025-10-25 13:07:47,776 - src.models.segmentation.segmentation - INFO - process:496 - Method som_opt completed in 10.53s with 3 clusters.
2025-10-25 13:07:47,776 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: dbscan
2025-10-25 13:07:47,776 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:07:47,887 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:295 - Finding optimal DBSCAN parameters...
2025-10-25 13:08:29,764 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:309 - Optimal DBSCAN parameters: eps=20, min=20
2025-10-25 13:08:31,557 - src.models.segmentation.segmentation - INFO - process:496 - Method dbscan completed in 43.78s with 3 clusters.
2025-10-25 13:08:31,557 - src.models.segmentation.segmentation - INFO - process:531 - Segmentation processing completed for k_type='determined'.
2025-10-25 13:08:31,670 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for kmeans_opt on block1: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:08:31,781 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for som_opt on block1: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:08:31,881 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for dbscan on block1: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:08:31,881 - root - INFO - timer:89 - Completed: Segmentation (block1) with k_type: determined in 65.26 seconds
2025-10-25 13:08:31,881 - root - INFO - timer:84 - Starting: Segmentation (block1) with k_type: predefined
2025-10-25 13:08:31,881 - src.models.segmentation.segmentation - INFO - __init__:222 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 13:08:31,881 - src.models.segmentation.segmentation - INFO - __init__:358 - SOMSegmenter initialized with k_type: predefined
2025-10-25 13:08:31,881 - src.models.segmentation.segmentation - INFO - __init__:278 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 13:08:31,881 - src.models.segmentation.segmentation - INFO - __init__:427 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 13:08:31,881 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: kmeans_predef
2025-10-25 13:08:31,881 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:08:32,012 - src.models.segmentation.segmentation - INFO - segment:241 - KMeans: Using k = 2
2025-10-25 13:08:32,012 - src.models.segmentation.segmentation - INFO - process:496 - Method kmeans_predef completed in 0.13s with 2 clusters.
2025-10-25 13:08:32,012 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: som_predef
2025-10-25 13:08:32,012 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:08:32,182 - src.models.segmentation.segmentation - INFO - segment:375 - Running SOM segmentation with k=2
2025-10-25 13:08:32,636 - src.models.segmentation.segmentation - INFO - process:496 - Method som_predef completed in 0.61s with 2 clusters.
2025-10-25 13:08:32,636 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: dbscan
2025-10-25 13:08:32,636 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:08:32,745 - src.models.segmentation.segmentation - INFO - segment:321 - Using predefined DBSCAN.
2025-10-25 13:08:34,456 - src.models.segmentation.segmentation - INFO - process:496 - Method dbscan completed in 1.82s with 8 clusters.
2025-10-25 13:08:34,456 - src.models.segmentation.segmentation - INFO - process:531 - Segmentation processing completed for k_type='predefined'.
2025-10-25 13:08:34,567 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for kmeans_predef on block1: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:08:34,676 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for som_predef on block1: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:08:34,780 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for dbscan on block1: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:08:34,787 - root - INFO - timer:89 - Completed: Segmentation (block1) with k_type: predefined in 2.90 seconds
2025-10-25 13:08:34,787 - root - INFO - timer:89 - Completed: Processing test image block1 in 70.47 seconds
2025-10-25 13:08:34,787 - root - INFO - timer:84 - Starting: Processing test image block2
2025-10-25 13:08:34,787 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-25 13:08:34,802 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-25 13:08:36,048 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 13:08:36,402 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 316 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 13:08:36,807 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 13:08:36,815 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 13:08:36,815 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 13:08:36,815 - src.utils.output_manager - INFO - save_preprocessed_image:75 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-25 13:08:36,825 - root - INFO - process_single_test_image:359 - Preprocessing completed for block2 - unique colors: 123
2025-10-25 13:08:36,825 - root - INFO - timer:84 - Starting: Segmentation (block2) with k_type: determined
2025-10-25 13:08:36,825 - src.models.segmentation.segmentation - INFO - __init__:222 - KMeansSegmenter initialized with k_type: determined
2025-10-25 13:08:36,825 - src.models.segmentation.segmentation - INFO - __init__:358 - SOMSegmenter initialized with k_type: determined
2025-10-25 13:08:36,825 - src.models.segmentation.segmentation - INFO - __init__:278 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 13:08:36,825 - src.models.segmentation.segmentation - INFO - __init__:427 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 13:08:36,825 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: kmeans_opt
2025-10-25 13:08:36,825 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:08:36,966 - src.models.segmentation.segmentation - INFO - determine_k:105 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-25 13:08:36,966 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 13:08:36,966 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=2
2025-10-25 13:08:38,784 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=2: Sil=0.981, CH=2685975.0
2025-10-25 13:08:38,784 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=3
2025-10-25 13:08:40,589 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=3: Sil=0.967, CH=3060050.5
2025-10-25 13:08:40,589 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=4
2025-10-25 13:08:42,405 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=4: Sil=0.952, CH=2790079.5
2025-10-25 13:08:42,405 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=5
2025-10-25 13:08:44,157 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=5: Sil=0.922, CH=2971583.5
2025-10-25 13:08:44,157 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=6
2025-10-25 13:08:45,903 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=6: Sil=0.861, CH=4003891.8
2025-10-25 13:08:45,903 - src.models.segmentation.segmentation - INFO - determine_k:156 - Optimal k determined: 3 (score: 0.585)
2025-10-25 13:08:45,903 - src.models.segmentation.segmentation - INFO - segment:241 - KMeans: Using k = 3
2025-10-25 13:08:45,934 - src.models.segmentation.segmentation - INFO - process:496 - Method kmeans_opt completed in 9.10s with 3 clusters.
2025-10-25 13:08:45,934 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: som_opt
2025-10-25 13:08:45,934 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:08:46,072 - src.models.segmentation.segmentation - INFO - determine_k:105 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-25 13:08:46,072 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 13:08:46,072 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=2
2025-10-25 13:08:47,874 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=2: Sil=0.981, CH=2912361.0
2025-10-25 13:08:47,874 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=3
2025-10-25 13:08:49,721 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=3: Sil=0.967, CH=3001462.8
2025-10-25 13:08:49,721 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=4
2025-10-25 13:08:51,541 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=4: Sil=0.952, CH=2739232.5
2025-10-25 13:08:51,541 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=5
2025-10-25 13:08:53,393 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=5: Sil=0.892, CH=2799587.8
2025-10-25 13:08:53,393 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=6
2025-10-25 13:08:55,155 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=6: Sil=0.857, CH=3811385.0
2025-10-25 13:08:55,155 - src.models.segmentation.segmentation - INFO - determine_k:156 - Optimal k determined: 2 (score: 0.581)
2025-10-25 13:08:55,155 - src.models.segmentation.segmentation - INFO - segment:375 - Running SOM segmentation with k=2
2025-10-25 13:08:55,540 - src.models.segmentation.segmentation - INFO - process:496 - Method som_opt completed in 9.62s with 2 clusters.
2025-10-25 13:08:55,540 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: dbscan
2025-10-25 13:08:55,540 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:08:55,656 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:295 - Finding optimal DBSCAN parameters...
2025-10-25 13:09:43,633 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:309 - Optimal DBSCAN parameters: eps=15, min=10
2025-10-25 13:09:45,475 - src.models.segmentation.segmentation - INFO - process:496 - Method dbscan completed in 49.93s with 3 clusters.
2025-10-25 13:09:45,475 - src.models.segmentation.segmentation - INFO - process:531 - Segmentation processing completed for k_type='determined'.
2025-10-25 13:09:45,587 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for kmeans_opt on block2: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:09:45,695 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for som_opt on block2: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:09:45,806 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for dbscan on block2: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:09:45,806 - root - INFO - timer:89 - Completed: Segmentation (block2) with k_type: determined in 68.99 seconds
2025-10-25 13:09:45,806 - root - INFO - timer:84 - Starting: Segmentation (block2) with k_type: predefined
2025-10-25 13:09:45,806 - src.models.segmentation.segmentation - INFO - __init__:222 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 13:09:45,806 - src.models.segmentation.segmentation - INFO - __init__:358 - SOMSegmenter initialized with k_type: predefined
2025-10-25 13:09:45,806 - src.models.segmentation.segmentation - INFO - __init__:278 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 13:09:45,806 - src.models.segmentation.segmentation - INFO - __init__:427 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 13:09:45,806 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: kmeans_predef
2025-10-25 13:09:45,806 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:09:45,922 - src.models.segmentation.segmentation - INFO - segment:241 - KMeans: Using k = 2
2025-10-25 13:09:45,937 - src.models.segmentation.segmentation - INFO - process:496 - Method kmeans_predef completed in 0.13s with 2 clusters.
2025-10-25 13:09:45,937 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: som_predef
2025-10-25 13:09:45,937 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:09:46,100 - src.models.segmentation.segmentation - INFO - segment:375 - Running SOM segmentation with k=2
2025-10-25 13:09:46,540 - src.models.segmentation.segmentation - INFO - process:496 - Method som_predef completed in 0.60s with 2 clusters.
2025-10-25 13:09:46,540 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: dbscan
2025-10-25 13:09:46,540 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:09:46,656 - src.models.segmentation.segmentation - INFO - segment:321 - Using predefined DBSCAN.
2025-10-25 13:09:48,517 - src.models.segmentation.segmentation - INFO - process:496 - Method dbscan completed in 1.97s with 4 clusters.
2025-10-25 13:09:48,517 - src.models.segmentation.segmentation - INFO - process:531 - Segmentation processing completed for k_type='predefined'.
2025-10-25 13:09:48,628 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for kmeans_predef on block2: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:09:48,738 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for som_predef on block2: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:09:48,841 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for dbscan on block2: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:09:48,841 - root - INFO - timer:89 - Completed: Segmentation (block2) with k_type: predefined in 3.03 seconds
2025-10-25 13:09:48,841 - root - INFO - timer:89 - Completed: Processing test image block2 in 74.06 seconds
2025-10-25 13:09:48,841 - root - INFO - timer:84 - Starting: Processing test image block3
2025-10-25 13:09:48,841 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3477, 3477, 3)
2025-10-25 13:09:48,863 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3477x3477 to 511x511
2025-10-25 13:09:50,136 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 13:09:50,441 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 358 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 13:09:50,834 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 13:09:50,834 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 13:09:50,834 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 13:09:50,842 - src.utils.output_manager - INFO - save_preprocessed_image:75 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-25 13:09:50,853 - root - INFO - process_single_test_image:359 - Preprocessing completed for block3 - unique colors: 178
2025-10-25 13:09:50,853 - root - INFO - timer:84 - Starting: Segmentation (block3) with k_type: determined
2025-10-25 13:09:50,853 - src.models.segmentation.segmentation - INFO - __init__:222 - KMeansSegmenter initialized with k_type: determined
2025-10-25 13:09:50,853 - src.models.segmentation.segmentation - INFO - __init__:358 - SOMSegmenter initialized with k_type: determined
2025-10-25 13:09:50,853 - src.models.segmentation.segmentation - INFO - __init__:278 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 13:09:50,853 - src.models.segmentation.segmentation - INFO - __init__:427 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 13:09:50,853 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: kmeans_opt
2025-10-25 13:09:50,853 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:09:50,996 - src.models.segmentation.segmentation - INFO - determine_k:105 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-25 13:09:50,996 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 13:09:50,996 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=2
2025-10-25 13:09:52,779 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=2: Sil=0.966, CH=1734820.8
2025-10-25 13:09:52,779 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=3
2025-10-25 13:09:54,627 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=3: Sil=0.933, CH=1020910.1
2025-10-25 13:09:54,627 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=4
2025-10-25 13:09:56,435 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=4: Sil=0.926, CH=1014539.2
2025-10-25 13:09:56,435 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=5
2025-10-25 13:09:58,226 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=5: Sil=0.727, CH=1201684.6
2025-10-25 13:09:58,226 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=6
2025-10-25 13:09:59,970 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=6: Sil=0.823, CH=2128289.2
2025-10-25 13:09:59,970 - src.models.segmentation.segmentation - INFO - determine_k:156 - Optimal k determined: 2 (score: 0.823)
2025-10-25 13:09:59,970 - src.models.segmentation.segmentation - INFO - segment:241 - KMeans: Using k = 2
2025-10-25 13:09:59,980 - src.models.segmentation.segmentation - INFO - process:496 - Method kmeans_opt completed in 9.12s with 2 clusters.
2025-10-25 13:09:59,980 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: som_opt
2025-10-25 13:09:59,980 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:10:00,140 - src.models.segmentation.segmentation - INFO - determine_k:105 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-25 13:10:00,140 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 13:10:00,140 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=2
2025-10-25 13:10:01,931 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=2: Sil=0.967, CH=1921613.9
2025-10-25 13:10:01,931 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=3
2025-10-25 13:10:03,722 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=3: Sil=0.939, CH=1251210.0
2025-10-25 13:10:03,722 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=4
2025-10-25 13:10:05,516 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=4: Sil=0.788, CH=1514113.0
2025-10-25 13:10:05,516 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=5
2025-10-25 13:10:07,264 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=5: Sil=0.795, CH=1671371.6
2025-10-25 13:10:07,264 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=6
2025-10-25 13:10:09,023 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=6: Sil=0.795, CH=1849026.0
2025-10-25 13:10:09,023 - src.models.segmentation.segmentation - INFO - determine_k:156 - Optimal k determined: 2 (score: 1.000)
2025-10-25 13:10:09,023 - src.models.segmentation.segmentation - INFO - segment:375 - Running SOM segmentation with k=2
2025-10-25 13:10:09,467 - src.models.segmentation.segmentation - INFO - process:496 - Method som_opt completed in 9.49s with 2 clusters.
2025-10-25 13:10:09,467 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: dbscan
2025-10-25 13:10:09,467 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:10:09,574 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:295 - Finding optimal DBSCAN parameters...
2025-10-25 13:10:59,571 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:309 - Optimal DBSCAN parameters: eps=15, min=5
2025-10-25 13:11:01,068 - src.models.segmentation.segmentation - INFO - process:496 - Method dbscan completed in 51.60s with 3 clusters.
2025-10-25 13:11:01,068 - src.models.segmentation.segmentation - INFO - process:531 - Segmentation processing completed for k_type='determined'.
2025-10-25 13:11:01,184 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for kmeans_opt on block3: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:11:01,284 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for som_opt on block3: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:11:01,400 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for dbscan on block3: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:11:01,400 - root - INFO - timer:89 - Completed: Segmentation (block3) with k_type: determined in 70.54 seconds
2025-10-25 13:11:01,400 - root - INFO - timer:84 - Starting: Segmentation (block3) with k_type: predefined
2025-10-25 13:11:01,400 - src.models.segmentation.segmentation - INFO - __init__:222 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 13:11:01,400 - src.models.segmentation.segmentation - INFO - __init__:358 - SOMSegmenter initialized with k_type: predefined
2025-10-25 13:11:01,400 - src.models.segmentation.segmentation - INFO - __init__:278 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 13:11:01,400 - src.models.segmentation.segmentation - INFO - __init__:427 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 13:11:01,400 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: kmeans_predef
2025-10-25 13:11:01,400 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:11:01,516 - src.models.segmentation.segmentation - INFO - segment:241 - KMeans: Using k = 2
2025-10-25 13:11:01,516 - src.models.segmentation.segmentation - INFO - process:496 - Method kmeans_predef completed in 0.12s with 2 clusters.
2025-10-25 13:11:01,516 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: som_predef
2025-10-25 13:11:01,516 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:11:01,647 - src.models.segmentation.segmentation - INFO - segment:375 - Running SOM segmentation with k=2
2025-10-25 13:11:02,070 - src.models.segmentation.segmentation - INFO - process:496 - Method som_predef completed in 0.55s with 2 clusters.
2025-10-25 13:11:02,070 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: dbscan
2025-10-25 13:11:02,070 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:11:02,186 - src.models.segmentation.segmentation - INFO - segment:321 - Using predefined DBSCAN.
2025-10-25 13:11:03,684 - src.models.segmentation.segmentation - INFO - process:496 - Method dbscan completed in 1.61s with 6 clusters.
2025-10-25 13:11:03,684 - src.models.segmentation.segmentation - INFO - process:531 - Segmentation processing completed for k_type='predefined'.
2025-10-25 13:11:03,793 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for kmeans_predef on block3: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:11:03,904 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for som_predef on block3: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:11:04,004 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for dbscan on block3: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:11:04,004 - root - INFO - timer:89 - Completed: Segmentation (block3) with k_type: predefined in 2.61 seconds
2025-10-25 13:11:04,004 - root - INFO - timer:89 - Completed: Processing test image block3 in 75.16 seconds
2025-10-25 13:11:04,004 - root - INFO - timer:84 - Starting: Processing test image block4
2025-10-25 13:11:04,004 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3622, 3622, 3)
2025-10-25 13:11:04,035 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3622x3622 to 512x512
2025-10-25 13:11:05,316 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 13:11:05,664 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 258 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 13:11:06,073 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 13:11:06,075 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 13:11:06,075 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 13:11:06,075 - src.utils.output_manager - INFO - save_preprocessed_image:75 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-25 13:11:06,093 - root - INFO - process_single_test_image:359 - Preprocessing completed for block4 - unique colors: 131
2025-10-25 13:11:06,093 - root - INFO - timer:84 - Starting: Segmentation (block4) with k_type: determined
2025-10-25 13:11:06,093 - src.models.segmentation.segmentation - INFO - __init__:222 - KMeansSegmenter initialized with k_type: determined
2025-10-25 13:11:06,093 - src.models.segmentation.segmentation - INFO - __init__:358 - SOMSegmenter initialized with k_type: determined
2025-10-25 13:11:06,093 - src.models.segmentation.segmentation - INFO - __init__:278 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 13:11:06,093 - src.models.segmentation.segmentation - INFO - __init__:427 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 13:11:06,093 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: kmeans_opt
2025-10-25 13:11:06,093 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:11:06,235 - src.models.segmentation.segmentation - INFO - determine_k:105 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-25 13:11:06,235 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 13:11:06,235 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=2
2025-10-25 13:11:08,025 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=2: Sil=0.981, CH=2550503.2
2025-10-25 13:11:08,025 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=3
2025-10-25 13:11:09,799 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=3: Sil=0.967, CH=2762126.0
2025-10-25 13:11:09,799 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=4
2025-10-25 13:11:11,620 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=4: Sil=0.953, CH=2744149.5
2025-10-25 13:11:11,620 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=5
2025-10-25 13:11:13,444 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=5: Sil=0.899, CH=3666181.8
2025-10-25 13:11:13,444 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=6
2025-10-25 13:11:15,264 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=6: Sil=0.963, CH=3705868.8
2025-10-25 13:11:15,264 - src.models.segmentation.segmentation - INFO - determine_k:156 - Optimal k determined: 6 (score: 0.889)
2025-10-25 13:11:15,264 - src.models.segmentation.segmentation - INFO - segment:241 - KMeans: Using k = 6
2025-10-25 13:11:15,327 - src.models.segmentation.segmentation - INFO - process:496 - Method kmeans_opt completed in 9.23s with 6 clusters.
2025-10-25 13:11:15,327 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: som_opt
2025-10-25 13:11:15,327 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:11:15,624 - src.models.segmentation.segmentation - INFO - determine_k:105 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-25 13:11:15,624 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 13:11:15,627 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=2
2025-10-25 13:11:17,597 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=2: Sil=0.981, CH=2721752.8
2025-10-25 13:11:17,597 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=3
2025-10-25 13:11:19,571 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=3: Sil=0.967, CH=2829620.8
2025-10-25 13:11:19,571 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=4
2025-10-25 13:11:21,557 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=4: Sil=0.898, CH=2742789.2
2025-10-25 13:11:21,557 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=5
2025-10-25 13:11:23,584 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=5: Sil=0.898, CH=3708923.5
2025-10-25 13:11:23,584 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=6
2025-10-25 13:11:25,984 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=6: Sil=0.963, CH=3774740.5
2025-10-25 13:11:25,984 - src.models.segmentation.segmentation - INFO - determine_k:156 - Optimal k determined: 6 (score: 0.889)
2025-10-25 13:11:25,984 - src.models.segmentation.segmentation - INFO - segment:375 - Running SOM segmentation with k=6
2025-10-25 13:11:26,497 - src.models.segmentation.segmentation - WARNING - segment:395 - SOM empty mask cluster 1 (k=6).
2025-10-25 13:11:26,497 - src.models.segmentation.segmentation - WARNING - segment:395 - SOM empty mask cluster 2 (k=6).
2025-10-25 13:11:26,497 - src.models.segmentation.segmentation - INFO - process:496 - Method som_opt completed in 11.18s with 6 clusters.
2025-10-25 13:11:26,497 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: dbscan
2025-10-25 13:11:26,497 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:11:26,615 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:295 - Finding optimal DBSCAN parameters...
2025-10-25 13:12:20,832 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:309 - Optimal DBSCAN parameters: eps=15, min=5
2025-10-25 13:12:22,572 - src.models.segmentation.segmentation - INFO - process:496 - Method dbscan completed in 56.07s with 2 clusters.
2025-10-25 13:12:22,572 - src.models.segmentation.segmentation - INFO - process:531 - Segmentation processing completed for k_type='determined'.
2025-10-25 13:12:22,703 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for kmeans_opt on block4: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:12:22,819 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for som_opt on block4: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:12:22,932 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for dbscan on block4: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:12:22,932 - root - INFO - timer:89 - Completed: Segmentation (block4) with k_type: determined in 76.85 seconds
2025-10-25 13:12:22,932 - root - INFO - timer:84 - Starting: Segmentation (block4) with k_type: predefined
2025-10-25 13:12:22,932 - src.models.segmentation.segmentation - INFO - __init__:222 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 13:12:22,932 - src.models.segmentation.segmentation - INFO - __init__:358 - SOMSegmenter initialized with k_type: predefined
2025-10-25 13:12:22,932 - src.models.segmentation.segmentation - INFO - __init__:278 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 13:12:22,932 - src.models.segmentation.segmentation - INFO - __init__:427 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 13:12:22,932 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: kmeans_predef
2025-10-25 13:12:22,932 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:12:23,047 - src.models.segmentation.segmentation - INFO - segment:241 - KMeans: Using k = 2
2025-10-25 13:12:23,063 - src.models.segmentation.segmentation - INFO - process:496 - Method kmeans_predef completed in 0.12s with 2 clusters.
2025-10-25 13:12:23,063 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: som_predef
2025-10-25 13:12:23,063 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:12:23,174 - src.models.segmentation.segmentation - INFO - segment:375 - Running SOM segmentation with k=2
2025-10-25 13:12:23,637 - src.models.segmentation.segmentation - INFO - process:496 - Method som_predef completed in 0.58s with 2 clusters.
2025-10-25 13:12:23,637 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: dbscan
2025-10-25 13:12:23,637 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:12:23,753 - src.models.segmentation.segmentation - INFO - segment:321 - Using predefined DBSCAN.
2025-10-25 13:12:25,421 - src.models.segmentation.segmentation - INFO - process:496 - Method dbscan completed in 1.78s with 6 clusters.
2025-10-25 13:12:25,421 - src.models.segmentation.segmentation - INFO - process:531 - Segmentation processing completed for k_type='predefined'.
2025-10-25 13:12:25,543 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for kmeans_predef on block4: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:12:25,653 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for som_predef on block4: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:12:25,769 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for dbscan on block4: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:12:25,769 - root - INFO - timer:89 - Completed: Segmentation (block4) with k_type: predefined in 2.83 seconds
2025-10-25 13:12:25,769 - root - INFO - timer:89 - Completed: Processing test image block4 in 81.76 seconds
2025-10-25 13:12:25,769 - root - INFO - timer:84 - Starting: Processing test image block5
2025-10-25 13:12:25,769 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3504, 3504, 3)
2025-10-25 13:12:25,791 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3504x3504 to 512x512
2025-10-25 13:12:27,113 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-25 13:12:27,422 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 307 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-25 13:12:27,839 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-25 13:12:27,839 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-25 13:12:27,839 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-25 13:12:27,839 - src.utils.output_manager - INFO - save_preprocessed_image:75 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-25 13:12:27,861 - root - INFO - process_single_test_image:359 - Preprocessing completed for block5 - unique colors: 133
2025-10-25 13:12:27,861 - root - INFO - timer:84 - Starting: Segmentation (block5) with k_type: determined
2025-10-25 13:12:27,861 - src.models.segmentation.segmentation - INFO - __init__:222 - KMeansSegmenter initialized with k_type: determined
2025-10-25 13:12:27,861 - src.models.segmentation.segmentation - INFO - __init__:358 - SOMSegmenter initialized with k_type: determined
2025-10-25 13:12:27,861 - src.models.segmentation.segmentation - INFO - __init__:278 - DBSCANSegmenter initialized with k_type: determined
2025-10-25 13:12:27,861 - src.models.segmentation.segmentation - INFO - __init__:427 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-25 13:12:27,861 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: kmeans_opt
2025-10-25 13:12:27,861 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:12:28,000 - src.models.segmentation.segmentation - INFO - determine_k:105 - Unique colors: 49. Adjusted k-range: [2, 6]
2025-10-25 13:12:28,000 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 13:12:28,000 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=2
2025-10-25 13:12:29,915 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=2: Sil=0.977, CH=2414037.8
2025-10-25 13:12:29,915 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=3
2025-10-25 13:12:31,794 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=3: Sil=0.958, CH=2246162.8
2025-10-25 13:12:31,794 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=4
2025-10-25 13:12:33,629 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=4: Sil=0.862, CH=1941668.4
2025-10-25 13:12:33,629 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=5
2025-10-25 13:12:35,461 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=5: Sil=0.853, CH=1960086.9
2025-10-25 13:12:35,461 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=6
2025-10-25 13:12:37,275 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=6: Sil=0.810, CH=3263713.8
2025-10-25 13:12:37,275 - src.models.segmentation.segmentation - INFO - determine_k:156 - Optimal k determined: 2 (score: 0.679)
2025-10-25 13:12:37,275 - src.models.segmentation.segmentation - INFO - segment:241 - KMeans: Using k = 2
2025-10-25 13:12:37,290 - src.models.segmentation.segmentation - INFO - process:496 - Method kmeans_opt completed in 9.42s with 2 clusters.
2025-10-25 13:12:37,290 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: som_opt
2025-10-25 13:12:37,290 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:12:37,422 - src.models.segmentation.segmentation - INFO - determine_k:105 - Unique colors: 49. Adjusted k-range: [2, 6]
2025-10-25 13:12:37,422 - src.models.segmentation.segmentation - INFO - determine_k:111 - Subsampling pixels for cluster analysis efficiency
2025-10-25 13:12:37,422 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=2
2025-10-25 13:12:39,288 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=2: Sil=0.976, CH=2279323.0
2025-10-25 13:12:39,289 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=3
2025-10-25 13:12:41,151 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=3: Sil=0.957, CH=2202020.8
2025-10-25 13:12:41,151 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=4
2025-10-25 13:12:43,032 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=4: Sil=0.844, CH=1870257.5
2025-10-25 13:12:43,033 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=5
2025-10-25 13:12:44,898 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=5: Sil=0.842, CH=1845403.9
2025-10-25 13:12:44,898 - src.models.segmentation.segmentation - INFO - determine_k:130 - Testing k=6
2025-10-25 13:12:46,760 - src.models.segmentation.segmentation - INFO - determine_k:140 - Metrics for k=6: Sil=0.821, CH=1811316.8
2025-10-25 13:12:46,760 - src.models.segmentation.segmentation - INFO - determine_k:156 - Optimal k determined: 2 (score: 1.000)
2025-10-25 13:12:46,760 - src.models.segmentation.segmentation - INFO - segment:375 - Running SOM segmentation with k=2
2025-10-25 13:12:47,186 - src.models.segmentation.segmentation - INFO - process:496 - Method som_opt completed in 9.90s with 2 clusters.
2025-10-25 13:12:47,186 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: dbscan
2025-10-25 13:12:47,186 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:12:47,293 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:295 - Finding optimal DBSCAN parameters...
2025-10-25 13:13:30,777 - src.models.segmentation.segmentation - INFO - _find_optimal_dbscan_params:309 - Optimal DBSCAN parameters: eps=20, min=20
2025-10-25 13:13:32,613 - src.models.segmentation.segmentation - INFO - process:496 - Method dbscan completed in 45.43s with 2 clusters.
2025-10-25 13:13:32,613 - src.models.segmentation.segmentation - INFO - process:531 - Segmentation processing completed for k_type='determined'.
2025-10-25 13:13:32,726 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for kmeans_opt on block5: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:13:32,828 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for som_opt on block5: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:13:32,931 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for dbscan on block5: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:13:32,931 - root - INFO - timer:89 - Completed: Segmentation (block5) with k_type: determined in 65.07 seconds
2025-10-25 13:13:32,931 - root - INFO - timer:84 - Starting: Segmentation (block5) with k_type: predefined
2025-10-25 13:13:32,931 - src.models.segmentation.segmentation - INFO - __init__:222 - KMeansSegmenter initialized with k_type: predefined
2025-10-25 13:13:32,931 - src.models.segmentation.segmentation - INFO - __init__:358 - SOMSegmenter initialized with k_type: predefined
2025-10-25 13:13:32,931 - src.models.segmentation.segmentation - INFO - __init__:278 - DBSCANSegmenter initialized with k_type: predefined
2025-10-25 13:13:32,931 - src.models.segmentation.segmentation - INFO - __init__:427 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-25 13:13:32,931 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: kmeans_predef
2025-10-25 13:13:32,931 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:13:33,032 - src.models.segmentation.segmentation - INFO - segment:241 - KMeans: Using k = 2
2025-10-25 13:13:33,040 - src.models.segmentation.segmentation - INFO - process:496 - Method kmeans_predef completed in 0.11s with 2 clusters.
2025-10-25 13:13:33,040 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: som_predef
2025-10-25 13:13:33,040 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:13:33,177 - src.models.segmentation.segmentation - INFO - segment:375 - Running SOM segmentation with k=2
2025-10-25 13:13:33,609 - src.models.segmentation.segmentation - INFO - process:496 - Method som_predef completed in 0.57s with 2 clusters.
2025-10-25 13:13:33,609 - src.models.segmentation.segmentation - INFO - process:492 - Running segmentation method: dbscan
2025-10-25 13:13:33,609 - src.models.segmentation.segmentation - INFO - quantize_image:184 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-25 13:13:33,723 - src.models.segmentation.segmentation - INFO - segment:321 - Using predefined DBSCAN.
2025-10-25 13:13:35,386 - src.models.segmentation.segmentation - INFO - process:496 - Method dbscan completed in 1.76s with 3 clusters.
2025-10-25 13:13:35,386 - src.models.segmentation.segmentation - INFO - process:531 - Segmentation processing completed for k_type='predefined'.
2025-10-25 13:13:35,515 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for kmeans_predef on block5: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:13:35,633 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for som_predef on block5: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:13:35,748 - root - ERROR - process_single_test_image:462 - Delta E calculation failed for dbscan on block5: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "c:\Users\LENOVO\Desktop\prints\src\main.py", line 439, in process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "c:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-25 13:13:35,749 - root - INFO - timer:89 - Completed: Segmentation (block5) with k_type: predefined in 2.81 seconds
2025-10-25 13:13:35,749 - root - INFO - timer:89 - Completed: Processing test image block5 in 69.98 seconds
2025-10-25 13:13:35,749 - root - INFO - timer:84 - Starting: Results saving and summary
2025-10-25 13:13:35,750 - root - WARNING - save_and_summarize_results:480 - No Delta E results were generated to save.
2025-10-25 13:13:35,750 - root - INFO - timer:89 - Completed: Results saving and summary in 0.00 seconds
2025-10-25 13:13:35,750 - root - INFO - main:604 - ================================================================================
PROCESSING COMPLETED IN 571.86 SECONDS
================================================================================
2025-10-25 13:13:35,794 - root - INFO - main:611 - Profiling results saved to: C:\Users\LENOVO\Desktop\prints\output\profile_stats.txt
2025-10-26 15:54:29,436 - root - INFO - setup_logging:78 - Logging setup complete. Level: INFO. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-26 15:54:29,437 - src.pipeline - INFO - _load_and_validate_config:86 - loading the config from: C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml
2025-10-26 15:54:29,441 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from C:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-26 15:54:29,447 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-26 15:54:29,448 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-26 15:54:29,448 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-26 15:54:29,449 - src.utils.setup - DEBUG - validate_processing_config:104 - Entering configuration validation...
2025-10-26 15:54:29,449 - src.utils.setup - DEBUG - validate_processing_config:145 - Reference image path validated: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-26 15:54:29,450 - src.utils.setup - DEBUG - validate_processing_config:165 - Validated 5 test image paths.
2025-10-26 15:54:29,450 - src.utils.setup - INFO - validate_processing_config:183 - Configuration validation passed successfully.
2025-10-26 15:54:29,452 - src.utils.output_manager - INFO - __init__:27 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-26 15:54:29,452 - src.pipeline - INFO - _load_and_validate_config:97 - OutputManager intialized for dataset: block
2025-10-26 15:54:29,452 - src.pipeline - INFO - run:102 - ==================================================
2025-10-26 15:54:29,452 - src.pipeline - INFO - run:103 - Processing Pipeline RUN starting for dataset: block
2025-10-26 15:54:29,452 - src.pipeline - INFO - run:104 - ==================================================
2025-10-26 15:54:29,453 - src.pipeline - INFO - timer:43 - Starting: Total Pipeline...
2025-10-26 15:54:29,454 - src.pipeline - INFO - timer:43 - Starting: DBN Training...
2025-10-26 15:54:29,454 - src.pipeline - INFO - _train_dbn_model:140 - loading images to generate training data...
2025-10-26 15:54:30,131 - root - INFO - save_test_image:81 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-26 15:54:31,043 - root - INFO - save_test_image:81 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-26 15:54:31,583 - root - INFO - save_test_image:81 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-26 15:54:32,117 - root - INFO - save_test_image:81 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-26 15:54:32,653 - root - INFO - save_test_image:81 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-26 15:54:32,653 - src.pipeline - INFO - _train_dbn_model:152 - loading and processing 5 images into training data...
2025-10-26 15:54:32,654 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-26 15:54:34,645 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-26 15:54:34,646 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-26 15:54:34,649 - src.pipeline - INFO - _train_dbn_model:160 - initializing DBNTrainer (Samples  = 800...)
2025-10-26 15:54:34,650 - src.models.dbn_trainer - INFO - __init__:48 - DBNTrainer initialized.
2025-10-26 15:54:34,650 - src.models.dbn_trainer - INFO - train:64 - Starting DBN training and PSO optimization process...
2025-10-26 15:54:34,650 - src.data.preprocess - INFO - efficient_data_sampling:207 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-26 15:54:34,654 - src.data.preprocess - DEBUG - efficient_data_sampling:227 - Planning to sample 160 pixels from image 1
2025-10-26 15:54:34,655 - src.data.preprocess - DEBUG - efficient_data_sampling:227 - Planning to sample 160 pixels from image 2
2025-10-26 15:54:34,655 - src.data.preprocess - DEBUG - efficient_data_sampling:227 - Planning to sample 160 pixels from image 3
2025-10-26 15:54:34,655 - src.data.preprocess - DEBUG - efficient_data_sampling:227 - Planning to sample 160 pixels from image 4
2025-10-26 15:54:34,656 - src.data.preprocess - DEBUG - efficient_data_sampling:227 - Planning to sample 160 pixels from image 5
2025-10-26 15:54:34,656 - src.data.preprocess - INFO - efficient_data_sampling:282 - Sampling completed: 800 samples extracted.
2025-10-26 15:54:34,657 - src.data.preprocess - INFO - efficient_data_sampling:283 - RGB range: [31.00, 214.00]
2025-10-26 15:54:34,657 - src.data.preprocess - INFO - efficient_data_sampling:284 - LAB ranges: L[12.16, 84.71], a[-2.00, 3.00], b[-1.00, 8.00]
2025-10-26 15:54:34,661 - src.models.dbn_trainer - INFO - train:77 - Training set: (640, 3), Test set: (160, 3)
2025-10-26 15:54:34,662 - src.models.dbn_trainer - INFO - _prepare_scalers:109 - Preparing and fitting scalers...
2025-10-26 15:54:34,665 - src.models.dbn_trainer - INFO - _prepare_scalers:128 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-26 15:54:34,665 - src.models.dbn_trainer - INFO - _prepare_scalers:129 - X range: [0.000, 1.000]
2025-10-26 15:54:34,665 - src.models.dbn_trainer - INFO - _prepare_scalers:130 - Y range: [0.000, 1.000]
2025-10-26 15:54:34,666 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-26 15:54:34,926 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-26 15:54:35,000 - src.models.dbn_trainer - INFO - train:88 - Initial model has 20 weight layers
2025-10-26 15:54:35,001 - src.models.dbn_trainer - INFO - train:90 - Layer 0: shape (3, 100), range [-0.237, 0.238]
2025-10-26 15:54:35,001 - src.models.dbn_trainer - INFO - train:90 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-26 15:54:35,002 - src.models.dbn_trainer - INFO - train:90 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-26 15:54:35,002 - src.models.dbn_trainer - INFO - train:90 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-26 15:54:35,003 - src.models.dbn_trainer - INFO - train:90 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-26 15:54:35,003 - src.models.dbn_trainer - INFO - train:90 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-26 15:54:35,003 - src.models.dbn_trainer - INFO - train:90 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-26 15:54:35,004 - src.models.dbn_trainer - INFO - train:90 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-26 15:54:35,004 - src.models.dbn_trainer - INFO - train:90 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-26 15:54:35,004 - src.models.dbn_trainer - INFO - train:90 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-26 15:54:35,005 - src.models.dbn_trainer - INFO - train:90 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-26 15:54:35,005 - src.models.dbn_trainer - INFO - train:90 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-26 15:54:35,006 - src.models.dbn_trainer - INFO - train:90 - Layer 12: shape (50, 25), range [-0.283, 0.282]
2025-10-26 15:54:35,006 - src.models.dbn_trainer - INFO - train:90 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-26 15:54:35,007 - src.models.dbn_trainer - INFO - train:90 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-26 15:54:35,007 - src.models.dbn_trainer - INFO - train:90 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-26 15:54:35,007 - src.models.dbn_trainer - INFO - train:90 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-26 15:54:35,008 - src.models.dbn_trainer - INFO - train:90 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-26 15:54:35,008 - src.models.dbn_trainer - INFO - train:90 - Layer 18: shape (25, 3), range [-0.455, 0.441]
2025-10-26 15:54:35,009 - src.models.dbn_trainer - INFO - train:90 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-26 15:54:35,009 - src.models.dbn_trainer - INFO - _run_pso_with_retries:139 - PSO optimization attempt 1/3
2025-10-26 15:54:35,009 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-26 15:56:47,930 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 132.91s - Final fitness: 0.020501
2025-10-26 15:56:47,931 - src.models.dbn_trainer - INFO - _run_pso_with_retries:154 - PSO optimization completed successfully
2025-10-26 15:56:47,938 - src.models.dbn_trainer - INFO - train:96 - DBN training and PSO optimization complete.
2025-10-26 15:56:47,939 - src.pipeline - INFO - _train_dbn_model:164 - DBN training and scaling complete
2025-10-26 15:56:47,942 - src.pipeline - INFO - timer:48 - Completed: DBN Training in  138.49 seconds
2025-10-26 15:56:47,943 - src.pipeline - INFO - timer:43 - Starting: Reference Image Processing...
2025-10-26 15:56:47,943 - src.pipeline - INFO - _run_reference_processing:182 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-26 15:56:49,566 - root - INFO - save_reference_image:71 - Saved reference image copy to datasets\block\inputs\reference_image\reference.png
2025-10-26 15:56:49,567 - src.data.preprocess - DEBUG - __init__:48 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, max_colors=8, edge_enhance=False, unsharp_amount=0.0, unsharp_threshold=0)
2025-10-26 15:56:49,567 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-26 15:56:49,599 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-26 15:56:50,994 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-26 15:56:51,339 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-26 15:56:51,353 - src.data.preprocess - DEBUG - quantize_image:80 - Subsampled pixels for K-means fit: (10000, 3)
2025-10-26 15:56:52,217 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-26 15:56:52,219 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-26 15:56:52,219 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-26 15:56:52,220 - src.models.segmentation.reference - INFO - segment_reference_image:58 - Starting reference image segmentation (K-Means & SOM)...
2025-10-26 15:56:52,220 - src.models.segmentation.reference - INFO - segment_reference_image:77 - Determining optimal number of clusters for reference image...
2025-10-26 15:56:52,221 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:56:52,345 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 15:56:52,346 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 15:56:52,348 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 15:56:54,327 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 15:56:56,282 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 15:56:58,174 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 15:57:00,118 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 15:57:02,031 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 2 (score: 0.965)
2025-10-26 15:57:02,032 - src.models.segmentation.reference - INFO - segment_reference_image:105 - Optimal clusters determined for reference: 2
2025-10-26 15:57:02,032 - src.models.segmentation.reference - INFO - timer:182 - Starting: Reference K-Means (k=2)...
2025-10-26 15:57:02,033 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 15:57:02,033 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:57:02,141 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 2
2025-10-26 15:57:02,154 - src.models.segmentation.reference - INFO - timer:187 - Completed: Reference K-Means (k=2) in 0.12 seconds
2025-10-26 15:57:02,154 - src.models.segmentation.reference - INFO - timer:182 - Starting: Reference SOM (k=2)...
2025-10-26 15:57:02,157 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 15:57:02,158 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:57:02,291 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=2
2025-10-26 15:57:02,649 - src.models.segmentation.reference - INFO - timer:187 - Completed: Reference SOM (k=2) in 0.49 seconds
2025-10-26 15:57:02,649 - src.models.segmentation.reference - INFO - segment_reference_image:171 - Reference segmentation finished in 10.43 seconds.
2025-10-26 15:57:03,872 - root - INFO - save_reference_summary:130 - Reference summary (placeholder) saved to datasets\block\summaries\reference_summary.png
2025-10-26 15:57:03,874 - src.pipeline - INFO - _run_reference_processing:238 - Reference processed. Target LAB colors shape: (2, 3), Determined k: 2
2025-10-26 15:57:03,882 - src.pipeline - INFO - timer:48 - Completed: Reference Image Processing in  15.94 seconds
2025-10-26 15:57:03,882 - src.pipeline - INFO - timer:43 - Starting: Test Image Analysis Loop...
2025-10-26 15:57:03,883 - src.pipeline - INFO - _run_test_image_analysis:252 - Starting test image analysis loop...
2025-10-26 15:57:03,883 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block1 ---
2025-10-26 15:57:04,190 - root - DEBUG - set_current_image_stem:53 - Current image stem set to: block1
2025-10-26 15:57:04,191 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block1...
2025-10-26 15:57:04,191 - src.data.preprocess - DEBUG - __init__:48 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, max_colors=8, edge_enhance=False, unsharp_amount=0.0, unsharp_threshold=0)
2025-10-26 15:57:04,191 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3950, 3950, 3)
2025-10-26 15:57:04,218 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3950x3950 to 512x512
2025-10-26 15:57:05,535 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-26 15:57:05,873 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 332 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-26 15:57:05,882 - src.data.preprocess - DEBUG - quantize_image:80 - Subsampled pixels for K-means fit: (10000, 3)
2025-10-26 15:57:06,286 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-26 15:57:06,288 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-26 15:57:06,288 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-26 15:57:06,288 - root - INFO - save_preprocessed_image:90 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-26 15:57:06,289 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block1) k_type: determined...
2025-10-26 15:57:06,289 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 15:57:06,289 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 15:57:06,289 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 15:57:06,289 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 15:57:06,290 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 15:57:06,290 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 15:57:06,290 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 15:57:06,290 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 15:57:06,290 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 15:57:06,290 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 15:57:06,290 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 15:57:06,291 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 15:57:06,291 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 15:57:06,291 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 15:57:06,291 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 15:57:06,291 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 15:57:06,291 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 15:57:06,291 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 15:57:06,292 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 15:57:06,292 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:57:06,395 - src.models.segmentation.kmeans - DEBUG - segment:64 - KMeans: Determining optimal k...
2025-10-26 15:57:06,437 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 15:57:06,438 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 15:57:06,440 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 15:57:08,374 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 15:57:10,299 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 15:57:12,245 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 15:57:14,195 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 15:57:16,146 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 4 (score: 0.762)
2025-10-26 15:57:16,146 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 4
2025-10-26 15:57:16,175 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 9.88s with 4 clusters.
2025-10-26 15:57:16,176 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block1_kmeans_opt_determined.png
2025-10-26 15:57:16,177 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 15:57:16,178 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:57:16,305 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 15:57:16,306 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 15:57:16,308 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 15:57:18,230 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 15:57:20,198 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 15:57:22,159 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 15:57:24,101 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 15:57:26,049 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 3 (score: 0.691)
2025-10-26 15:57:26,049 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=3
2025-10-26 15:57:26,387 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 10.21s with 3 clusters.
2025-10-26 15:57:26,389 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block1_som_opt_determined.png
2025-10-26 15:57:26,389 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 15:57:26,389 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:57:26,493 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 15:58:19,277 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=15, min=5
2025-10-26 15:58:21,003 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 54.61s with 2 clusters.
2025-10-26 15:58:21,005 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block1_dbscan_determined.png
2025-10-26 15:58:21,005 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 15:58:21,236 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for kmeans_opt on block1: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 15:58:21,337 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for som_opt on block1: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 15:58:21,434 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for dbscan on block1: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 15:58:21,435 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block1) k_type: determined in  75.15 seconds
2025-10-26 15:58:21,436 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block1) k_type: predefined...
2025-10-26 15:58:21,436 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 15:58:21,436 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 15:58:21,437 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 15:58:21,437 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 15:58:21,437 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 15:58:21,437 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 15:58:21,437 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 15:58:21,437 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 15:58:21,437 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 15:58:21,437 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 15:58:21,438 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 15:58:21,438 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 15:58:21,438 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 15:58:21,438 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 15:58:21,438 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 15:58:21,439 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 15:58:21,439 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 15:58:21,439 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 15:58:21,440 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 15:58:21,440 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:58:21,546 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 2
2025-10-26 15:58:21,556 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.12s with 2 clusters.
2025-10-26 15:58:21,558 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block1_kmeans_predef_predefined.png
2025-10-26 15:58:21,558 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 15:58:21,559 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:58:21,689 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=2
2025-10-26 15:58:22,040 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.48s with 2 clusters.
2025-10-26 15:58:22,041 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block1_som_predef_predefined.png
2025-10-26 15:58:22,042 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 15:58:22,042 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:58:22,149 - src.models.segmentation.dbscan - INFO - segment:119 - Using predefined DBSCAN.
2025-10-26 15:58:23,874 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 1.83s with 6 clusters.
2025-10-26 15:58:23,877 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block1_dbscan_predefined.png
2025-10-26 15:58:23,878 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 15:58:23,995 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for kmeans_predef on block1: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 15:58:24,095 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for som_predef on block1: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 15:58:24,191 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for dbscan on block1: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 15:58:24,192 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block1) k_type: predefined in  2.76 seconds
2025-10-26 15:58:24,193 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block1 in  80.00 seconds
2025-10-26 15:58:24,193 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block2 ---
2025-10-26 15:58:24,582 - root - DEBUG - set_current_image_stem:53 - Current image stem set to: block2
2025-10-26 15:58:24,582 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block2...
2025-10-26 15:58:24,582 - src.data.preprocess - DEBUG - __init__:48 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, max_colors=8, edge_enhance=False, unsharp_amount=0.0, unsharp_threshold=0)
2025-10-26 15:58:24,582 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-26 15:58:24,615 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-26 15:58:25,928 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-26 15:58:26,257 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 316 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-26 15:58:26,270 - src.data.preprocess - DEBUG - quantize_image:80 - Subsampled pixels for K-means fit: (10000, 3)
2025-10-26 15:58:26,668 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-26 15:58:26,670 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-26 15:58:26,670 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-26 15:58:26,672 - root - INFO - save_preprocessed_image:90 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-26 15:58:26,673 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block2) k_type: determined...
2025-10-26 15:58:26,673 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 15:58:26,673 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 15:58:26,673 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 15:58:26,673 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 15:58:26,674 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 15:58:26,674 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 15:58:26,674 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 15:58:26,674 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 15:58:26,674 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 15:58:26,674 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 15:58:26,675 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 15:58:26,675 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 15:58:26,675 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 15:58:26,675 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 15:58:26,675 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 15:58:26,675 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 15:58:26,676 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 15:58:26,676 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 15:58:26,676 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 15:58:26,677 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:58:26,784 - src.models.segmentation.kmeans - DEBUG - segment:64 - KMeans: Determining optimal k...
2025-10-26 15:58:26,805 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 15:58:26,805 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 15:58:26,808 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 15:58:28,675 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 15:58:30,535 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 15:58:32,333 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 15:58:34,156 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 15:58:35,979 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 3 (score: 0.875)
2025-10-26 15:58:35,979 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 3
2025-10-26 15:58:35,998 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 9.32s with 3 clusters.
2025-10-26 15:58:35,999 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block2_kmeans_opt_determined.png
2025-10-26 15:58:36,000 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 15:58:36,000 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:58:36,133 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 15:58:36,134 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 15:58:36,136 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 15:58:37,990 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 15:58:39,867 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 15:58:41,734 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 15:58:43,616 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 15:58:45,457 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 3 (score: 0.949)
2025-10-26 15:58:45,457 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=3
2025-10-26 15:58:45,809 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 9.81s with 3 clusters.
2025-10-26 15:58:45,810 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block2_som_opt_determined.png
2025-10-26 15:58:45,810 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 15:58:45,811 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:58:45,926 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 15:59:34,165 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=15, min=10
2025-10-26 15:59:36,043 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 50.23s with 2 clusters.
2025-10-26 15:59:36,045 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block2_dbscan_determined.png
2025-10-26 15:59:36,045 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 15:59:36,158 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for kmeans_opt on block2: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 15:59:36,257 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for som_opt on block2: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 15:59:36,356 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for dbscan on block2: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 15:59:36,357 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block2) k_type: determined in  69.68 seconds
2025-10-26 15:59:36,357 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block2) k_type: predefined...
2025-10-26 15:59:36,358 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 15:59:36,358 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 15:59:36,358 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 15:59:36,358 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 15:59:36,358 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 15:59:36,358 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 15:59:36,359 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 15:59:36,359 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 15:59:36,359 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 15:59:36,359 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 15:59:36,359 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 15:59:36,359 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 15:59:36,359 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 15:59:36,359 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 15:59:36,360 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 15:59:36,360 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 15:59:36,360 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 15:59:36,360 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 15:59:36,361 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 15:59:36,361 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:59:36,472 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 2
2025-10-26 15:59:36,480 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.12s with 2 clusters.
2025-10-26 15:59:36,482 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block2_kmeans_predef_predefined.png
2025-10-26 15:59:36,483 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 15:59:36,483 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:59:36,619 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=2
2025-10-26 15:59:36,984 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.50s with 2 clusters.
2025-10-26 15:59:36,986 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block2_som_predef_predefined.png
2025-10-26 15:59:36,986 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 15:59:36,987 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:59:37,095 - src.models.segmentation.dbscan - INFO - segment:119 - Using predefined DBSCAN.
2025-10-26 15:59:38,931 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 1.94s with 5 clusters.
2025-10-26 15:59:38,934 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block2_dbscan_predefined.png
2025-10-26 15:59:38,935 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 15:59:39,052 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for kmeans_predef on block2: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 15:59:39,155 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for som_predef on block2: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 15:59:39,260 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for dbscan on block2: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 15:59:39,261 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block2) k_type: predefined in  2.90 seconds
2025-10-26 15:59:39,261 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block2 in  74.68 seconds
2025-10-26 15:59:39,262 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block3 ---
2025-10-26 15:59:39,475 - root - DEBUG - set_current_image_stem:53 - Current image stem set to: block3
2025-10-26 15:59:39,475 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block3...
2025-10-26 15:59:39,476 - src.data.preprocess - DEBUG - __init__:48 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, max_colors=8, edge_enhance=False, unsharp_amount=0.0, unsharp_threshold=0)
2025-10-26 15:59:39,476 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3477, 3477, 3)
2025-10-26 15:59:39,498 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3477x3477 to 511x511
2025-10-26 15:59:40,827 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-26 15:59:41,159 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 358 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-26 15:59:41,172 - src.data.preprocess - DEBUG - quantize_image:80 - Subsampled pixels for K-means fit: (10000, 3)
2025-10-26 15:59:41,589 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-26 15:59:41,591 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-26 15:59:41,591 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-26 15:59:41,595 - root - INFO - save_preprocessed_image:90 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-26 15:59:41,596 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block3) k_type: determined...
2025-10-26 15:59:41,596 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 15:59:41,596 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 15:59:41,596 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 15:59:41,596 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 15:59:41,597 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 15:59:41,597 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 15:59:41,597 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 15:59:41,597 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 15:59:41,597 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 15:59:41,597 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 15:59:41,598 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 15:59:41,598 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 15:59:41,598 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 15:59:41,598 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 15:59:41,598 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 15:59:41,598 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 15:59:41,599 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 15:59:41,599 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 15:59:41,600 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 15:59:41,600 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:59:41,712 - src.models.segmentation.kmeans - DEBUG - segment:64 - KMeans: Determining optimal k...
2025-10-26 15:59:41,736 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 15:59:41,737 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 15:59:41,739 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 15:59:43,549 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 15:59:45,400 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 15:59:47,237 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 15:59:49,037 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 15:59:50,822 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 2 (score: 0.788)
2025-10-26 15:59:50,822 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 2
2025-10-26 15:59:50,830 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 9.23s with 2 clusters.
2025-10-26 15:59:50,831 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block3_kmeans_opt_determined.png
2025-10-26 15:59:50,831 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 15:59:50,831 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 15:59:50,985 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 15:59:50,985 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 15:59:50,987 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 15:59:52,845 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 15:59:54,702 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 15:59:56,538 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 15:59:58,360 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:00:00,172 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 2 (score: 0.775)
2025-10-26 16:00:00,173 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=2
2025-10-26 16:00:00,516 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 9.68s with 2 clusters.
2025-10-26 16:00:00,517 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block3_som_opt_determined.png
2025-10-26 16:00:00,518 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:00:00,518 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:00:00,621 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 16:00:49,399 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=15, min=5
2025-10-26 16:00:50,915 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 50.40s with 2 clusters.
2025-10-26 16:00:50,916 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block3_dbscan_determined.png
2025-10-26 16:00:50,916 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 16:00:51,039 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for kmeans_opt on block3: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:00:51,148 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for som_opt on block3: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:00:51,253 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for dbscan on block3: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:00:51,254 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block3) k_type: determined in  69.66 seconds
2025-10-26 16:00:51,254 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block3) k_type: predefined...
2025-10-26 16:00:51,255 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 16:00:51,255 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:00:51,255 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 16:00:51,255 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:00:51,255 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 16:00:51,255 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 16:00:51,256 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 16:00:51,256 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:00:51,256 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 16:00:51,256 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:00:51,256 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 16:00:51,256 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 16:00:51,257 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 16:00:51,257 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:00:51,257 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:00:51,257 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 16:00:51,257 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:00:51,258 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 16:00:51,258 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 16:00:51,259 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:00:51,370 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 2
2025-10-26 16:00:51,379 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.12s with 2 clusters.
2025-10-26 16:00:51,381 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block3_kmeans_predef_predefined.png
2025-10-26 16:00:51,382 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 16:00:51,383 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:00:51,515 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=2
2025-10-26 16:00:51,871 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.49s with 2 clusters.
2025-10-26 16:00:51,872 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block3_som_predef_predefined.png
2025-10-26 16:00:51,873 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:00:51,873 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:00:51,994 - src.models.segmentation.dbscan - INFO - segment:119 - Using predefined DBSCAN.
2025-10-26 16:00:53,250 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 1.38s with 7 clusters.
2025-10-26 16:00:53,252 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block3_dbscan_predefined.png
2025-10-26 16:00:53,252 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 16:00:53,362 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for kmeans_predef on block3: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:00:53,464 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for som_predef on block3: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:00:53,566 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for dbscan on block3: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:00:53,568 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block3) k_type: predefined in  2.31 seconds
2025-10-26 16:00:53,568 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block3 in  74.09 seconds
2025-10-26 16:00:53,569 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block4 ---
2025-10-26 16:00:53,801 - root - DEBUG - set_current_image_stem:53 - Current image stem set to: block4
2025-10-26 16:00:53,802 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block4...
2025-10-26 16:00:53,802 - src.data.preprocess - DEBUG - __init__:48 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, max_colors=8, edge_enhance=False, unsharp_amount=0.0, unsharp_threshold=0)
2025-10-26 16:00:53,802 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3622, 3622, 3)
2025-10-26 16:00:53,828 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3622x3622 to 512x512
2025-10-26 16:00:55,175 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-26 16:00:55,531 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 258 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-26 16:00:55,542 - src.data.preprocess - DEBUG - quantize_image:80 - Subsampled pixels for K-means fit: (10000, 3)
2025-10-26 16:00:55,954 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-26 16:00:55,955 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-26 16:00:55,955 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-26 16:00:55,957 - root - INFO - save_preprocessed_image:90 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-26 16:00:55,957 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block4) k_type: determined...
2025-10-26 16:00:55,957 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 16:00:55,958 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:00:55,958 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 16:00:55,958 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 16:00:55,958 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 16:00:55,958 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:00:55,958 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 16:00:55,958 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:00:55,958 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 16:00:55,959 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 16:00:55,959 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 16:00:55,959 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:00:55,959 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 16:00:55,959 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:00:55,959 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:00:55,959 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 16:00:55,960 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:00:55,960 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 16:00:55,960 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 16:00:55,961 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:00:56,064 - src.models.segmentation.kmeans - DEBUG - segment:64 - KMeans: Determining optimal k...
2025-10-26 16:00:56,084 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 16:00:56,085 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:00:56,087 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:00:57,951 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:00:59,817 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:01:01,674 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:01:03,503 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:01:05,307 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 6 (score: 0.598)
2025-10-26 16:01:05,307 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 6
2025-10-26 16:01:05,353 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 9.39s with 6 clusters.
2025-10-26 16:01:05,355 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block4_kmeans_opt_determined.png
2025-10-26 16:01:05,355 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 16:01:05,356 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:01:05,491 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 16:01:05,492 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:01:05,494 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:01:07,338 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:01:09,198 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:01:11,067 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:01:12,919 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:01:14,765 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 6 (score: 0.745)
2025-10-26 16:01:14,766 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=6
2025-10-26 16:01:15,101 - src.models.segmentation.som - WARNING - segment:110 - SOM empty mask cluster 1 (k=6).
2025-10-26 16:01:15,101 - src.models.segmentation.som - WARNING - segment:110 - SOM empty mask cluster 2 (k=6).
2025-10-26 16:01:15,102 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 9.75s with 6 clusters.
2025-10-26 16:01:15,105 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block4_som_opt_determined.png
2025-10-26 16:01:15,106 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:01:15,106 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:01:15,208 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 16:01:53,915 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=10, min=20
2025-10-26 16:01:55,630 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 40.52s with 3 clusters.
2025-10-26 16:01:55,631 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block4_dbscan_determined.png
2025-10-26 16:01:55,631 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 16:01:55,741 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for kmeans_opt on block4: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:01:55,844 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for som_opt on block4: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:01:55,941 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for dbscan on block4: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:01:55,943 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block4) k_type: determined in  59.99 seconds
2025-10-26 16:01:55,943 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block4) k_type: predefined...
2025-10-26 16:01:55,944 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 16:01:55,944 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:01:55,944 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 16:01:55,944 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:01:55,944 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 16:01:55,944 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 16:01:55,945 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 16:01:55,945 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:01:55,945 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 16:01:55,945 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:01:55,945 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 16:01:55,945 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 16:01:55,945 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 16:01:55,946 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:01:55,946 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:01:55,946 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 16:01:55,946 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:01:55,946 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 16:01:55,947 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 16:01:55,947 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:01:56,060 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 2
2025-10-26 16:01:56,068 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.12s with 2 clusters.
2025-10-26 16:01:56,071 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block4_kmeans_predef_predefined.png
2025-10-26 16:01:56,072 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 16:01:56,072 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:01:56,196 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=2
2025-10-26 16:01:56,580 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.51s with 2 clusters.
2025-10-26 16:01:56,582 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block4_som_predef_predefined.png
2025-10-26 16:01:56,582 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:01:56,583 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:01:56,693 - src.models.segmentation.dbscan - INFO - segment:119 - Using predefined DBSCAN.
2025-10-26 16:01:58,371 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 1.79s with 7 clusters.
2025-10-26 16:01:58,373 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block4_dbscan_predefined.png
2025-10-26 16:01:58,373 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 16:01:58,483 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for kmeans_predef on block4: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:01:58,595 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for som_predef on block4: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:01:58,697 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for dbscan on block4: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:01:58,698 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block4) k_type: predefined in  2.75 seconds
2025-10-26 16:01:58,698 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block4 in  64.90 seconds
2025-10-26 16:01:58,699 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block5 ---
2025-10-26 16:01:58,941 - root - DEBUG - set_current_image_stem:53 - Current image stem set to: block5
2025-10-26 16:01:58,941 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block5...
2025-10-26 16:01:58,942 - src.data.preprocess - DEBUG - __init__:48 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, max_colors=8, edge_enhance=False, unsharp_amount=0.0, unsharp_threshold=0)
2025-10-26 16:01:58,942 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3504, 3504, 3)
2025-10-26 16:01:58,961 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3504x3504 to 512x512
2025-10-26 16:02:00,339 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-26 16:02:00,659 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 307 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-26 16:02:00,673 - src.data.preprocess - DEBUG - quantize_image:80 - Subsampled pixels for K-means fit: (10000, 3)
2025-10-26 16:02:01,069 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-26 16:02:01,071 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-26 16:02:01,071 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-26 16:02:01,073 - root - INFO - save_preprocessed_image:90 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-26 16:02:01,073 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block5) k_type: determined...
2025-10-26 16:02:01,073 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 16:02:01,073 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:02:01,074 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 16:02:01,074 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 16:02:01,074 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 16:02:01,074 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:02:01,074 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 16:02:01,074 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:02:01,075 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 16:02:01,075 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 16:02:01,075 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 16:02:01,075 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:02:01,075 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 16:02:01,076 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:02:01,076 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:02:01,076 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 16:02:01,076 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:02:01,076 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 16:02:01,077 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 16:02:01,077 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:02:01,181 - src.models.segmentation.kmeans - DEBUG - segment:64 - KMeans: Determining optimal k...
2025-10-26 16:02:01,206 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 16:02:01,206 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:02:01,209 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:02:03,089 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:02:04,973 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:02:06,862 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:02:08,733 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:02:10,609 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 6 (score: 0.548)
2025-10-26 16:02:10,610 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 6
2025-10-26 16:02:10,651 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 9.57s with 6 clusters.
2025-10-26 16:02:10,652 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block5_kmeans_opt_determined.png
2025-10-26 16:02:10,653 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 16:02:10,653 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:02:10,782 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 49. Adjusted k-range: [2, 6]
2025-10-26 16:02:10,783 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:02:10,785 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:02:12,660 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:02:14,558 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:02:16,408 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:02:18,259 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:02:20,092 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 2 (score: 0.610)
2025-10-26 16:02:20,093 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=2
2025-10-26 16:02:20,414 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 9.76s with 2 clusters.
2025-10-26 16:02:20,416 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block5_som_opt_determined.png
2025-10-26 16:02:20,416 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:02:20,416 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:02:20,517 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 16:03:13,244 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=20, min=10
2025-10-26 16:03:15,118 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 54.70s with 2 clusters.
2025-10-26 16:03:15,121 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block5_dbscan_determined.png
2025-10-26 16:03:15,122 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 16:03:15,241 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for kmeans_opt on block5: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:03:15,340 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for som_opt on block5: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:03:15,442 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for dbscan on block5: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:03:15,443 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block5) k_type: determined in  74.37 seconds
2025-10-26 16:03:15,443 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block5) k_type: predefined...
2025-10-26 16:03:15,444 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 16:03:15,444 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:03:15,444 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 16:03:15,444 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:03:15,444 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 16:03:15,444 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 16:03:15,445 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 16:03:15,445 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:03:15,445 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 16:03:15,445 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:03:15,445 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 16:03:15,445 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 16:03:15,445 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 16:03:15,446 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:03:15,446 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:03:15,446 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 16:03:15,446 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:03:15,446 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 16:03:15,447 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 16:03:15,447 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:03:15,551 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 2
2025-10-26 16:03:15,560 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.11s with 2 clusters.
2025-10-26 16:03:15,564 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block5_kmeans_predef_predefined.png
2025-10-26 16:03:15,564 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 16:03:15,565 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:03:15,690 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=2
2025-10-26 16:03:16,044 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.48s with 2 clusters.
2025-10-26 16:03:16,045 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block5_som_predef_predefined.png
2025-10-26 16:03:16,045 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:03:16,045 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:03:16,146 - src.models.segmentation.dbscan - INFO - segment:119 - Using predefined DBSCAN.
2025-10-26 16:03:17,959 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 1.91s with 7 clusters.
2025-10-26 16:03:17,961 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block5_dbscan_predefined.png
2025-10-26 16:03:17,961 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 16:03:18,086 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for kmeans_predef on block5: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:03:18,183 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for som_predef on block5: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:03:18,279 - src.pipeline - ERROR - _process_single_test_image:398 - Delta E calculation failed for dbscan on block5: name 'segmented_colors_lab' is not defined
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 372, in _process_single_test_image
    delta_e_traditional_list = color_metric_calculator.compute_all_delta_e(segmented_lab_traditional)
  File "C:\Users\LENOVO\Desktop\prints\src\utils\color\color_analysis.py", line 134, in compute_all_delta_e
    return self.compute_similarity(segmented_colors_lab)
NameError: name 'segmented_colors_lab' is not defined
2025-10-26 16:03:18,280 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block5) k_type: predefined in  2.84 seconds
2025-10-26 16:03:18,281 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block5 in  79.34 seconds
2025-10-26 16:03:18,281 - root - DEBUG - set_current_image_stem:53 - Current image stem set to: None
2025-10-26 16:03:18,281 - src.pipeline - INFO - _run_test_image_analysis:278 - Test image analysis loop finished.
2025-10-26 16:03:18,285 - src.pipeline - INFO - timer:48 - Completed: Test Image Analysis Loop in  374.40 seconds
2025-10-26 16:03:18,285 - src.pipeline - INFO - timer:43 - Starting: Saving Final Results...
2025-10-26 16:03:18,286 - src.pipeline - WARNING - _save_and_summarize_results:413 - No Delta E results to save or summarize.
2025-10-26 16:03:18,286 - src.pipeline - INFO - timer:48 - Completed: Saving Final Results in  0.00 seconds
2025-10-26 16:03:18,287 - src.pipeline - INFO - timer:48 - Completed: Total Pipeline in  528.83 seconds
2025-10-26 16:03:18,287 - src.pipeline - INFO - run:127 - ==================================================
2025-10-26 16:03:18,287 - src.pipeline - INFO - run:128 - Processing Pipeline RUN completed for: block
2025-10-26 16:03:18,288 - src.pipeline - INFO - run:129 - ==================================================
2025-10-26 16:03:18,288 - root - INFO - main:69 - Main execution finished successfully.
2025-10-26 16:03:18,289 - root - INFO - main:75 - ================================================================================
PROCESSING COMPLETED IN 528.85 SECONDS
================================================================================
2025-10-26 16:09:44,659 - root - INFO - setup_logging:78 - Logging setup complete. Level: INFO. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-26 16:09:44,660 - src.pipeline - INFO - _load_and_validate_config:86 - loading the config from: C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml
2025-10-26 16:09:44,665 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from C:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-26 16:09:44,668 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-26 16:09:44,669 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-26 16:09:44,669 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-26 16:09:44,670 - src.utils.setup - DEBUG - validate_processing_config:104 - Entering configuration validation...
2025-10-26 16:09:44,670 - src.utils.setup - DEBUG - validate_processing_config:145 - Reference image path validated: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-26 16:09:44,671 - src.utils.setup - DEBUG - validate_processing_config:165 - Validated 5 test image paths.
2025-10-26 16:09:44,671 - src.utils.setup - INFO - validate_processing_config:183 - Configuration validation passed successfully.
2025-10-26 16:09:44,673 - src.utils.output_manager - INFO - __init__:27 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-26 16:09:44,674 - src.pipeline - INFO - _load_and_validate_config:97 - OutputManager intialized for dataset: block
2025-10-26 16:09:44,676 - src.pipeline - INFO - run:102 - ==================================================
2025-10-26 16:09:44,677 - src.pipeline - INFO - run:103 - Processing Pipeline RUN starting for dataset: block
2025-10-26 16:09:44,678 - src.pipeline - INFO - run:104 - ==================================================
2025-10-26 16:09:44,679 - src.pipeline - INFO - timer:43 - Starting: Total Pipeline...
2025-10-26 16:09:44,679 - src.pipeline - INFO - timer:43 - Starting: DBN Training...
2025-10-26 16:09:44,680 - src.pipeline - INFO - _train_dbn_model:140 - loading images to generate training data...
2025-10-26 16:09:45,464 - root - INFO - save_test_image:81 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-26 16:09:46,359 - root - INFO - save_test_image:81 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-26 16:09:46,830 - root - INFO - save_test_image:81 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-26 16:09:47,360 - root - INFO - save_test_image:81 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-26 16:09:47,943 - root - INFO - save_test_image:81 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-26 16:09:47,943 - src.pipeline - INFO - _train_dbn_model:152 - loading and processing 5 images into training data...
2025-10-26 16:09:47,944 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-26 16:09:49,838 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-26 16:09:49,839 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-26 16:09:49,842 - src.pipeline - INFO - _train_dbn_model:160 - initializing DBNTrainer (Samples  = 800...)
2025-10-26 16:09:49,843 - src.models.dbn_trainer - INFO - __init__:48 - DBNTrainer initialized.
2025-10-26 16:09:49,843 - src.models.dbn_trainer - INFO - train:64 - Starting DBN training and PSO optimization process...
2025-10-26 16:09:49,844 - src.data.preprocess - INFO - efficient_data_sampling:207 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-26 16:09:49,845 - src.data.preprocess - DEBUG - efficient_data_sampling:227 - Planning to sample 160 pixels from image 1
2025-10-26 16:09:49,846 - src.data.preprocess - DEBUG - efficient_data_sampling:227 - Planning to sample 160 pixels from image 2
2025-10-26 16:09:49,847 - src.data.preprocess - DEBUG - efficient_data_sampling:227 - Planning to sample 160 pixels from image 3
2025-10-26 16:09:49,847 - src.data.preprocess - DEBUG - efficient_data_sampling:227 - Planning to sample 160 pixels from image 4
2025-10-26 16:09:49,848 - src.data.preprocess - DEBUG - efficient_data_sampling:227 - Planning to sample 160 pixels from image 5
2025-10-26 16:09:49,849 - src.data.preprocess - INFO - efficient_data_sampling:282 - Sampling completed: 800 samples extracted.
2025-10-26 16:09:49,849 - src.data.preprocess - INFO - efficient_data_sampling:283 - RGB range: [32.00, 214.00]
2025-10-26 16:09:49,849 - src.data.preprocess - INFO - efficient_data_sampling:284 - LAB ranges: L[12.16, 84.71], a[-2.00, 3.00], b[-2.00, 9.00]
2025-10-26 16:09:49,851 - src.models.dbn_trainer - INFO - train:77 - Training set: (640, 3), Test set: (160, 3)
2025-10-26 16:09:49,851 - src.models.dbn_trainer - INFO - _prepare_scalers:109 - Preparing and fitting scalers...
2025-10-26 16:09:49,854 - src.models.dbn_trainer - INFO - _prepare_scalers:128 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-26 16:09:49,854 - src.models.dbn_trainer - INFO - _prepare_scalers:129 - X range: [0.000, 1.000]
2025-10-26 16:09:49,855 - src.models.dbn_trainer - INFO - _prepare_scalers:130 - Y range: [0.000, 1.000]
2025-10-26 16:09:49,855 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-26 16:09:50,069 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-26 16:09:50,117 - src.models.dbn_trainer - INFO - train:88 - Initial model has 20 weight layers
2025-10-26 16:09:50,117 - src.models.dbn_trainer - INFO - train:90 - Layer 0: shape (3, 100), range [-0.240, 0.241]
2025-10-26 16:09:50,117 - src.models.dbn_trainer - INFO - train:90 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-26 16:09:50,118 - src.models.dbn_trainer - INFO - train:90 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-26 16:09:50,118 - src.models.dbn_trainer - INFO - train:90 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-26 16:09:50,119 - src.models.dbn_trainer - INFO - train:90 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-26 16:09:50,119 - src.models.dbn_trainer - INFO - train:90 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-26 16:09:50,119 - src.models.dbn_trainer - INFO - train:90 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-26 16:09:50,120 - src.models.dbn_trainer - INFO - train:90 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-26 16:09:50,120 - src.models.dbn_trainer - INFO - train:90 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-26 16:09:50,121 - src.models.dbn_trainer - INFO - train:90 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-26 16:09:50,121 - src.models.dbn_trainer - INFO - train:90 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-26 16:09:50,122 - src.models.dbn_trainer - INFO - train:90 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-26 16:09:50,122 - src.models.dbn_trainer - INFO - train:90 - Layer 12: shape (50, 25), range [-0.282, 0.283]
2025-10-26 16:09:50,123 - src.models.dbn_trainer - INFO - train:90 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-26 16:09:50,123 - src.models.dbn_trainer - INFO - train:90 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-26 16:09:50,124 - src.models.dbn_trainer - INFO - train:90 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-26 16:09:50,124 - src.models.dbn_trainer - INFO - train:90 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-26 16:09:50,124 - src.models.dbn_trainer - INFO - train:90 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-26 16:09:50,125 - src.models.dbn_trainer - INFO - train:90 - Layer 18: shape (25, 3), range [-0.460, 0.448]
2025-10-26 16:09:50,125 - src.models.dbn_trainer - INFO - train:90 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-26 16:09:50,125 - src.models.dbn_trainer - INFO - _run_pso_with_retries:139 - PSO optimization attempt 1/3
2025-10-26 16:09:50,126 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-26 16:12:02,188 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 132.06s - Final fitness: 0.012329
2025-10-26 16:12:02,189 - src.models.dbn_trainer - INFO - _run_pso_with_retries:154 - PSO optimization completed successfully
2025-10-26 16:12:02,196 - src.models.dbn_trainer - INFO - train:96 - DBN training and PSO optimization complete.
2025-10-26 16:12:02,196 - src.pipeline - INFO - _train_dbn_model:164 - DBN training and scaling complete
2025-10-26 16:12:02,200 - src.pipeline - INFO - timer:48 - Completed: DBN Training in  137.52 seconds
2025-10-26 16:12:02,201 - src.pipeline - INFO - timer:43 - Starting: Reference Image Processing...
2025-10-26 16:12:02,201 - src.pipeline - INFO - _run_reference_processing:182 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-26 16:12:03,850 - root - INFO - save_reference_image:71 - Saved reference image copy to datasets\block\inputs\reference_image\reference.png
2025-10-26 16:12:03,851 - src.data.preprocess - DEBUG - __init__:48 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, max_colors=8, edge_enhance=False, unsharp_amount=0.0, unsharp_threshold=0)
2025-10-26 16:12:03,851 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-26 16:12:03,882 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-26 16:12:05,202 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-26 16:12:05,543 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-26 16:12:05,557 - src.data.preprocess - DEBUG - quantize_image:80 - Subsampled pixels for K-means fit: (10000, 3)
2025-10-26 16:12:06,280 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-26 16:12:06,281 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-26 16:12:06,282 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-26 16:12:06,282 - src.models.segmentation.reference - INFO - segment_reference_image:58 - Starting reference image segmentation (K-Means & SOM)...
2025-10-26 16:12:06,282 - src.models.segmentation.reference - INFO - segment_reference_image:77 - Determining optimal number of clusters for reference image...
2025-10-26 16:12:06,283 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:12:06,411 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 49. Adjusted k-range: [2, 6]
2025-10-26 16:12:06,412 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:12:06,414 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:12:08,299 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:12:10,248 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:12:12,156 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:12:14,042 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:12:15,849 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 6 (score: 0.785)
2025-10-26 16:12:15,849 - src.models.segmentation.reference - INFO - segment_reference_image:105 - Optimal clusters determined for reference: 6
2025-10-26 16:12:15,850 - src.models.segmentation.reference - INFO - timer:182 - Starting: Reference K-Means (k=6)...
2025-10-26 16:12:15,850 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 16:12:15,851 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:12:15,950 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 6
2025-10-26 16:12:16,001 - src.models.segmentation.reference - INFO - timer:187 - Completed: Reference K-Means (k=6) in 0.15 seconds
2025-10-26 16:12:16,002 - src.models.segmentation.reference - INFO - timer:182 - Starting: Reference SOM (k=6)...
2025-10-26 16:12:16,003 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 16:12:16,003 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:12:16,133 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=6
2025-10-26 16:12:16,504 - src.models.segmentation.reference - INFO - timer:187 - Completed: Reference SOM (k=6) in 0.50 seconds
2025-10-26 16:12:16,504 - src.models.segmentation.reference - INFO - segment_reference_image:171 - Reference segmentation finished in 10.22 seconds.
2025-10-26 16:12:17,770 - root - INFO - save_reference_summary:130 - Reference summary (placeholder) saved to datasets\block\summaries\reference_summary.png
2025-10-26 16:12:17,771 - src.pipeline - INFO - _run_reference_processing:238 - Reference processed. Target LAB colors shape: (6, 3), Determined k: 6
2025-10-26 16:12:17,777 - src.pipeline - INFO - timer:48 - Completed: Reference Image Processing in  15.58 seconds
2025-10-26 16:12:17,778 - src.pipeline - INFO - timer:43 - Starting: Test Image Analysis Loop...
2025-10-26 16:12:17,778 - src.pipeline - INFO - _run_test_image_analysis:252 - Starting test image analysis loop...
2025-10-26 16:12:17,779 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block1 ---
2025-10-26 16:12:18,073 - root - DEBUG - set_current_image_stem:53 - Current image stem set to: block1
2025-10-26 16:12:18,073 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block1...
2025-10-26 16:12:18,073 - src.data.preprocess - DEBUG - __init__:48 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, max_colors=8, edge_enhance=False, unsharp_amount=0.0, unsharp_threshold=0)
2025-10-26 16:12:18,074 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3950, 3950, 3)
2025-10-26 16:12:18,113 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3950x3950 to 512x512
2025-10-26 16:12:19,497 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-26 16:12:19,866 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 332 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-26 16:12:19,886 - src.data.preprocess - DEBUG - quantize_image:80 - Subsampled pixels for K-means fit: (10000, 3)
2025-10-26 16:12:20,292 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-26 16:12:20,294 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-26 16:12:20,294 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-26 16:12:20,295 - root - INFO - save_preprocessed_image:90 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-26 16:12:20,296 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block1) k_type: determined...
2025-10-26 16:12:20,296 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 16:12:20,296 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:12:20,296 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 16:12:20,296 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 16:12:20,297 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 16:12:20,297 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:12:20,297 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 16:12:20,297 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:12:20,297 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 16:12:20,297 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 16:12:20,297 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 16:12:20,298 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:12:20,298 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 16:12:20,298 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:12:20,298 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:12:20,298 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 16:12:20,298 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:12:20,298 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 16:12:20,299 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 16:12:20,299 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:12:20,398 - src.models.segmentation.kmeans - DEBUG - segment:64 - KMeans: Determining optimal k...
2025-10-26 16:12:20,415 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 16:12:20,416 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:12:20,418 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:12:22,276 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:12:24,149 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:12:26,029 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:12:27,849 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:12:29,713 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 3 (score: 0.881)
2025-10-26 16:12:29,713 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 3
2025-10-26 16:12:29,736 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 9.44s with 3 clusters.
2025-10-26 16:12:29,738 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block1_kmeans_opt_determined.png
2025-10-26 16:12:29,738 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 16:12:29,739 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:12:29,872 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 16:12:29,872 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:12:29,874 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:12:31,854 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:12:33,974 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:12:35,908 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:12:38,007 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:12:39,983 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 3 (score: 0.857)
2025-10-26 16:12:39,983 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=3
2025-10-26 16:12:40,350 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 10.61s with 3 clusters.
2025-10-26 16:12:40,351 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block1_som_opt_determined.png
2025-10-26 16:12:40,352 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:12:40,352 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:12:40,465 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 16:13:45,824 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=15, min=5
2025-10-26 16:13:47,520 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 67.17s with 2 clusters.
2025-10-26 16:13:47,522 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block1_dbscan_determined.png
2025-10-26 16:13:47,522 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 16:13:47,975 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block1) k_type: determined in  87.68 seconds
2025-10-26 16:13:47,975 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block1) k_type: predefined...
2025-10-26 16:13:47,975 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 16:13:47,976 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:13:47,976 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 16:13:47,976 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:13:47,976 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 16:13:47,976 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 16:13:47,976 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 16:13:47,977 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:13:47,977 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 16:13:47,977 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:13:47,977 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 16:13:47,977 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 16:13:47,977 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 16:13:47,978 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:13:47,978 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:13:47,978 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 16:13:47,979 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:13:47,979 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 16:13:47,979 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 16:13:47,980 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:13:48,082 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 2
2025-10-26 16:13:48,093 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.11s with 2 clusters.
2025-10-26 16:13:48,094 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block1_kmeans_predef_predefined.png
2025-10-26 16:13:48,096 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 16:13:48,097 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:13:48,216 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=2
2025-10-26 16:13:48,573 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.48s with 2 clusters.
2025-10-26 16:13:48,574 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block1_som_predef_predefined.png
2025-10-26 16:13:48,574 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:13:48,575 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:13:48,676 - src.models.segmentation.dbscan - INFO - segment:119 - Using predefined DBSCAN.
2025-10-26 16:13:50,370 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 1.80s with 6 clusters.
2025-10-26 16:13:50,371 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block1_dbscan_predefined.png
2025-10-26 16:13:50,371 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 16:13:50,718 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block1) k_type: predefined in  2.74 seconds
2025-10-26 16:13:50,719 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block1 in  92.65 seconds
2025-10-26 16:13:50,719 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block2 ---
2025-10-26 16:13:51,093 - root - DEBUG - set_current_image_stem:53 - Current image stem set to: block2
2025-10-26 16:13:51,093 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block2...
2025-10-26 16:13:51,094 - src.data.preprocess - DEBUG - __init__:48 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, max_colors=8, edge_enhance=False, unsharp_amount=0.0, unsharp_threshold=0)
2025-10-26 16:13:51,094 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-26 16:13:51,125 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 4480x4480 to 512x512
2025-10-26 16:13:52,423 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-26 16:13:52,766 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 316 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-26 16:13:52,774 - src.data.preprocess - DEBUG - quantize_image:80 - Subsampled pixels for K-means fit: (10000, 3)
2025-10-26 16:13:53,178 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-26 16:13:53,180 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-26 16:13:53,180 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-26 16:13:53,182 - root - INFO - save_preprocessed_image:90 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-26 16:13:53,182 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block2) k_type: determined...
2025-10-26 16:13:53,183 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 16:13:53,183 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:13:53,183 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 16:13:53,183 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 16:13:53,183 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 16:13:53,183 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:13:53,183 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 16:13:53,184 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:13:53,184 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 16:13:53,184 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 16:13:53,184 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 16:13:53,184 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:13:53,184 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 16:13:53,185 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:13:53,185 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:13:53,185 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 16:13:53,185 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:13:53,185 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 16:13:53,186 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 16:13:53,186 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:13:53,297 - src.models.segmentation.kmeans - DEBUG - segment:64 - KMeans: Determining optimal k...
2025-10-26 16:13:53,329 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 49. Adjusted k-range: [2, 6]
2025-10-26 16:13:53,330 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:13:53,331 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:13:55,188 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:13:57,026 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:13:58,876 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:14:00,713 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:14:02,485 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 3 (score: 0.547)
2025-10-26 16:14:02,485 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 3
2025-10-26 16:14:02,508 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 9.32s with 3 clusters.
2025-10-26 16:14:02,510 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block2_kmeans_opt_determined.png
2025-10-26 16:14:02,510 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 16:14:02,511 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:14:02,649 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 49. Adjusted k-range: [2, 6]
2025-10-26 16:14:02,650 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:14:02,651 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:14:04,483 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:14:06,333 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:14:08,189 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:14:10,019 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:14:11,799 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 3 (score: 0.507)
2025-10-26 16:14:11,799 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=3
2025-10-26 16:14:12,126 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 9.61s with 3 clusters.
2025-10-26 16:14:12,127 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block2_som_opt_determined.png
2025-10-26 16:14:12,127 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:14:12,128 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:14:12,229 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 16:15:06,798 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=15, min=5
2025-10-26 16:15:08,620 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 56.49s with 2 clusters.
2025-10-26 16:15:08,621 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block2_dbscan_determined.png
2025-10-26 16:15:08,622 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 16:15:08,946 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block2) k_type: determined in  75.76 seconds
2025-10-26 16:15:08,946 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block2) k_type: predefined...
2025-10-26 16:15:08,947 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 16:15:08,947 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:15:08,947 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 16:15:08,947 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:15:08,947 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 16:15:08,947 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 16:15:08,948 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 16:15:08,948 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:15:08,948 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 16:15:08,948 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:15:08,948 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 16:15:08,948 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 16:15:08,948 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 16:15:08,949 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:15:08,949 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:15:08,949 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 16:15:08,949 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:15:08,949 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 16:15:08,950 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 16:15:08,950 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:15:09,044 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 2
2025-10-26 16:15:09,054 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.10s with 2 clusters.
2025-10-26 16:15:09,055 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block2_kmeans_predef_predefined.png
2025-10-26 16:15:09,056 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 16:15:09,056 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:15:09,196 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=2
2025-10-26 16:15:09,600 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.54s with 2 clusters.
2025-10-26 16:15:09,601 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block2_som_predef_predefined.png
2025-10-26 16:15:09,602 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:15:09,602 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:15:09,715 - src.models.segmentation.dbscan - INFO - segment:119 - Using predefined DBSCAN.
2025-10-26 16:15:11,677 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 2.07s with 6 clusters.
2025-10-26 16:15:11,678 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block2_dbscan_predefined.png
2025-10-26 16:15:11,679 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 16:15:12,031 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block2) k_type: predefined in  3.08 seconds
2025-10-26 16:15:12,031 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block2 in  80.94 seconds
2025-10-26 16:15:12,032 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block3 ---
2025-10-26 16:15:12,247 - root - DEBUG - set_current_image_stem:53 - Current image stem set to: block3
2025-10-26 16:15:12,248 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block3...
2025-10-26 16:15:12,248 - src.data.preprocess - DEBUG - __init__:48 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, max_colors=8, edge_enhance=False, unsharp_amount=0.0, unsharp_threshold=0)
2025-10-26 16:15:12,248 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3477, 3477, 3)
2025-10-26 16:15:12,271 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3477x3477 to 511x511
2025-10-26 16:15:13,526 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-26 16:15:13,847 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 358 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-26 16:15:13,856 - src.data.preprocess - DEBUG - quantize_image:80 - Subsampled pixels for K-means fit: (10000, 3)
2025-10-26 16:15:14,260 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-26 16:15:14,262 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-26 16:15:14,262 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-26 16:15:14,264 - root - INFO - save_preprocessed_image:90 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-26 16:15:14,264 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block3) k_type: determined...
2025-10-26 16:15:14,265 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 16:15:14,265 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:15:14,265 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 16:15:14,265 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 16:15:14,265 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 16:15:14,265 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:15:14,266 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 16:15:14,266 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:15:14,266 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 16:15:14,266 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 16:15:14,266 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 16:15:14,266 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:15:14,266 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 16:15:14,267 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:15:14,267 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:15:14,267 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 16:15:14,267 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:15:14,267 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 16:15:14,268 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 16:15:14,268 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:15:14,362 - src.models.segmentation.kmeans - DEBUG - segment:64 - KMeans: Determining optimal k...
2025-10-26 16:15:14,397 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 16:15:14,398 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:15:14,399 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:15:16,233 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:15:18,057 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:15:19,891 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:15:21,672 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:15:23,446 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 2 (score: 0.760)
2025-10-26 16:15:23,446 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 2
2025-10-26 16:15:23,455 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 9.19s with 2 clusters.
2025-10-26 16:15:23,457 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block3_kmeans_opt_determined.png
2025-10-26 16:15:23,457 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 16:15:23,458 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:15:23,580 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 16:15:23,581 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:15:23,582 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:15:25,459 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:15:27,275 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:15:29,112 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:15:30,904 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:15:32,682 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 6 (score: 0.640)
2025-10-26 16:15:32,682 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=6
2025-10-26 16:15:33,024 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 9.57s with 6 clusters.
2025-10-26 16:15:33,026 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block3_som_opt_determined.png
2025-10-26 16:15:33,026 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:15:33,027 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:15:33,137 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 16:16:30,376 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=20, min=10
2025-10-26 16:16:32,005 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 58.98s with 2 clusters.
2025-10-26 16:16:32,007 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block3_dbscan_determined.png
2025-10-26 16:16:32,007 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 16:16:32,364 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block3) k_type: determined in  78.10 seconds
2025-10-26 16:16:32,364 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block3) k_type: predefined...
2025-10-26 16:16:32,365 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 16:16:32,365 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:16:32,365 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 16:16:32,365 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:16:32,365 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 16:16:32,365 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 16:16:32,366 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 16:16:32,366 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:16:32,366 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 16:16:32,366 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:16:32,366 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 16:16:32,366 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 16:16:32,367 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 16:16:32,367 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:16:32,367 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:16:32,367 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 16:16:32,368 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:16:32,368 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 16:16:32,368 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 16:16:32,369 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:16:32,491 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 2
2025-10-26 16:16:32,501 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.13s with 2 clusters.
2025-10-26 16:16:32,503 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block3_kmeans_predef_predefined.png
2025-10-26 16:16:32,503 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 16:16:32,504 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:16:32,637 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=2
2025-10-26 16:16:33,000 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.50s with 2 clusters.
2025-10-26 16:16:33,001 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block3_som_predef_predefined.png
2025-10-26 16:16:33,001 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:16:33,002 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:16:33,106 - src.models.segmentation.dbscan - INFO - segment:119 - Using predefined DBSCAN.
2025-10-26 16:16:34,538 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 1.54s with 8 clusters.
2025-10-26 16:16:34,540 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block3_dbscan_predefined.png
2025-10-26 16:16:34,541 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 16:16:34,906 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block3) k_type: predefined in  2.54 seconds
2025-10-26 16:16:34,906 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block3 in  82.66 seconds
2025-10-26 16:16:34,907 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block4 ---
2025-10-26 16:16:35,137 - root - DEBUG - set_current_image_stem:53 - Current image stem set to: block4
2025-10-26 16:16:35,138 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block4...
2025-10-26 16:16:35,138 - src.data.preprocess - DEBUG - __init__:48 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, max_colors=8, edge_enhance=False, unsharp_amount=0.0, unsharp_threshold=0)
2025-10-26 16:16:35,138 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3622, 3622, 3)
2025-10-26 16:16:35,162 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3622x3622 to 512x512
2025-10-26 16:16:36,442 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-26 16:16:36,774 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 258 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-26 16:16:36,784 - src.data.preprocess - DEBUG - quantize_image:80 - Subsampled pixels for K-means fit: (10000, 3)
2025-10-26 16:16:37,166 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-26 16:16:37,167 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-26 16:16:37,168 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-26 16:16:37,169 - root - INFO - save_preprocessed_image:90 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-26 16:16:37,169 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block4) k_type: determined...
2025-10-26 16:16:37,170 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 16:16:37,170 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:16:37,170 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 16:16:37,170 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 16:16:37,170 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 16:16:37,171 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:16:37,171 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 16:16:37,171 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:16:37,171 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 16:16:37,171 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 16:16:37,171 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 16:16:37,171 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:16:37,172 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 16:16:37,172 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:16:37,172 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:16:37,172 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 16:16:37,173 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:16:37,173 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 16:16:37,173 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 16:16:37,174 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:16:37,270 - src.models.segmentation.kmeans - DEBUG - segment:64 - KMeans: Determining optimal k...
2025-10-26 16:16:37,288 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 16:16:37,289 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:16:37,291 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:16:39,118 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:16:40,997 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:16:42,883 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:16:44,764 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:16:46,592 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 3 (score: 0.545)
2025-10-26 16:16:46,593 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 3
2025-10-26 16:16:46,610 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 9.44s with 3 clusters.
2025-10-26 16:16:46,612 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block4_kmeans_opt_determined.png
2025-10-26 16:16:46,612 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 16:16:46,613 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:16:46,727 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 50. Adjusted k-range: [2, 6]
2025-10-26 16:16:46,727 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:16:46,728 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:16:48,575 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:16:50,426 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:16:52,298 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:16:54,133 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:16:56,010 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 3 (score: 0.580)
2025-10-26 16:16:56,011 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=3
2025-10-26 16:16:56,350 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 9.74s with 3 clusters.
2025-10-26 16:16:56,351 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block4_som_opt_determined.png
2025-10-26 16:16:56,351 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:16:56,352 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:16:56,459 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 16:17:34,987 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=10, min=20
2025-10-26 16:17:36,697 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 40.34s with 3 clusters.
2025-10-26 16:17:36,698 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block4_dbscan_determined.png
2025-10-26 16:17:36,699 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 16:17:37,181 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block4) k_type: determined in  60.01 seconds
2025-10-26 16:17:37,181 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block4) k_type: predefined...
2025-10-26 16:17:37,182 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 16:17:37,182 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:17:37,182 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 16:17:37,182 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:17:37,182 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 16:17:37,183 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 16:17:37,183 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 16:17:37,184 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:17:37,184 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 16:17:37,184 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:17:37,184 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 16:17:37,184 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 16:17:37,185 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 16:17:37,185 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:17:37,185 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:17:37,185 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 16:17:37,185 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:17:37,186 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 16:17:37,186 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 16:17:37,186 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:17:37,300 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 2
2025-10-26 16:17:37,312 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.13s with 2 clusters.
2025-10-26 16:17:37,314 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block4_kmeans_predef_predefined.png
2025-10-26 16:17:37,314 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 16:17:37,315 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:17:37,451 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=2
2025-10-26 16:17:37,798 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.48s with 2 clusters.
2025-10-26 16:17:37,799 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block4_som_predef_predefined.png
2025-10-26 16:17:37,799 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:17:37,800 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:17:37,907 - src.models.segmentation.dbscan - INFO - segment:119 - Using predefined DBSCAN.
2025-10-26 16:17:39,674 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 1.87s with 6 clusters.
2025-10-26 16:17:39,676 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block4_dbscan_predefined.png
2025-10-26 16:17:39,676 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 16:17:40,036 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block4) k_type: predefined in  2.85 seconds
2025-10-26 16:17:40,037 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block4 in  64.90 seconds
2025-10-26 16:17:40,037 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block5 ---
2025-10-26 16:17:40,290 - root - DEBUG - set_current_image_stem:53 - Current image stem set to: block5
2025-10-26 16:17:40,290 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block5...
2025-10-26 16:17:40,290 - src.data.preprocess - DEBUG - __init__:48 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, max_colors=8, edge_enhance=False, unsharp_amount=0.0, unsharp_threshold=0)
2025-10-26 16:17:40,290 - src.data.preprocess - INFO - preprocess:140 - Starting preprocessing for image with shape: (3504, 3504, 3)
2025-10-26 16:17:40,313 - src.data.preprocess - INFO - preprocess:153 - Initial resize from 3504x3504 to 512x512
2025-10-26 16:17:41,706 - src.data.preprocess - INFO - preprocess:157 - Applied non-local means denoising with h=10
2025-10-26 16:17:42,056 - src.data.preprocess - INFO - estimate_n_colors:64 - Estimated 307 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-26 16:17:42,073 - src.data.preprocess - DEBUG - quantize_image:80 - Subsampled pixels for K-means fit: (10000, 3)
2025-10-26 16:17:42,475 - src.data.preprocess - INFO - quantize_image:106 - Quantized to 8 target colors. Final unique colors: 8
2025-10-26 16:17:42,476 - src.data.preprocess - INFO - preprocess:176 - Resized to target size (128, 128)
2025-10-26 16:17:42,476 - src.data.preprocess - INFO - preprocess:178 - Preprocessing completed
2025-10-26 16:17:42,478 - root - INFO - save_preprocessed_image:90 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-26 16:17:42,478 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block5) k_type: determined...
2025-10-26 16:17:42,479 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 16:17:42,479 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:17:42,479 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 16:17:42,479 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 16:17:42,479 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 16:17:42,479 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:17:42,480 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 16:17:42,480 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:17:42,480 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 16:17:42,480 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 16:17:42,480 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 16:17:42,480 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:17:42,480 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 16:17:42,480 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:17:42,480 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:17:42,481 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 16:17:42,481 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:17:42,481 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 16:17:42,482 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 16:17:42,482 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:17:42,589 - src.models.segmentation.kmeans - DEBUG - segment:64 - KMeans: Determining optimal k...
2025-10-26 16:17:42,633 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 49. Adjusted k-range: [2, 6]
2025-10-26 16:17:42,633 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:17:42,635 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:17:44,470 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:17:46,322 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:17:48,172 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:17:49,991 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:17:51,761 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 2 (score: 0.572)
2025-10-26 16:17:51,762 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 2
2025-10-26 16:17:51,770 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 9.29s with 2 clusters.
2025-10-26 16:17:51,771 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block5_kmeans_opt_determined.png
2025-10-26 16:17:51,772 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 16:17:51,772 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:17:51,912 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 49. Adjusted k-range: [2, 6]
2025-10-26 16:17:51,912 - src.models.segmentation.strategy - INFO - determine_k:68 - Subsampling pixels for cluster analysis efficiency
2025-10-26 16:17:51,914 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=2 for cluster metrics...
2025-10-26 16:17:53,767 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=3 for cluster metrics...
2025-10-26 16:17:55,611 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=4 for cluster metrics...
2025-10-26 16:17:57,461 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=5 for cluster metrics...
2025-10-26 16:17:59,320 - src.models.segmentation.strategy - INFO - determine_k:88 - Testing k=6 for cluster metrics...
2025-10-26 16:18:01,106 - src.models.segmentation.strategy - INFO - determine_k:125 - Optimal k determined: 6 (score: 0.515)
2025-10-26 16:18:01,106 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=6
2025-10-26 16:18:01,437 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 9.67s with 6 clusters.
2025-10-26 16:18:01,439 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block5_som_opt_determined.png
2025-10-26 16:18:01,439 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:18:01,439 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:18:01,545 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 16:18:57,396 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=15, min=5
2025-10-26 16:18:59,217 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 57.78s with 3 clusters.
2025-10-26 16:18:59,218 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block5_dbscan_determined.png
2025-10-26 16:18:59,219 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 16:18:59,577 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block5) k_type: determined in  77.10 seconds
2025-10-26 16:18:59,578 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block5) k_type: predefined...
2025-10-26 16:18:59,578 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 16:18:59,578 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 16:18:59,578 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 16:18:59,578 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 16:18:59,578 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 16:18:59,579 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 16:18:59,579 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 16:18:59,579 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 16:18:59,579 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 16:18:59,579 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 16:18:59,579 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 16:18:59,580 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 16:18:59,580 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 16:18:59,580 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 16:18:59,580 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 16:18:59,581 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 16:18:59,581 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 16:18:59,581 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 16:18:59,582 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 16:18:59,582 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:18:59,689 - src.models.segmentation.kmeans - INFO - segment:68 - KMeans: Using k = 2
2025-10-26 16:18:59,699 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.12s with 2 clusters.
2025-10-26 16:18:59,701 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block5_kmeans_predef_predefined.png
2025-10-26 16:18:59,702 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 16:18:59,703 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:18:59,845 - src.models.segmentation.som - INFO - segment:73 - Running SOM segmentation with k=2
2025-10-26 16:19:00,240 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.54s with 2 clusters.
2025-10-26 16:19:00,242 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block5_som_predef_predefined.png
2025-10-26 16:19:00,242 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 16:19:00,242 - src.models.segmentation.base - INFO - quantize_image:191 - Quantizing image (shape: (128, 128, 3)) to approx 50 colors
2025-10-26 16:19:00,350 - src.models.segmentation.dbscan - INFO - segment:119 - Using predefined DBSCAN.
2025-10-26 16:19:02,160 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 1.92s with 6 clusters.
2025-10-26 16:19:02,161 - root - INFO - save_segmentation_result:101 - Saved segmented image to datasets\block\processed\segmented\block5_dbscan_predefined.png
2025-10-26 16:19:02,162 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 16:19:02,500 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block5) k_type: predefined in  2.92 seconds
2025-10-26 16:19:02,500 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block5 in  82.21 seconds
2025-10-26 16:19:02,501 - root - DEBUG - set_current_image_stem:53 - Current image stem set to: None
2025-10-26 16:19:02,501 - src.pipeline - INFO - _run_test_image_analysis:278 - Test image analysis loop finished.
2025-10-26 16:19:02,505 - src.pipeline - INFO - timer:48 - Completed: Test Image Analysis Loop in  404.73 seconds
2025-10-26 16:19:02,506 - src.pipeline - INFO - timer:43 - Starting: Saving Final Results...
2025-10-26 16:19:02,506 - src.pipeline - INFO - _save_and_summarize_results:416 - Saving 30 total Delta E results to CSV...
2025-10-26 16:19:02,520 - root - INFO - save_delta_e_results:115 - Saved Delta E results (30 entries) to datasets\block\analysis\_block_delta_e_results.csv
2025-10-26 16:19:02,521 - src.pipeline - INFO - _save_and_summarize_results:424 - --- Overall Results Summary ---
2025-10-26 16:19:02,547 - src.pipeline - INFO - _save_and_summarize_results:433 - 
   method  avg_traditional_delta_e  avg_pso_dbn_delta_e  avg_processing_time
0  dbscan                    3.153                6.856               28.996
1  kmeans                    2.744                6.599                4.726
2     som                    3.179                6.466                5.173
2025-10-26 16:19:02,547 - src.pipeline - INFO - _save_and_summarize_results:436 - --- Detailed Results by k_type ---
2025-10-26 16:19:02,561 - src.pipeline - INFO - _save_and_summarize_results:444 - 
   method      k_type  avg_traditional_delta_e  avg_pso_dbn_delta_e  avg_processing_time  avg_n_clusters
0  dbscan  determined                    2.678                6.432               56.152           2.400
1  dbscan  predefined                    3.628                7.280                1.840           6.400
2  kmeans  determined                    3.146                6.731                9.334           2.600
3  kmeans  predefined                    2.342                6.468                0.118           2.000
4     som  determined                    2.673                6.366                9.839           4.200
5     som  predefined                    3.686                6.566                0.507           2.000
2025-10-26 16:19:02,562 - src.pipeline - INFO - _save_and_summarize_results:445 - --- End of Summary ---
2025-10-26 16:19:02,562 - src.pipeline - INFO - timer:48 - Completed: Saving Final Results in  0.06 seconds
2025-10-26 16:19:02,562 - src.pipeline - INFO - timer:48 - Completed: Total Pipeline in  557.88 seconds
2025-10-26 16:19:02,563 - src.pipeline - INFO - run:127 - ==================================================
2025-10-26 16:19:02,563 - src.pipeline - INFO - run:128 - Processing Pipeline RUN completed for: block
2025-10-26 16:19:02,563 - src.pipeline - INFO - run:129 - ==================================================
2025-10-26 16:19:02,564 - root - INFO - main:69 - Main execution finished successfully.
2025-10-26 16:19:02,564 - root - INFO - main:75 - ================================================================================
PROCESSING COMPLETED IN 557.91 SECONDS
================================================================================
2025-10-26 18:03:21,382 - root - INFO - setup_logging:82 - Logging setup complete. Level: INFO. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-26 18:03:21,382 - src.pipeline - INFO - _load_and_validate_config:86 - loading the config from: C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml
2025-10-26 18:03:21,392 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from C:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-26 18:03:21,395 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-26 18:03:21,395 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-26 18:03:21,396 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-26 18:03:21,396 - src.utils.setup - DEBUG - validate_processing_config:110 - Entering configuration validation...
2025-10-26 18:03:21,396 - src.utils.setup - ERROR - validate_processing_config:196 - Configuration validation failed: Missing required keys within 'segmentation_params': ['distance_threshold']
2025-10-26 18:03:21,397 - root - CRITICAL - main:72 - An unexpected error occurred in main execution: Processing config validation failed
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\main.py", line 61, in main
    pipeline = ProcessingPipeline(
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 70, in __init__
    self.config : Dict[str, Any] = self._load_and_validate_config()
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 92, in _load_and_validate_config
    raise ValueError("Processing config validation failed")
ValueError: Processing config validation failed
2025-10-26 18:03:21,400 - root - INFO - main:75 - ================================================================================
PROCESSING COMPLETED IN 0.02 SECONDS
================================================================================
2025-10-26 18:09:57,701 - root - INFO - setup_logging:82 - Logging setup complete. Level: INFO. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-26 18:09:57,702 - src.pipeline - INFO - _load_and_validate_config:86 - loading the config from: C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml
2025-10-26 18:09:57,712 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from C:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-26 18:09:57,715 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-26 18:09:57,715 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-26 18:09:57,716 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-26 18:09:57,716 - src.utils.setup - DEBUG - validate_processing_config:110 - Entering configuration validation...
2025-10-26 18:09:57,717 - src.utils.setup - DEBUG - validate_processing_config:151 - Reference image path validated: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-26 18:09:57,719 - src.utils.setup - DEBUG - validate_processing_config:171 - Validated 5 test image paths.
2025-10-26 18:09:57,719 - src.utils.setup - INFO - validate_processing_config:189 - Configuration validation passed successfully.
2025-10-26 18:09:57,724 - src.utils.output_manager - INFO - __init__:24 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-26 18:09:57,725 - src.pipeline - INFO - _load_and_validate_config:97 - OutputManager intialized for dataset: block
2025-10-26 18:09:57,725 - src.pipeline - INFO - run:102 - ==================================================
2025-10-26 18:09:57,725 - src.pipeline - INFO - run:103 - Processing Pipeline RUN starting for dataset: block
2025-10-26 18:09:57,726 - src.pipeline - INFO - run:104 - ==================================================
2025-10-26 18:09:57,726 - src.pipeline - INFO - timer:43 - Starting: Total Pipeline...
2025-10-26 18:09:57,726 - src.pipeline - INFO - timer:43 - Starting: DBN Training...
2025-10-26 18:09:57,727 - src.pipeline - INFO - _train_dbn_model:140 - loading images to generate training data...
2025-10-26 18:09:58,418 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-26 18:09:59,345 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-26 18:09:59,823 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-26 18:10:00,364 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-26 18:10:00,900 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-26 18:10:00,901 - src.pipeline - INFO - _train_dbn_model:152 - loading and processing 5 images into training data...
2025-10-26 18:10:00,901 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-26 18:10:03,078 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-26 18:10:03,078 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-26 18:10:03,082 - src.pipeline - INFO - _train_dbn_model:160 - initializing DBNTrainer (Samples  = 800...)
2025-10-26 18:10:03,082 - src.models.dbn_trainer - INFO - __init__:36 - DBNTrainer initialized.
2025-10-26 18:10:03,082 - src.models.dbn_trainer - INFO - train:52 - Starting DBN training and PSO optimization process...
2025-10-26 18:10:03,083 - src.data.sampling - INFO - efficient_data_sampling:53 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-26 18:10:03,084 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 1
2025-10-26 18:10:03,084 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 2
2025-10-26 18:10:03,084 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 3
2025-10-26 18:10:03,085 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 4
2025-10-26 18:10:03,085 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 5
2025-10-26 18:10:03,086 - src.data.sampling - INFO - efficient_data_sampling:129 - Sampling completed: 800 samples extracted.
2025-10-26 18:10:03,086 - src.data.sampling - INFO - efficient_data_sampling:130 - RGB range: [32.00, 214.00]
2025-10-26 18:10:03,087 - src.data.sampling - INFO - efficient_data_sampling:131 - LAB ranges: L[12.16, 84.31], a[-2.00, 2.00], b[-2.00, 8.00]
2025-10-26 18:10:03,088 - src.models.dbn_trainer - INFO - train:65 - Training set: (640, 3), Test set: (160, 3)
2025-10-26 18:10:03,088 - src.models.dbn_trainer - INFO - _prepare_scalers:97 - Preparing and fitting scalers...
2025-10-26 18:10:03,091 - src.models.dbn_trainer - INFO - _prepare_scalers:116 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-26 18:10:03,092 - src.models.dbn_trainer - INFO - _prepare_scalers:117 - X range: [0.000, 1.000]
2025-10-26 18:10:03,092 - src.models.dbn_trainer - INFO - _prepare_scalers:118 - Y range: [0.000, 1.000]
2025-10-26 18:10:03,092 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-26 18:10:03,308 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-26 18:10:03,355 - src.models.dbn_trainer - INFO - train:76 - Initial model has 20 weight layers
2025-10-26 18:10:03,356 - src.models.dbn_trainer - INFO - train:78 - Layer 0: shape (3, 100), range [-0.239, 0.241]
2025-10-26 18:10:03,356 - src.models.dbn_trainer - INFO - train:78 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-26 18:10:03,357 - src.models.dbn_trainer - INFO - train:78 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-26 18:10:03,357 - src.models.dbn_trainer - INFO - train:78 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-26 18:10:03,357 - src.models.dbn_trainer - INFO - train:78 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-26 18:10:03,358 - src.models.dbn_trainer - INFO - train:78 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-26 18:10:03,358 - src.models.dbn_trainer - INFO - train:78 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-26 18:10:03,358 - src.models.dbn_trainer - INFO - train:78 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-26 18:10:03,359 - src.models.dbn_trainer - INFO - train:78 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-26 18:10:03,359 - src.models.dbn_trainer - INFO - train:78 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-26 18:10:03,360 - src.models.dbn_trainer - INFO - train:78 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-26 18:10:03,360 - src.models.dbn_trainer - INFO - train:78 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-26 18:10:03,361 - src.models.dbn_trainer - INFO - train:78 - Layer 12: shape (50, 25), range [-0.282, 0.282]
2025-10-26 18:10:03,361 - src.models.dbn_trainer - INFO - train:78 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-26 18:10:03,361 - src.models.dbn_trainer - INFO - train:78 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-26 18:10:03,362 - src.models.dbn_trainer - INFO - train:78 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-26 18:10:03,362 - src.models.dbn_trainer - INFO - train:78 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-26 18:10:03,363 - src.models.dbn_trainer - INFO - train:78 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-26 18:10:03,363 - src.models.dbn_trainer - INFO - train:78 - Layer 18: shape (25, 3), range [-0.448, 0.455]
2025-10-26 18:10:03,364 - src.models.dbn_trainer - INFO - train:78 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-26 18:10:03,364 - src.models.dbn_trainer - INFO - _run_pso_with_retries:127 - PSO optimization attempt 1/3
2025-10-26 18:10:03,365 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-26 18:12:15,715 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 132.34s - Final fitness: 0.016664
2025-10-26 18:12:15,716 - src.models.dbn_trainer - INFO - _run_pso_with_retries:142 - PSO optimization completed successfully
2025-10-26 18:12:15,723 - src.models.dbn_trainer - INFO - train:84 - DBN training and PSO optimization complete.
2025-10-26 18:12:15,723 - src.pipeline - INFO - _train_dbn_model:164 - DBN training and scaling complete
2025-10-26 18:12:15,727 - src.pipeline - INFO - timer:48 - Completed: DBN Training in  138.00 seconds
2025-10-26 18:12:15,728 - src.pipeline - INFO - timer:43 - Starting: Reference Image Processing...
2025-10-26 18:12:15,729 - src.pipeline - INFO - _run_reference_processing:182 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-26 18:12:17,336 - root - INFO - save_reference_image:79 - Saved reference image copy to datasets\block\inputs\reference_image\reference.png
2025-10-26 18:12:17,336 - src.data.preprocess - DEBUG - __init__:45 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, max_colors=8, edge_enhance=False, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000)
2025-10-26 18:12:17,336 - src.data.preprocess - INFO - preprocess:137 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-26 18:12:17,370 - src.data.preprocess - INFO - preprocess:150 - Initial resize from 4480x4480 to 512x512
2025-10-26 18:12:18,718 - src.data.preprocess - INFO - preprocess:154 - Applied non-local means denoising with h=10
2025-10-26 18:12:19,097 - src.data.preprocess - INFO - estimate_n_colors:61 - Estimated 299 unique colors, setting n_colors to 8 (max_colors=8)
2025-10-26 18:12:19,105 - src.data.preprocess - DEBUG - quantize_image:77 - Subsampled pixels for K-means fit: (10000, 3)
2025-10-26 18:12:19,858 - src.data.preprocess - INFO - quantize_image:103 - Quantized to 8 target colors. Final unique colors: 8
2025-10-26 18:12:19,860 - src.data.preprocess - INFO - preprocess:173 - Resized to target size (128, 128)
2025-10-26 18:12:19,860 - src.data.preprocess - INFO - preprocess:175 - Preprocessing completed
2025-10-26 18:12:19,861 - src.models.segmentation.reference - INFO - segment_reference_image:58 - Starting reference image segmentation (K-Means & SOM)...
2025-10-26 18:12:19,861 - src.models.segmentation.reference - INFO - segment_reference_image:77 - Determining optimal number of clusters for reference image...
2025-10-26 18:12:19,862 - src.models.segmentation.reference - WARNING - segment_reference_image:100 - Could not quantize image for k-determination: 'SegmentationConfig' object has no attribute 'quantization_colors'. Using original pixels.
2025-10-26 18:12:19,878 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 151. Adjusted k-range: [2, 3]
2025-10-26 18:12:19,879 - src.models.segmentation.strategy - INFO - determine_k:69 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-26 18:12:19,880 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=2 for cluster metrics...
2025-10-26 18:12:21,841 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=3 for cluster metrics...
2025-10-26 18:12:23,722 - src.models.segmentation.strategy - INFO - determine_k:126 - Optimal k determined: 2 (score: 1.000)
2025-10-26 18:12:23,722 - src.models.segmentation.reference - INFO - segment_reference_image:105 - Optimal clusters determined for reference: 2
2025-10-26 18:12:23,723 - src.models.segmentation.reference - INFO - timer:182 - Starting: Reference K-Means (k=2)...
2025-10-26 18:12:23,723 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 18:12:23,724 - src.models.segmentation.kmeans - ERROR - segment:112 - Error during KMeans segmentation (kmeans_predef): 'SegmentationConfig' object has no attribute 'quantization_colors'
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\models\segmentation\kmeans.py", line 58, in segment
    quantized_img = self.quantize_image()
  File "C:\Users\LENOVO\Desktop\prints\src\models\segmentation\base.py", line 193, in quantize_image
    n_colors = self.config.quantization_colors # <-- Config'den al
AttributeError: 'SegmentationConfig' object has no attribute 'quantization_colors'
2025-10-26 18:12:23,726 - src.models.segmentation.reference - ERROR - segment_reference_image:145 - Reference K-Means segmentation failed or produced invalid result.
2025-10-26 18:12:23,727 - src.models.segmentation.reference - INFO - timer:187 - Completed: Reference K-Means (k=2) in 0.00 seconds
2025-10-26 18:12:23,727 - src.models.segmentation.reference - INFO - timer:182 - Starting: Reference SOM (k=2)...
2025-10-26 18:12:23,728 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 18:12:23,728 - src.models.segmentation.som - ERROR - segment:126 - Error during SOM segmentation (som_predef): 'SegmentationConfig' object has no attribute 'quantization_colors'
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\models\segmentation\som.py", line 57, in segment
    quantized_img = self.quantize_image()
  File "C:\Users\LENOVO\Desktop\prints\src\models\segmentation\base.py", line 193, in quantize_image
    n_colors = self.config.quantization_colors # <-- Config'den al
AttributeError: 'SegmentationConfig' object has no attribute 'quantization_colors'
2025-10-26 18:12:23,731 - src.models.segmentation.reference - ERROR - segment_reference_image:159 - Reference SOM segmentation failed or produced invalid result.
2025-10-26 18:12:23,731 - src.models.segmentation.reference - INFO - timer:187 - Completed: Reference SOM (k=2) in 0.00 seconds
2025-10-26 18:12:23,731 - src.models.segmentation.reference - INFO - segment_reference_image:171 - Reference segmentation finished in 3.87 seconds.
2025-10-26 18:12:24,926 - root - INFO - save_reference_summary:181 - Reference summary (placeholder) saved to datasets\block\summaries\reference_summary.png
2025-10-26 18:12:24,927 - src.pipeline - INFO - timer:48 - Completed: Reference Image Processing in  9.20 seconds
2025-10-26 18:12:24,927 - src.pipeline - INFO - timer:48 - Completed: Total Pipeline in  147.20 seconds
2025-10-26 18:12:24,928 - src.pipeline - CRITICAL - run:132 - Pipeline failed critically: Reference K-Means segmentation failed, cannot extract target colors.
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 113, in run
    target_colors_lab, ref_kmeans_result, ref_som_result = self._run_reference_processing()
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 227, in _run_reference_processing
    raise ValueError("Reference K-Means segmentation failed, cannot extract target colors.")
ValueError: Reference K-Means segmentation failed, cannot extract target colors.
2025-10-26 18:12:24,930 - root - CRITICAL - main:72 - An unexpected error occurred in main execution: Reference K-Means segmentation failed, cannot extract target colors.
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\main.py", line 68, in main
    pipeline.run()
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 113, in run
    target_colors_lab, ref_kmeans_result, ref_som_result = self._run_reference_processing()
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 227, in _run_reference_processing
    raise ValueError("Reference K-Means segmentation failed, cannot extract target colors.")
ValueError: Reference K-Means segmentation failed, cannot extract target colors.
2025-10-26 18:12:24,937 - root - INFO - main:75 - ================================================================================
PROCESSING COMPLETED IN 147.24 SECONDS
================================================================================
2025-10-26 18:43:16,442 - root - INFO - setup_logging:82 - Logging setup complete. Level: INFO. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-26 18:43:16,442 - src.pipeline - INFO - _load_and_validate_config:86 - loading the config from: C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml
2025-10-26 18:43:16,448 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from C:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-26 18:43:16,451 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-26 18:43:16,451 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-26 18:43:16,452 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-26 18:43:16,452 - src.utils.setup - DEBUG - validate_processing_config:110 - Entering configuration validation...
2025-10-26 18:43:16,453 - src.utils.setup - DEBUG - validate_processing_config:151 - Reference image path validated: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-26 18:43:16,455 - src.utils.setup - DEBUG - validate_processing_config:171 - Validated 5 test image paths.
2025-10-26 18:43:16,455 - src.utils.setup - INFO - validate_processing_config:189 - Configuration validation passed successfully.
2025-10-26 18:43:16,458 - src.utils.output_manager - INFO - __init__:24 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-26 18:43:16,458 - src.pipeline - INFO - _load_and_validate_config:97 - OutputManager intialized for dataset: block
2025-10-26 18:43:16,458 - src.pipeline - INFO - run:102 - ==================================================
2025-10-26 18:43:16,459 - src.pipeline - INFO - run:103 - Processing Pipeline RUN starting for dataset: block
2025-10-26 18:43:16,460 - src.pipeline - INFO - run:104 - ==================================================
2025-10-26 18:43:16,460 - src.pipeline - INFO - timer:43 - Starting: Total Pipeline...
2025-10-26 18:43:16,460 - src.pipeline - INFO - timer:43 - Starting: DBN Training...
2025-10-26 18:43:16,461 - src.pipeline - INFO - _train_dbn_model:140 - loading images to generate training data...
2025-10-26 18:43:17,099 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-26 18:43:17,932 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-26 18:43:18,381 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-26 18:43:18,873 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-26 18:43:19,378 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-26 18:43:19,378 - src.pipeline - INFO - _train_dbn_model:152 - loading and processing 5 images into training data...
2025-10-26 18:43:19,379 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-26 18:43:21,246 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-26 18:43:21,247 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-26 18:43:21,250 - src.pipeline - INFO - _train_dbn_model:160 - initializing DBNTrainer (Samples  = 800...)
2025-10-26 18:43:21,251 - src.models.dbn_trainer - INFO - __init__:36 - DBNTrainer initialized.
2025-10-26 18:43:21,251 - src.models.dbn_trainer - INFO - train:52 - Starting DBN training and PSO optimization process...
2025-10-26 18:43:21,251 - src.data.sampling - INFO - efficient_data_sampling:53 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-26 18:43:21,252 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 1
2025-10-26 18:43:21,253 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 2
2025-10-26 18:43:21,253 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 3
2025-10-26 18:43:21,254 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 4
2025-10-26 18:43:21,254 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 5
2025-10-26 18:43:21,255 - src.data.sampling - INFO - efficient_data_sampling:129 - Sampling completed: 800 samples extracted.
2025-10-26 18:43:21,255 - src.data.sampling - INFO - efficient_data_sampling:130 - RGB range: [31.00, 213.00]
2025-10-26 18:43:21,256 - src.data.sampling - INFO - efficient_data_sampling:131 - LAB ranges: L[11.76, 84.31], a[-2.00, 3.00], b[-1.00, 9.00]
2025-10-26 18:43:21,257 - src.models.dbn_trainer - INFO - train:65 - Training set: (640, 3), Test set: (160, 3)
2025-10-26 18:43:21,258 - src.models.dbn_trainer - INFO - _prepare_scalers:97 - Preparing and fitting scalers...
2025-10-26 18:43:21,262 - src.models.dbn_trainer - INFO - _prepare_scalers:116 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-26 18:43:21,263 - src.models.dbn_trainer - INFO - _prepare_scalers:117 - X range: [0.000, 1.000]
2025-10-26 18:43:21,263 - src.models.dbn_trainer - INFO - _prepare_scalers:118 - Y range: [0.000, 1.000]
2025-10-26 18:43:21,263 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-26 18:43:21,476 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-26 18:43:21,558 - src.models.dbn_trainer - INFO - train:76 - Initial model has 20 weight layers
2025-10-26 18:43:21,558 - src.models.dbn_trainer - INFO - train:78 - Layer 0: shape (3, 100), range [-0.241, 0.240]
2025-10-26 18:43:21,559 - src.models.dbn_trainer - INFO - train:78 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-26 18:43:21,559 - src.models.dbn_trainer - INFO - train:78 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-26 18:43:21,559 - src.models.dbn_trainer - INFO - train:78 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-26 18:43:21,560 - src.models.dbn_trainer - INFO - train:78 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-26 18:43:21,560 - src.models.dbn_trainer - INFO - train:78 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-26 18:43:21,560 - src.models.dbn_trainer - INFO - train:78 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-26 18:43:21,561 - src.models.dbn_trainer - INFO - train:78 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-26 18:43:21,561 - src.models.dbn_trainer - INFO - train:78 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-26 18:43:21,561 - src.models.dbn_trainer - INFO - train:78 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-26 18:43:21,562 - src.models.dbn_trainer - INFO - train:78 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-26 18:43:21,562 - src.models.dbn_trainer - INFO - train:78 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-26 18:43:21,562 - src.models.dbn_trainer - INFO - train:78 - Layer 12: shape (50, 25), range [-0.283, 0.282]
2025-10-26 18:43:21,563 - src.models.dbn_trainer - INFO - train:78 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-26 18:43:21,563 - src.models.dbn_trainer - INFO - train:78 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-26 18:43:21,563 - src.models.dbn_trainer - INFO - train:78 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-26 18:43:21,564 - src.models.dbn_trainer - INFO - train:78 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-26 18:43:21,564 - src.models.dbn_trainer - INFO - train:78 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-26 18:43:21,565 - src.models.dbn_trainer - INFO - train:78 - Layer 18: shape (25, 3), range [-0.457, 0.435]
2025-10-26 18:43:21,565 - src.models.dbn_trainer - INFO - train:78 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-26 18:43:21,565 - src.models.dbn_trainer - INFO - _run_pso_with_retries:127 - PSO optimization attempt 1/3
2025-10-26 18:43:21,566 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-26 18:45:20,194 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 118.62s - Final fitness: 0.052036
2025-10-26 18:45:20,195 - src.models.dbn_trainer - INFO - _run_pso_with_retries:142 - PSO optimization completed successfully
2025-10-26 18:45:20,201 - src.models.dbn_trainer - INFO - train:84 - DBN training and PSO optimization complete.
2025-10-26 18:45:20,201 - src.pipeline - INFO - _train_dbn_model:164 - DBN training and scaling complete
2025-10-26 18:45:20,205 - src.pipeline - INFO - timer:48 - Completed: DBN Training in  123.74 seconds
2025-10-26 18:45:20,205 - src.pipeline - INFO - timer:43 - Starting: Reference Image Processing...
2025-10-26 18:45:20,206 - src.pipeline - INFO - _run_reference_processing:182 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-26 18:45:21,757 - root - INFO - save_reference_image:79 - Saved reference image copy to datasets\block\inputs\reference_image\reference.png
2025-10-26 18:45:21,758 - src.data.preprocess - DEBUG - __init__:45 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, max_colors=8, edge_enhance=False, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000)
2025-10-26 18:45:21,758 - src.data.preprocess - INFO - preprocess:165 - Starting preprocessing for image with shape: (4480, 4480, 3)
2025-10-26 18:45:21,789 - src.data.preprocess - INFO - preprocess:178 - Initial resize from 4480x4480 to 512x512
2025-10-26 18:45:23,107 - src.data.preprocess - INFO - preprocess:182 - Applied non-local means denoising with h=10
2025-10-26 18:45:23,108 - src.data.preprocess - ERROR - wrapper:16 - Error in quantize_image: 'Preprocessor' object has no attribute 'config'
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\data\preprocess.py", line 13, in wrapper
    return func(*args, **kwargs)
  File "C:\Users\LENOVO\Desktop\prints\src\data\preprocess.py", line 81, in quantize_image
    n_colors = self.config.quantization_colors # <-- Config'den al
AttributeError: 'Preprocessor' object has no attribute 'config'
2025-10-26 18:45:23,110 - src.data.preprocess - ERROR - preprocess:190 - Color quantization failed.
2025-10-26 18:45:23,110 - src.pipeline - ERROR - _run_reference_processing:200 - Preprocessing failed for reference image: Preprocessing returned None for reference image.
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 196, in _run_reference_processing
    raise ValueError("Preprocessing returned None for reference image.")
ValueError: Preprocessing returned None for reference image.
2025-10-26 18:45:23,112 - src.pipeline - INFO - timer:48 - Completed: Reference Image Processing in  2.91 seconds
2025-10-26 18:45:23,112 - src.pipeline - INFO - timer:48 - Completed: Total Pipeline in  126.65 seconds
2025-10-26 18:45:23,113 - src.pipeline - CRITICAL - run:132 - Pipeline failed critically: Preprocessing failed for reference: Preprocessing returned None for reference image.
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 196, in _run_reference_processing
    raise ValueError("Preprocessing returned None for reference image.")
ValueError: Preprocessing returned None for reference image.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 113, in run
    target_colors_lab, ref_kmeans_result, ref_som_result = self._run_reference_processing()
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 201, in _run_reference_processing
    raise ValueError(f"Preprocessing failed for reference: {e}")
ValueError: Preprocessing failed for reference: Preprocessing returned None for reference image.
2025-10-26 18:45:23,115 - root - CRITICAL - main:72 - An unexpected error occurred in main execution: Preprocessing failed for reference: Preprocessing returned None for reference image.
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 196, in _run_reference_processing
    raise ValueError("Preprocessing returned None for reference image.")
ValueError: Preprocessing returned None for reference image.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\main.py", line 68, in main
    pipeline.run()
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 113, in run
    target_colors_lab, ref_kmeans_result, ref_som_result = self._run_reference_processing()
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 201, in _run_reference_processing
    raise ValueError(f"Preprocessing failed for reference: {e}")
ValueError: Preprocessing failed for reference: Preprocessing returned None for reference image.
2025-10-26 18:45:23,127 - root - INFO - main:75 - ================================================================================
PROCESSING COMPLETED IN 126.69 SECONDS
================================================================================
2025-10-26 19:05:45,246 - root - INFO - setup_logging:82 - Logging setup complete. Level: INFO. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-26 19:05:45,246 - src.pipeline - INFO - _load_and_validate_config:86 - loading the config from: C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml
2025-10-26 19:05:45,253 - src.data.load_data - INFO - load_config:51 - Loaded default configuration from C:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-26 19:05:45,256 - src.data.load_data - INFO - load_config:61 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-26 19:05:45,257 - src.data.load_data - INFO - load_config:66 - Merged specific configuration over defaults.
2025-10-26 19:05:45,257 - src.data.load_data - INFO - load_config:77 - Configuration loaded successfully.
2025-10-26 19:05:45,258 - src.utils.setup - DEBUG - validate_processing_config:110 - Entering configuration validation...
2025-10-26 19:05:45,258 - src.utils.setup - DEBUG - validate_processing_config:151 - Reference image path validated: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-26 19:05:45,260 - src.utils.setup - DEBUG - validate_processing_config:171 - Validated 5 test image paths.
2025-10-26 19:05:45,260 - src.utils.setup - INFO - validate_processing_config:189 - Configuration validation passed successfully.
2025-10-26 19:05:45,262 - src.utils.output_manager - INFO - __init__:24 - OutputManager initialized for dataset 'block' at C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-26 19:05:45,262 - src.pipeline - INFO - _load_and_validate_config:97 - OutputManager intialized for dataset: block
2025-10-26 19:05:45,263 - src.pipeline - INFO - run:102 - ==================================================
2025-10-26 19:05:45,264 - src.pipeline - INFO - run:103 - Processing Pipeline RUN starting for dataset: block
2025-10-26 19:05:45,264 - src.pipeline - INFO - run:104 - ==================================================
2025-10-26 19:05:45,265 - src.pipeline - INFO - timer:43 - Starting: Total Pipeline...
2025-10-26 19:05:45,265 - src.pipeline - INFO - timer:43 - Starting: DBN Training...
2025-10-26 19:05:45,266 - src.pipeline - INFO - _train_dbn_model:140 - loading images to generate training data...
2025-10-26 19:05:45,900 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block1.jpg
2025-10-26 19:05:46,714 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block2.jpg
2025-10-26 19:05:47,160 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block3.jpg
2025-10-26 19:05:47,659 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block4.jpg
2025-10-26 19:05:48,157 - root - INFO - save_test_image:89 - Saved test image copy to datasets\block\inputs\test_images\block5.jpg
2025-10-26 19:05:48,158 - src.pipeline - INFO - _train_dbn_model:152 - loading and processing 5 images into training data...
2025-10-26 19:05:48,158 - src.data.load_data - INFO - load_data:150 - Processing 5 images for training data...
2025-10-26 19:05:50,022 - src.data.load_data - INFO - load_data:184 - Successfully loaded and processed 5/5 images.
2025-10-26 19:05:50,023 - src.data.load_data - INFO - load_data:185 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-26 19:05:50,026 - src.pipeline - INFO - _train_dbn_model:160 - initializing DBNTrainer (Samples  = 800...)
2025-10-26 19:05:50,027 - src.models.dbn_trainer - INFO - __init__:36 - DBNTrainer initialized.
2025-10-26 19:05:50,027 - src.models.dbn_trainer - INFO - train:52 - Starting DBN training and PSO optimization process...
2025-10-26 19:05:50,028 - src.data.sampling - INFO - efficient_data_sampling:53 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-26 19:05:50,029 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 1
2025-10-26 19:05:50,029 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 2
2025-10-26 19:05:50,029 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 3
2025-10-26 19:05:50,030 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 4
2025-10-26 19:05:50,030 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 5
2025-10-26 19:05:50,031 - src.data.sampling - INFO - efficient_data_sampling:129 - Sampling completed: 800 samples extracted.
2025-10-26 19:05:50,031 - src.data.sampling - INFO - efficient_data_sampling:130 - RGB range: [31.00, 213.00]
2025-10-26 19:05:50,032 - src.data.sampling - INFO - efficient_data_sampling:131 - LAB ranges: L[11.76, 84.31], a[-2.00, 2.00], b[-1.00, 9.00]
2025-10-26 19:05:50,033 - src.models.dbn_trainer - INFO - train:65 - Training set: (640, 3), Test set: (160, 3)
2025-10-26 19:05:50,034 - src.models.dbn_trainer - INFO - _prepare_scalers:97 - Preparing and fitting scalers...
2025-10-26 19:05:50,036 - src.models.dbn_trainer - INFO - _prepare_scalers:116 - Scaled training data - X: (640, 3), Y: (640, 3)
2025-10-26 19:05:50,037 - src.models.dbn_trainer - INFO - _prepare_scalers:117 - X range: [0.000, 1.000]
2025-10-26 19:05:50,037 - src.models.dbn_trainer - INFO - _prepare_scalers:118 - Y range: [0.000, 1.000]
2025-10-26 19:05:50,038 - src.models.pso_dbn - INFO - __init__:89 - Initializing DBN with architecture: 3 -> [100, 50, 25] -> 3
2025-10-26 19:05:50,234 - src.models.pso_dbn - INFO - _build_model:141 - DBN model built with 7503 parameters
2025-10-26 19:05:50,278 - src.models.dbn_trainer - INFO - train:76 - Initial model has 20 weight layers
2025-10-26 19:05:50,279 - src.models.dbn_trainer - INFO - train:78 - Layer 0: shape (3, 100), range [-0.239, 0.241]
2025-10-26 19:05:50,279 - src.models.dbn_trainer - INFO - train:78 - Layer 1: shape (100,), range [0.000, 0.000]
2025-10-26 19:05:50,279 - src.models.dbn_trainer - INFO - train:78 - Layer 2: shape (100,), range [1.000, 1.000]
2025-10-26 19:05:50,280 - src.models.dbn_trainer - INFO - train:78 - Layer 3: shape (100,), range [0.000, 0.000]
2025-10-26 19:05:50,280 - src.models.dbn_trainer - INFO - train:78 - Layer 4: shape (100,), range [0.000, 0.000]
2025-10-26 19:05:50,281 - src.models.dbn_trainer - INFO - train:78 - Layer 5: shape (100,), range [1.000, 1.000]
2025-10-26 19:05:50,281 - src.models.dbn_trainer - INFO - train:78 - Layer 6: shape (100, 50), range [-0.200, 0.200]
2025-10-26 19:05:50,281 - src.models.dbn_trainer - INFO - train:78 - Layer 7: shape (50,), range [0.000, 0.000]
2025-10-26 19:05:50,281 - src.models.dbn_trainer - INFO - train:78 - Layer 8: shape (50,), range [1.000, 1.000]
2025-10-26 19:05:50,282 - src.models.dbn_trainer - INFO - train:78 - Layer 9: shape (50,), range [0.000, 0.000]
2025-10-26 19:05:50,282 - src.models.dbn_trainer - INFO - train:78 - Layer 10: shape (50,), range [0.000, 0.000]
2025-10-26 19:05:50,282 - src.models.dbn_trainer - INFO - train:78 - Layer 11: shape (50,), range [1.000, 1.000]
2025-10-26 19:05:50,282 - src.models.dbn_trainer - INFO - train:78 - Layer 12: shape (50, 25), range [-0.283, 0.283]
2025-10-26 19:05:50,283 - src.models.dbn_trainer - INFO - train:78 - Layer 13: shape (25,), range [0.000, 0.000]
2025-10-26 19:05:50,283 - src.models.dbn_trainer - INFO - train:78 - Layer 14: shape (25,), range [1.000, 1.000]
2025-10-26 19:05:50,284 - src.models.dbn_trainer - INFO - train:78 - Layer 15: shape (25,), range [0.000, 0.000]
2025-10-26 19:05:50,284 - src.models.dbn_trainer - INFO - train:78 - Layer 16: shape (25,), range [0.000, 0.000]
2025-10-26 19:05:50,284 - src.models.dbn_trainer - INFO - train:78 - Layer 17: shape (25,), range [1.000, 1.000]
2025-10-26 19:05:50,285 - src.models.dbn_trainer - INFO - train:78 - Layer 18: shape (25, 3), range [-0.447, 0.454]
2025-10-26 19:05:50,285 - src.models.dbn_trainer - INFO - train:78 - Layer 19: shape (3,), range [0.000, 0.000]
2025-10-26 19:05:50,285 - src.models.dbn_trainer - INFO - _run_pso_with_retries:127 - PSO optimization attempt 1/3
2025-10-26 19:05:50,286 - src.models.pso_dbn - INFO - optimize:253 - Starting PSO optimization with config: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-26 19:07:50,318 - src.models.pso_dbn - INFO - optimize:326 - PSO optimization completed in 120.03s - Final fitness: 0.035296
2025-10-26 19:07:50,319 - src.models.dbn_trainer - INFO - _run_pso_with_retries:142 - PSO optimization completed successfully
2025-10-26 19:07:50,324 - src.models.dbn_trainer - INFO - train:84 - DBN training and PSO optimization complete.
2025-10-26 19:07:50,325 - src.pipeline - INFO - _train_dbn_model:164 - DBN training and scaling complete
2025-10-26 19:07:50,328 - src.pipeline - INFO - timer:48 - Completed: DBN Training in  125.06 seconds
2025-10-26 19:07:50,329 - src.pipeline - INFO - timer:43 - Starting: Reference Image Processing...
2025-10-26 19:07:50,329 - src.pipeline - INFO - _run_reference_processing:182 - Processing reference image: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-26 19:07:51,883 - root - INFO - save_reference_image:79 - Saved reference image copy to datasets\block\inputs\reference_image\reference.png
2025-10-26 19:07:51,884 - src.data.preprocess - DEBUG - __init__:51 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-26 19:07:51,884 - src.data.preprocess - INFO - preprocess:219 - Starting preprocessing pipeline for image with shape: (4480, 4480, 3)
2025-10-26 19:07:51,913 - src.data.preprocess - INFO - preprocess:231 - Initial resize from 4480x4480 to 512x512
2025-10-26 19:07:53,159 - src.data.preprocess - INFO - preprocess:239 - Applied non-local means denoising with h=10
2025-10-26 19:07:53,159 - src.data.preprocess - DEBUG - unsharp_mask:201 - Unsharp mask amount is zero or less, skipping.
2025-10-26 19:07:53,159 - src.data.preprocess - DEBUG - _estimate_n_colors:75 - Subsampling pixels (262144) for unique color estimation.
2025-10-26 19:07:53,234 - src.data.preprocess - INFO - _estimate_n_colors:84 - Estimated 243 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-26 19:07:53,235 - src.data.preprocess - INFO - quantize_image:116 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-26 19:07:53,236 - src.data.preprocess - DEBUG - quantize_image:137 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-26 19:07:54,068 - src.data.preprocess - INFO - quantize_image:157 - Quantization complete. Final unique colors: 50 (target was 50)
2025-10-26 19:07:54,070 - src.data.preprocess - INFO - preprocess:262 - Final resize to target size (128, 128)
2025-10-26 19:07:54,071 - src.data.preprocess - INFO - preprocess:267 - Preprocessing pipeline completed successfully.
2025-10-26 19:07:54,071 - src.models.segmentation.reference - INFO - segment_reference_image:78 - Starting reference image segmentation (K-Means & SOM)...
2025-10-26 19:07:54,071 - src.models.segmentation.reference - INFO - segment_reference_image:95 - Determining optimal number of clusters for reference image...
2025-10-26 19:07:54,072 - src.models.segmentation.reference - INFO - segment_reference_image:113 - Subsampling 16384 pixels to 10000 for reference k-determination
2025-10-26 19:07:54,082 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 246. Adjusted k-range: [2, 3]
2025-10-26 19:07:54,083 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=2 for cluster metrics...
2025-10-26 19:07:55,908 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=3 for cluster metrics...
2025-10-26 19:07:57,676 - src.models.segmentation.strategy - INFO - determine_k:126 - Optimal k determined: 2 (score: 1.000)
2025-10-26 19:07:57,676 - src.models.segmentation.reference - INFO - segment_reference_image:120 - Optimal clusters determined for reference: 2
2025-10-26 19:07:57,676 - src.models.segmentation.reference - INFO - timer:36 - Starting: Reference K-Means (k=2)...
2025-10-26 19:07:57,677 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 19:07:57,677 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-26 19:07:57,685 - src.models.segmentation.reference - INFO - timer:41 - Completed: Reference K-Means (k=2) in 0.01 seconds
2025-10-26 19:07:57,686 - src.models.segmentation.reference - INFO - timer:36 - Starting: Reference SOM (k=2)...
2025-10-26 19:07:57,686 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 19:07:57,686 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-26 19:07:57,993 - src.models.segmentation.reference - INFO - timer:41 - Completed: Reference SOM (k=2) in 0.31 seconds
2025-10-26 19:07:57,993 - src.models.segmentation.reference - INFO - segment_reference_image:179 - Reference segmentation (KMeans, SOM, k-determination) finished in 3.92 seconds.
2025-10-26 19:07:59,150 - root - INFO - save_reference_summary:181 - Reference summary (placeholder) saved to datasets\block\summaries\reference_summary.png
2025-10-26 19:07:59,150 - src.pipeline - INFO - _run_reference_processing:238 - Reference processed. Target LAB colors shape: (2, 3), Determined k: 2
2025-10-26 19:07:59,156 - src.pipeline - INFO - timer:48 - Completed: Reference Image Processing in  8.83 seconds
2025-10-26 19:07:59,156 - src.pipeline - INFO - timer:43 - Starting: Test Image Analysis Loop...
2025-10-26 19:07:59,156 - src.pipeline - INFO - _run_test_image_analysis:252 - Starting test image analysis loop...
2025-10-26 19:07:59,157 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block1 ---
2025-10-26 19:07:59,451 - root - DEBUG - set_current_image_stem:61 - Current image stem set to: block1
2025-10-26 19:07:59,451 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block1...
2025-10-26 19:07:59,452 - src.data.preprocess - DEBUG - __init__:51 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-26 19:07:59,452 - src.data.preprocess - INFO - preprocess:219 - Starting preprocessing pipeline for image with shape: (3950, 3950, 3)
2025-10-26 19:07:59,474 - src.data.preprocess - INFO - preprocess:231 - Initial resize from 3950x3950 to 512x512
2025-10-26 19:08:00,748 - src.data.preprocess - INFO - preprocess:239 - Applied non-local means denoising with h=10
2025-10-26 19:08:00,749 - src.data.preprocess - DEBUG - unsharp_mask:201 - Unsharp mask amount is zero or less, skipping.
2025-10-26 19:08:00,749 - src.data.preprocess - DEBUG - _estimate_n_colors:75 - Subsampling pixels (262144) for unique color estimation.
2025-10-26 19:08:00,814 - src.data.preprocess - INFO - _estimate_n_colors:84 - Estimated 239 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-26 19:08:00,814 - src.data.preprocess - INFO - quantize_image:116 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-26 19:08:00,816 - src.data.preprocess - DEBUG - quantize_image:137 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-26 19:08:01,341 - src.data.preprocess - INFO - quantize_image:157 - Quantization complete. Final unique colors: 50 (target was 50)
2025-10-26 19:08:01,343 - src.data.preprocess - INFO - preprocess:262 - Final resize to target size (128, 128)
2025-10-26 19:08:01,343 - src.data.preprocess - INFO - preprocess:267 - Preprocessing pipeline completed successfully.
2025-10-26 19:08:01,345 - root - INFO - save_preprocessed_image:98 - Saved preprocessed image to datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-26 19:08:01,346 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block1) k_type: determined...
2025-10-26 19:08:01,346 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 19:08:01,346 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 19:08:01,347 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 19:08:01,347 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 19:08:01,347 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 19:08:01,347 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 19:08:01,348 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 19:08:01,348 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 19:08:01,348 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 19:08:01,348 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 19:08:01,348 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 19:08:01,349 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 19:08:01,349 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 19:08:01,349 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 19:08:01,349 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 19:08:01,349 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 19:08:01,349 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 19:08:01,349 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 19:08:01,350 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 19:08:01,350 - src.models.segmentation.kmeans - DEBUG - segment:61 - KMeans: Determining optimal k...
2025-10-26 19:08:01,369 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 355. Adjusted k-range: [2, 3]
2025-10-26 19:08:01,369 - src.models.segmentation.strategy - INFO - determine_k:69 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-26 19:08:01,370 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=2 for cluster metrics...
2025-10-26 19:08:03,183 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=3 for cluster metrics...
2025-10-26 19:08:05,017 - src.models.segmentation.strategy - INFO - determine_k:126 - Optimal k determined: 2 (score: 0.500)
2025-10-26 19:08:05,017 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-26 19:08:05,025 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 3.68s with 2 clusters.
2025-10-26 19:08:05,027 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (kmeans_opt) to: datasets\block\processed\segmented\kmeans_opt\block1_determined.png
2025-10-26 19:08:05,028 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 19:08:05,044 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 355. Adjusted k-range: [2, 3]
2025-10-26 19:08:05,045 - src.models.segmentation.strategy - INFO - determine_k:69 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-26 19:08:05,047 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=2 for cluster metrics...
2025-10-26 19:08:06,923 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=3 for cluster metrics...
2025-10-26 19:08:08,744 - src.models.segmentation.strategy - INFO - determine_k:126 - Optimal k determined: 2 (score: 0.500)
2025-10-26 19:08:08,745 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-26 19:08:09,055 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 4.03s with 2 clusters.
2025-10-26 19:08:09,057 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (som_opt) to: datasets\block\processed\segmented\som_opt\block1_determined.png
2025-10-26 19:08:09,057 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 19:08:09,058 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 19:08:52,177 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=15.0, min=10
2025-10-26 19:08:53,836 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 44.78s with 2 clusters.
2025-10-26 19:08:53,837 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block1_determined.png
2025-10-26 19:08:53,837 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 19:08:54,039 - src.pipeline - INFO - _process_single_test_image:392 - -> kmeans_opt (determined) on block1: Avg Delta E Traditional=1.72, Avg Delta E DBN=11.32, k=2
2025-10-26 19:08:54,134 - src.pipeline - INFO - _process_single_test_image:392 - -> som_opt (determined) on block1: Avg Delta E Traditional=10.84, Avg Delta E DBN=13.66, k=2
2025-10-26 19:08:54,228 - src.pipeline - INFO - _process_single_test_image:392 - -> dbscan (determined) on block1: Avg Delta E Traditional=1.61, Avg Delta E DBN=11.32, k=2
2025-10-26 19:08:54,228 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block1) k_type: determined in  52.88 seconds
2025-10-26 19:08:54,228 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block1) k_type: predefined...
2025-10-26 19:08:54,228 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 19:08:54,228 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 19:08:54,228 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 19:08:54,228 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 19:08:54,228 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 19:08:54,228 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 19:08:54,230 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 19:08:54,230 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 19:08:54,230 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 19:08:54,230 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 19:08:54,230 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 19:08:54,230 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 19:08:54,230 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 19:08:54,230 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 19:08:54,230 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 19:08:54,230 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 19:08:54,230 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 19:08:54,231 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 19:08:54,231 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 19:08:54,232 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-26 19:08:54,241 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.01s with 2 clusters.
2025-10-26 19:08:54,243 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (kmeans_predef) to: datasets\block\processed\segmented\kmeans_predef\block1_predefined.png
2025-10-26 19:08:54,243 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 19:08:54,244 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-26 19:08:54,563 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.32s with 2 clusters.
2025-10-26 19:08:54,564 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (som_predef) to: datasets\block\processed\segmented\som_predef\block1_predefined.png
2025-10-26 19:08:54,565 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 19:08:54,565 - src.models.segmentation.dbscan - INFO - segment:116 - Using predefined DBSCAN.
2025-10-26 19:08:56,346 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 1.78s with 1 clusters.
2025-10-26 19:08:56,348 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block1_predefined.png
2025-10-26 19:08:56,348 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 19:08:56,444 - src.pipeline - INFO - _process_single_test_image:392 - -> kmeans_predef (predefined) on block1: Avg Delta E Traditional=1.72, Avg Delta E DBN=11.32, k=2
2025-10-26 19:08:56,551 - src.pipeline - INFO - _process_single_test_image:392 - -> som_predef (predefined) on block1: Avg Delta E Traditional=10.84, Avg Delta E DBN=13.66, k=2
2025-10-26 19:08:56,654 - src.pipeline - INFO - _process_single_test_image:392 - -> dbscan (predefined) on block1: Avg Delta E Traditional=21.98, Avg Delta E DBN=16.67, k=1
2025-10-26 19:08:56,655 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block1) k_type: predefined in  2.43 seconds
2025-10-26 19:08:56,655 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block1 in  57.20 seconds
2025-10-26 19:08:56,655 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block2 ---
2025-10-26 19:08:57,044 - root - DEBUG - set_current_image_stem:61 - Current image stem set to: block2
2025-10-26 19:08:57,044 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block2...
2025-10-26 19:08:57,045 - src.data.preprocess - DEBUG - __init__:51 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-26 19:08:57,045 - src.data.preprocess - INFO - preprocess:219 - Starting preprocessing pipeline for image with shape: (4480, 4480, 3)
2025-10-26 19:08:57,077 - src.data.preprocess - INFO - preprocess:231 - Initial resize from 4480x4480 to 512x512
2025-10-26 19:08:58,303 - src.data.preprocess - INFO - preprocess:239 - Applied non-local means denoising with h=10
2025-10-26 19:08:58,304 - src.data.preprocess - DEBUG - unsharp_mask:201 - Unsharp mask amount is zero or less, skipping.
2025-10-26 19:08:58,304 - src.data.preprocess - DEBUG - _estimate_n_colors:75 - Subsampling pixels (262144) for unique color estimation.
2025-10-26 19:08:58,373 - src.data.preprocess - INFO - _estimate_n_colors:84 - Estimated 212 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-26 19:08:58,374 - src.data.preprocess - INFO - quantize_image:116 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-26 19:08:58,375 - src.data.preprocess - DEBUG - quantize_image:137 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-26 19:08:58,885 - src.data.preprocess - INFO - quantize_image:157 - Quantization complete. Final unique colors: 50 (target was 50)
2025-10-26 19:08:58,886 - src.data.preprocess - INFO - preprocess:262 - Final resize to target size (128, 128)
2025-10-26 19:08:58,887 - src.data.preprocess - INFO - preprocess:267 - Preprocessing pipeline completed successfully.
2025-10-26 19:08:58,888 - root - INFO - save_preprocessed_image:98 - Saved preprocessed image to datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-26 19:08:58,889 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block2) k_type: determined...
2025-10-26 19:08:58,889 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 19:08:58,889 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 19:08:58,889 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 19:08:58,889 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 19:08:58,890 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 19:08:58,890 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 19:08:58,890 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 19:08:58,890 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 19:08:58,890 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 19:08:58,891 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 19:08:58,891 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 19:08:58,891 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 19:08:58,891 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 19:08:58,891 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 19:08:58,891 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 19:08:58,891 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 19:08:58,892 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 19:08:58,892 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 19:08:58,893 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 19:08:58,893 - src.models.segmentation.kmeans - DEBUG - segment:61 - KMeans: Determining optimal k...
2025-10-26 19:08:58,909 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 323. Adjusted k-range: [2, 3]
2025-10-26 19:08:58,910 - src.models.segmentation.strategy - INFO - determine_k:69 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-26 19:08:58,911 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=2 for cluster metrics...
2025-10-26 19:09:00,720 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=3 for cluster metrics...
2025-10-26 19:09:02,546 - src.models.segmentation.strategy - INFO - determine_k:126 - Optimal k determined: 2 (score: 1.000)
2025-10-26 19:09:02,547 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-26 19:09:02,556 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 3.66s with 2 clusters.
2025-10-26 19:09:02,558 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (kmeans_opt) to: datasets\block\processed\segmented\kmeans_opt\block2_determined.png
2025-10-26 19:09:02,558 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 19:09:02,576 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 323. Adjusted k-range: [2, 3]
2025-10-26 19:09:02,576 - src.models.segmentation.strategy - INFO - determine_k:69 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-26 19:09:02,577 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=2 for cluster metrics...
2025-10-26 19:09:04,377 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=3 for cluster metrics...
2025-10-26 19:09:06,181 - src.models.segmentation.strategy - INFO - determine_k:126 - Optimal k determined: 2 (score: 0.500)
2025-10-26 19:09:06,182 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-26 19:09:06,499 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 3.94s with 2 clusters.
2025-10-26 19:09:06,501 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (som_opt) to: datasets\block\processed\segmented\som_opt\block2_determined.png
2025-10-26 19:09:06,501 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 19:09:06,501 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 19:09:45,005 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=15.0, min=20
2025-10-26 19:09:46,835 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 40.33s with 2 clusters.
2025-10-26 19:09:46,840 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block2_determined.png
2025-10-26 19:09:46,840 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 19:09:46,940 - src.pipeline - INFO - _process_single_test_image:392 - -> kmeans_opt (determined) on block2: Avg Delta E Traditional=1.89, Avg Delta E DBN=11.73, k=2
2025-10-26 19:09:47,033 - src.pipeline - INFO - _process_single_test_image:392 - -> som_opt (determined) on block2: Avg Delta E Traditional=7.08, Avg Delta E DBN=12.82, k=2
2025-10-26 19:09:47,125 - src.pipeline - INFO - _process_single_test_image:392 - -> dbscan (determined) on block2: Avg Delta E Traditional=1.92, Avg Delta E DBN=11.69, k=2
2025-10-26 19:09:47,126 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block2) k_type: determined in  48.24 seconds
2025-10-26 19:09:47,126 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block2) k_type: predefined...
2025-10-26 19:09:47,127 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 19:09:47,127 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 19:09:47,127 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 19:09:47,127 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 19:09:47,127 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 19:09:47,127 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 19:09:47,127 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 19:09:47,128 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 19:09:47,128 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 19:09:47,128 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 19:09:47,128 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 19:09:47,128 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 19:09:47,128 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 19:09:47,129 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 19:09:47,129 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 19:09:47,129 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 19:09:47,129 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 19:09:47,129 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 19:09:47,130 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 19:09:47,130 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-26 19:09:47,140 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.01s with 2 clusters.
2025-10-26 19:09:47,142 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (kmeans_predef) to: datasets\block\processed\segmented\kmeans_predef\block2_predefined.png
2025-10-26 19:09:47,143 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 19:09:47,143 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-26 19:09:47,477 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.33s with 2 clusters.
2025-10-26 19:09:47,479 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (som_predef) to: datasets\block\processed\segmented\som_predef\block2_predefined.png
2025-10-26 19:09:47,479 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 19:09:47,480 - src.models.segmentation.dbscan - INFO - segment:116 - Using predefined DBSCAN.
2025-10-26 19:09:49,447 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 1.97s with 1 clusters.
2025-10-26 19:09:49,449 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block2_predefined.png
2025-10-26 19:09:49,449 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 19:09:49,553 - src.pipeline - INFO - _process_single_test_image:392 - -> kmeans_predef (predefined) on block2: Avg Delta E Traditional=1.89, Avg Delta E DBN=11.73, k=2
2025-10-26 19:09:49,656 - src.pipeline - INFO - _process_single_test_image:392 - -> som_predef (predefined) on block2: Avg Delta E Traditional=7.08, Avg Delta E DBN=12.82, k=2
2025-10-26 19:09:49,757 - src.pipeline - INFO - _process_single_test_image:392 - -> dbscan (predefined) on block2: Avg Delta E Traditional=19.47, Avg Delta E DBN=23.06, k=1
2025-10-26 19:09:49,758 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block2) k_type: predefined in  2.63 seconds
2025-10-26 19:09:49,758 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block2 in  52.71 seconds
2025-10-26 19:09:49,759 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block3 ---
2025-10-26 19:09:49,969 - root - DEBUG - set_current_image_stem:61 - Current image stem set to: block3
2025-10-26 19:09:49,969 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block3...
2025-10-26 19:09:49,970 - src.data.preprocess - DEBUG - __init__:51 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-26 19:09:49,970 - src.data.preprocess - INFO - preprocess:219 - Starting preprocessing pipeline for image with shape: (3477, 3477, 3)
2025-10-26 19:09:49,991 - src.data.preprocess - INFO - preprocess:231 - Initial resize from 3477x3477 to 511x511
2025-10-26 19:09:51,236 - src.data.preprocess - INFO - preprocess:239 - Applied non-local means denoising with h=10
2025-10-26 19:09:51,237 - src.data.preprocess - DEBUG - unsharp_mask:201 - Unsharp mask amount is zero or less, skipping.
2025-10-26 19:09:51,237 - src.data.preprocess - DEBUG - _estimate_n_colors:75 - Subsampling pixels (261121) for unique color estimation.
2025-10-26 19:09:51,299 - src.data.preprocess - INFO - _estimate_n_colors:84 - Estimated 240 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-26 19:09:51,299 - src.data.preprocess - INFO - quantize_image:116 - Quantizing image (shape: (511, 511, 3)) to approx 50 colors
2025-10-26 19:09:51,301 - src.data.preprocess - DEBUG - quantize_image:137 - Subsampling 261121 pixels to 20000 for K-Means fitting.
2025-10-26 19:09:51,793 - src.data.preprocess - INFO - quantize_image:157 - Quantization complete. Final unique colors: 50 (target was 50)
2025-10-26 19:09:51,795 - src.data.preprocess - INFO - preprocess:262 - Final resize to target size (128, 128)
2025-10-26 19:09:51,796 - src.data.preprocess - INFO - preprocess:267 - Preprocessing pipeline completed successfully.
2025-10-26 19:09:51,800 - root - INFO - save_preprocessed_image:98 - Saved preprocessed image to datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-26 19:09:51,800 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block3) k_type: determined...
2025-10-26 19:09:51,801 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 19:09:51,801 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 19:09:51,801 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 19:09:51,801 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 19:09:51,802 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 19:09:51,802 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 19:09:51,802 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 19:09:51,802 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 19:09:51,802 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 19:09:51,802 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 19:09:51,803 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 19:09:51,803 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 19:09:51,803 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 19:09:51,803 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 19:09:51,803 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 19:09:51,803 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 19:09:51,804 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 19:09:51,804 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 19:09:51,804 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 19:09:51,805 - src.models.segmentation.kmeans - DEBUG - segment:61 - KMeans: Determining optimal k...
2025-10-26 19:09:51,821 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 309. Adjusted k-range: [2, 3]
2025-10-26 19:09:51,821 - src.models.segmentation.strategy - INFO - determine_k:69 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-26 19:09:51,822 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=2 for cluster metrics...
2025-10-26 19:09:53,582 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=3 for cluster metrics...
2025-10-26 19:09:55,385 - src.models.segmentation.strategy - INFO - determine_k:126 - Optimal k determined: 2 (score: 1.000)
2025-10-26 19:09:55,386 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-26 19:09:55,394 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 3.59s with 2 clusters.
2025-10-26 19:09:55,397 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (kmeans_opt) to: datasets\block\processed\segmented\kmeans_opt\block3_determined.png
2025-10-26 19:09:55,398 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 19:09:55,414 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 309. Adjusted k-range: [2, 3]
2025-10-26 19:09:55,415 - src.models.segmentation.strategy - INFO - determine_k:69 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-26 19:09:55,416 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=2 for cluster metrics...
2025-10-26 19:09:57,211 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=3 for cluster metrics...
2025-10-26 19:09:58,993 - src.models.segmentation.strategy - INFO - determine_k:126 - Optimal k determined: 2 (score: 1.000)
2025-10-26 19:09:58,993 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-26 19:09:59,297 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 3.90s with 2 clusters.
2025-10-26 19:09:59,301 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (som_opt) to: datasets\block\processed\segmented\som_opt\block3_determined.png
2025-10-26 19:09:59,302 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 19:09:59,302 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 19:10:34,500 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=15.0, min=20
2025-10-26 19:10:36,078 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 36.78s with 2 clusters.
2025-10-26 19:10:36,080 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block3_determined.png
2025-10-26 19:10:36,080 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 19:10:36,175 - src.pipeline - INFO - _process_single_test_image:392 - -> kmeans_opt (determined) on block3: Avg Delta E Traditional=1.77, Avg Delta E DBN=11.91, k=2
2025-10-26 19:10:36,270 - src.pipeline - INFO - _process_single_test_image:392 - -> som_opt (determined) on block3: Avg Delta E Traditional=1.78, Avg Delta E DBN=11.91, k=2
2025-10-26 19:10:36,363 - src.pipeline - INFO - _process_single_test_image:392 - -> dbscan (determined) on block3: Avg Delta E Traditional=1.62, Avg Delta E DBN=11.85, k=2
2025-10-26 19:10:36,363 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block3) k_type: determined in  44.56 seconds
2025-10-26 19:10:36,364 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block3) k_type: predefined...
2025-10-26 19:10:36,364 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 19:10:36,364 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 19:10:36,364 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 19:10:36,364 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 19:10:36,364 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 19:10:36,364 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 19:10:36,365 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 19:10:36,365 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 19:10:36,365 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 19:10:36,365 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 19:10:36,365 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 19:10:36,365 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 19:10:36,366 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 19:10:36,366 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 19:10:36,366 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 19:10:36,366 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 19:10:36,366 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 19:10:36,366 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 19:10:36,367 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 19:10:36,367 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-26 19:10:36,374 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.01s with 2 clusters.
2025-10-26 19:10:36,376 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (kmeans_predef) to: datasets\block\processed\segmented\kmeans_predef\block3_predefined.png
2025-10-26 19:10:36,377 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 19:10:36,377 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-26 19:10:36,688 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.31s with 2 clusters.
2025-10-26 19:10:36,690 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (som_predef) to: datasets\block\processed\segmented\som_predef\block3_predefined.png
2025-10-26 19:10:36,690 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 19:10:36,691 - src.models.segmentation.dbscan - INFO - segment:116 - Using predefined DBSCAN.
2025-10-26 19:10:38,277 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 1.59s with 1 clusters.
2025-10-26 19:10:38,279 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block3_predefined.png
2025-10-26 19:10:38,279 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 19:10:38,377 - src.pipeline - INFO - _process_single_test_image:392 - -> kmeans_predef (predefined) on block3: Avg Delta E Traditional=1.77, Avg Delta E DBN=11.91, k=2
2025-10-26 19:10:38,488 - src.pipeline - INFO - _process_single_test_image:392 - -> som_predef (predefined) on block3: Avg Delta E Traditional=1.78, Avg Delta E DBN=11.91, k=2
2025-10-26 19:10:38,590 - src.pipeline - INFO - _process_single_test_image:392 - -> dbscan (predefined) on block3: Avg Delta E Traditional=25.81, Avg Delta E DBN=18.86, k=1
2025-10-26 19:10:38,591 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block3) k_type: predefined in  2.23 seconds
2025-10-26 19:10:38,591 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block3 in  48.62 seconds
2025-10-26 19:10:38,592 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block4 ---
2025-10-26 19:10:38,837 - root - DEBUG - set_current_image_stem:61 - Current image stem set to: block4
2025-10-26 19:10:38,838 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block4...
2025-10-26 19:10:38,838 - src.data.preprocess - DEBUG - __init__:51 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-26 19:10:38,838 - src.data.preprocess - INFO - preprocess:219 - Starting preprocessing pipeline for image with shape: (3622, 3622, 3)
2025-10-26 19:10:38,862 - src.data.preprocess - INFO - preprocess:231 - Initial resize from 3622x3622 to 512x512
2025-10-26 19:10:40,099 - src.data.preprocess - INFO - preprocess:239 - Applied non-local means denoising with h=10
2025-10-26 19:10:40,099 - src.data.preprocess - DEBUG - unsharp_mask:201 - Unsharp mask amount is zero or less, skipping.
2025-10-26 19:10:40,099 - src.data.preprocess - DEBUG - _estimate_n_colors:75 - Subsampling pixels (262144) for unique color estimation.
2025-10-26 19:10:40,161 - src.data.preprocess - INFO - _estimate_n_colors:84 - Estimated 188 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-26 19:10:40,162 - src.data.preprocess - INFO - quantize_image:116 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-26 19:10:40,163 - src.data.preprocess - DEBUG - quantize_image:137 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-26 19:10:40,624 - src.data.preprocess - INFO - quantize_image:157 - Quantization complete. Final unique colors: 49 (target was 50)
2025-10-26 19:10:40,626 - src.data.preprocess - INFO - preprocess:262 - Final resize to target size (128, 128)
2025-10-26 19:10:40,627 - src.data.preprocess - INFO - preprocess:267 - Preprocessing pipeline completed successfully.
2025-10-26 19:10:40,628 - root - INFO - save_preprocessed_image:98 - Saved preprocessed image to datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-26 19:10:40,628 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block4) k_type: determined...
2025-10-26 19:10:40,629 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 19:10:40,629 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 19:10:40,629 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 19:10:40,629 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 19:10:40,629 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 19:10:40,630 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 19:10:40,630 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 19:10:40,630 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 19:10:40,630 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 19:10:40,630 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 19:10:40,630 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 19:10:40,630 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 19:10:40,630 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 19:10:40,631 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 19:10:40,631 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 19:10:40,631 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 19:10:40,631 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 19:10:40,631 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 19:10:40,632 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 19:10:40,632 - src.models.segmentation.kmeans - DEBUG - segment:61 - KMeans: Determining optimal k...
2025-10-26 19:10:40,649 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 295. Adjusted k-range: [2, 3]
2025-10-26 19:10:40,649 - src.models.segmentation.strategy - INFO - determine_k:69 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-26 19:10:40,650 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=2 for cluster metrics...
2025-10-26 19:10:42,399 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=3 for cluster metrics...
2025-10-26 19:10:44,200 - src.models.segmentation.strategy - INFO - determine_k:126 - Optimal k determined: 2 (score: 1.000)
2025-10-26 19:10:44,200 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-26 19:10:44,209 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 3.58s with 2 clusters.
2025-10-26 19:10:44,211 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (kmeans_opt) to: datasets\block\processed\segmented\kmeans_opt\block4_determined.png
2025-10-26 19:10:44,211 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 19:10:44,228 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 295. Adjusted k-range: [2, 3]
2025-10-26 19:10:44,228 - src.models.segmentation.strategy - INFO - determine_k:69 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-26 19:10:44,229 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=2 for cluster metrics...
2025-10-26 19:10:46,006 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=3 for cluster metrics...
2025-10-26 19:10:47,785 - src.models.segmentation.strategy - INFO - determine_k:126 - Optimal k determined: 2 (score: 0.500)
2025-10-26 19:10:47,786 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-26 19:10:48,088 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 3.88s with 2 clusters.
2025-10-26 19:10:48,089 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (som_opt) to: datasets\block\processed\segmented\som_opt\block4_determined.png
2025-10-26 19:10:48,090 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 19:10:48,090 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 19:11:20,942 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=10.0, min=10
2025-10-26 19:11:22,830 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 34.74s with 4 clusters.
2025-10-26 19:11:22,833 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block4_determined.png
2025-10-26 19:11:22,833 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 19:11:22,930 - src.pipeline - INFO - _process_single_test_image:392 - -> kmeans_opt (determined) on block4: Avg Delta E Traditional=2.53, Avg Delta E DBN=11.96, k=2
2025-10-26 19:11:23,026 - src.pipeline - INFO - _process_single_test_image:392 - -> som_opt (determined) on block4: Avg Delta E Traditional=10.64, Avg Delta E DBN=17.10, k=2
2025-10-26 19:11:23,123 - src.pipeline - INFO - _process_single_test_image:392 - -> dbscan (determined) on block4: Avg Delta E Traditional=10.38, Avg Delta E DBN=13.38, k=4
2025-10-26 19:11:23,123 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block4) k_type: determined in  42.49 seconds
2025-10-26 19:11:23,123 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block4) k_type: predefined...
2025-10-26 19:11:23,123 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 19:11:23,123 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 19:11:23,123 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 19:11:23,123 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 19:11:23,123 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 19:11:23,123 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 19:11:23,125 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 19:11:23,125 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 19:11:23,125 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 19:11:23,125 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 19:11:23,125 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 19:11:23,125 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 19:11:23,126 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 19:11:23,126 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 19:11:23,126 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 19:11:23,126 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 19:11:23,126 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 19:11:23,126 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 19:11:23,126 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 19:11:23,126 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-26 19:11:23,135 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.01s with 2 clusters.
2025-10-26 19:11:23,136 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (kmeans_predef) to: datasets\block\processed\segmented\kmeans_predef\block4_predefined.png
2025-10-26 19:11:23,137 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 19:11:23,137 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-26 19:11:23,446 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.31s with 2 clusters.
2025-10-26 19:11:23,447 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (som_predef) to: datasets\block\processed\segmented\som_predef\block4_predefined.png
2025-10-26 19:11:23,447 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 19:11:23,448 - src.models.segmentation.dbscan - INFO - segment:116 - Using predefined DBSCAN.
2025-10-26 19:11:25,365 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 1.92s with 1 clusters.
2025-10-26 19:11:25,367 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block4_predefined.png
2025-10-26 19:11:25,367 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 19:11:25,470 - src.pipeline - INFO - _process_single_test_image:392 - -> kmeans_predef (predefined) on block4: Avg Delta E Traditional=2.53, Avg Delta E DBN=11.96, k=2
2025-10-26 19:11:25,571 - src.pipeline - INFO - _process_single_test_image:392 - -> som_predef (predefined) on block4: Avg Delta E Traditional=10.64, Avg Delta E DBN=17.10, k=2
2025-10-26 19:11:25,670 - src.pipeline - INFO - _process_single_test_image:392 - -> dbscan (predefined) on block4: Avg Delta E Traditional=23.53, Avg Delta E DBN=19.91, k=1
2025-10-26 19:11:25,671 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block4) k_type: predefined in  2.55 seconds
2025-10-26 19:11:25,671 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block4 in  46.83 seconds
2025-10-26 19:11:25,671 - src.pipeline - INFO - _run_test_image_analysis:258 - --- Processing test image: block5 ---
2025-10-26 19:11:25,909 - root - DEBUG - set_current_image_stem:61 - Current image stem set to: block5
2025-10-26 19:11:25,910 - src.pipeline - INFO - timer:43 - Starting: Single image processing for block5...
2025-10-26 19:11:25,910 - src.data.preprocess - DEBUG - __init__:51 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-26 19:11:25,910 - src.data.preprocess - INFO - preprocess:219 - Starting preprocessing pipeline for image with shape: (3504, 3504, 3)
2025-10-26 19:11:25,934 - src.data.preprocess - INFO - preprocess:231 - Initial resize from 3504x3504 to 512x512
2025-10-26 19:11:27,168 - src.data.preprocess - INFO - preprocess:239 - Applied non-local means denoising with h=10
2025-10-26 19:11:27,168 - src.data.preprocess - DEBUG - unsharp_mask:201 - Unsharp mask amount is zero or less, skipping.
2025-10-26 19:11:27,168 - src.data.preprocess - DEBUG - _estimate_n_colors:75 - Subsampling pixels (262144) for unique color estimation.
2025-10-26 19:11:27,227 - src.data.preprocess - INFO - _estimate_n_colors:84 - Estimated 208 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-26 19:11:27,227 - src.data.preprocess - INFO - quantize_image:116 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-26 19:11:27,229 - src.data.preprocess - DEBUG - quantize_image:137 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-26 19:11:27,754 - src.data.preprocess - INFO - quantize_image:157 - Quantization complete. Final unique colors: 49 (target was 50)
2025-10-26 19:11:27,756 - src.data.preprocess - INFO - preprocess:262 - Final resize to target size (128, 128)
2025-10-26 19:11:27,756 - src.data.preprocess - INFO - preprocess:267 - Preprocessing pipeline completed successfully.
2025-10-26 19:11:27,758 - root - INFO - save_preprocessed_image:98 - Saved preprocessed image to datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-26 19:11:27,758 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block5) k_type: determined...
2025-10-26 19:11:27,759 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-26 19:11:27,759 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 19:11:27,759 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-26 19:11:27,759 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-26 19:11:27,759 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-26 19:11:27,760 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 19:11:27,760 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-26 19:11:27,760 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 19:11:27,760 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-26 19:11:27,760 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-26 19:11:27,760 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-26 19:11:27,761 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 19:11:27,761 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-26 19:11:27,761 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 19:11:27,761 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 19:11:27,761 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-26 19:11:27,761 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 19:11:27,762 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-26 19:11:27,762 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_opt
2025-10-26 19:11:27,762 - src.models.segmentation.kmeans - DEBUG - segment:61 - KMeans: Determining optimal k...
2025-10-26 19:11:27,778 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 321. Adjusted k-range: [2, 3]
2025-10-26 19:11:27,779 - src.models.segmentation.strategy - INFO - determine_k:69 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-26 19:11:27,780 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=2 for cluster metrics...
2025-10-26 19:11:29,564 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=3 for cluster metrics...
2025-10-26 19:11:31,420 - src.models.segmentation.strategy - INFO - determine_k:126 - Optimal k determined: 2 (score: 1.000)
2025-10-26 19:11:31,420 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-26 19:11:31,429 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_opt completed in 3.67s with 2 clusters.
2025-10-26 19:11:31,431 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (kmeans_opt) to: datasets\block\processed\segmented\kmeans_opt\block5_determined.png
2025-10-26 19:11:31,431 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_opt
2025-10-26 19:11:31,449 - src.models.segmentation.strategy - INFO - determine_k:59 - Unique colors: 321. Adjusted k-range: [2, 3]
2025-10-26 19:11:31,450 - src.models.segmentation.strategy - INFO - determine_k:69 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-26 19:11:31,451 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=2 for cluster metrics...
2025-10-26 19:11:33,291 - src.models.segmentation.strategy - INFO - determine_k:89 - Testing k=3 for cluster metrics...
2025-10-26 19:11:35,089 - src.models.segmentation.strategy - INFO - determine_k:126 - Optimal k determined: 2 (score: 1.000)
2025-10-26 19:11:35,090 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-26 19:11:35,387 - src.models.segmentation.facade - INFO - process:140 - Method som_opt completed in 3.96s with 2 clusters.
2025-10-26 19:11:35,389 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (som_opt) to: datasets\block\processed\segmented\som_opt\block5_determined.png
2025-10-26 19:11:35,389 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 19:11:35,389 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:67 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-26 19:12:08,530 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:89 - Optimal DBSCAN parameters: eps=15.0, min=20
2025-10-26 19:12:10,370 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 34.98s with 3 clusters.
2025-10-26 19:12:10,372 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block5_determined.png
2025-10-26 19:12:10,372 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='determined'.
2025-10-26 19:12:10,469 - src.pipeline - INFO - _process_single_test_image:392 - -> kmeans_opt (determined) on block5: Avg Delta E Traditional=4.29, Avg Delta E DBN=11.75, k=2
2025-10-26 19:12:10,562 - src.pipeline - INFO - _process_single_test_image:392 - -> som_opt (determined) on block5: Avg Delta E Traditional=14.70, Avg Delta E DBN=15.21, k=2
2025-10-26 19:12:10,662 - src.pipeline - INFO - _process_single_test_image:392 - -> dbscan (determined) on block5: Avg Delta E Traditional=9.42, Avg Delta E DBN=15.71, k=3
2025-10-26 19:12:10,662 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block5) k_type: determined in  42.90 seconds
2025-10-26 19:12:10,662 - src.pipeline - INFO - timer:43 - Starting: Segmentation (block5) k_type: predefined...
2025-10-26 19:12:10,662 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-26 19:12:10,662 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-26 19:12:10,662 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-26 19:12:10,662 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-26 19:12:10,663 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-26 19:12:10,663 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-26 19:12:10,663 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-26 19:12:10,663 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-26 19:12:10,663 - root - DEBUG - _initialize_segmenters:105 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-26 19:12:10,663 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-26 19:12:10,663 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-26 19:12:10,664 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-26 19:12:10,664 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-26 19:12:10,664 - root - DEBUG - _initialize_segmenters:93 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-26 19:12:10,664 - root - DEBUG - _initialize_segmenters:96 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-26 19:12:10,664 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-26 19:12:10,665 - root - DEBUG - _initialize_segmenters:100 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-26 19:12:10,665 - src.models.segmentation.facade - INFO - __init__:68 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-26 19:12:10,665 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: kmeans_predef
2025-10-26 19:12:10,666 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-26 19:12:10,674 - src.models.segmentation.facade - INFO - process:140 - Method kmeans_predef completed in 0.01s with 2 clusters.
2025-10-26 19:12:10,676 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (kmeans_predef) to: datasets\block\processed\segmented\kmeans_predef\block5_predefined.png
2025-10-26 19:12:10,676 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: som_predef
2025-10-26 19:12:10,677 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-26 19:12:11,000 - src.models.segmentation.facade - INFO - process:140 - Method som_predef completed in 0.32s with 2 clusters.
2025-10-26 19:12:11,002 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (som_predef) to: datasets\block\processed\segmented\som_predef\block5_predefined.png
2025-10-26 19:12:11,002 - src.models.segmentation.facade - INFO - process:136 - Running segmentation method: dbscan
2025-10-26 19:12:11,002 - src.models.segmentation.dbscan - INFO - segment:116 - Using predefined DBSCAN.
2025-10-26 19:12:12,832 - src.models.segmentation.facade - INFO - process:140 - Method dbscan completed in 1.83s with 1 clusters.
2025-10-26 19:12:12,833 - src.utils.output_manager - INFO - save_segmentation_result:151 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block5_predefined.png
2025-10-26 19:12:12,834 - src.models.segmentation.facade - INFO - process:156 - Segmentation processing completed for k_type='predefined'.
2025-10-26 19:12:12,934 - src.pipeline - INFO - _process_single_test_image:392 - -> kmeans_predef (predefined) on block5: Avg Delta E Traditional=4.29, Avg Delta E DBN=11.75, k=2
2025-10-26 19:12:13,033 - src.pipeline - INFO - _process_single_test_image:392 - -> som_predef (predefined) on block5: Avg Delta E Traditional=14.70, Avg Delta E DBN=15.21, k=2
2025-10-26 19:12:13,181 - src.pipeline - INFO - _process_single_test_image:392 - -> dbscan (predefined) on block5: Avg Delta E Traditional=17.74, Avg Delta E DBN=25.09, k=1
2025-10-26 19:12:13,181 - src.pipeline - INFO - timer:48 - Completed: Segmentation (block5) k_type: predefined in  2.52 seconds
2025-10-26 19:12:13,182 - src.pipeline - INFO - timer:48 - Completed: Single image processing for block5 in  47.27 seconds
2025-10-26 19:12:13,182 - root - DEBUG - set_current_image_stem:61 - Current image stem set to: None
2025-10-26 19:12:13,182 - src.pipeline - INFO - _run_test_image_analysis:278 - Test image analysis loop finished.
2025-10-26 19:12:13,186 - src.pipeline - INFO - timer:48 - Completed: Test Image Analysis Loop in  254.03 seconds
2025-10-26 19:12:13,186 - src.pipeline - INFO - timer:43 - Starting: Saving Final Results...
2025-10-26 19:12:13,186 - src.pipeline - INFO - _save_and_summarize_results:416 - Saving 30 total Delta E results to CSV...
2025-10-26 19:12:13,193 - root - INFO - save_delta_e_results:166 - Saved Delta E results (30 entries) to datasets\block\analysis\_block_delta_e_results.csv
2025-10-26 19:12:13,194 - src.pipeline - INFO - _save_and_summarize_results:424 - --- Overall Results Summary ---
2025-10-26 19:12:13,206 - src.pipeline - INFO - _save_and_summarize_results:433 - 
   method  avg_traditional_delta_e  avg_pso_dbn_delta_e  avg_processing_time
0  dbscan                   13.346               16.754               20.069
1  kmeans                    2.440               11.733                1.822
2     som                    9.008               14.140                2.129
2025-10-26 19:12:13,207 - src.pipeline - INFO - _save_and_summarize_results:436 - --- Detailed Results by k_type ---
2025-10-26 19:12:13,217 - src.pipeline - INFO - _save_and_summarize_results:444 - 
   method      k_type  avg_traditional_delta_e  avg_pso_dbn_delta_e  avg_processing_time  avg_n_clusters
0  dbscan  determined                    4.989               12.788               38.322           2.600
1  dbscan  predefined                   21.704               20.720                1.816           1.000
2  kmeans  determined                    2.440               11.733                3.634           2.000
3  kmeans  predefined                    2.440               11.733                0.009           2.000
4     som  determined                    9.008               14.140                3.940           2.000
5     som  predefined                    9.008               14.140                0.319           2.000
2025-10-26 19:12:13,219 - src.pipeline - INFO - _save_and_summarize_results:445 - --- End of Summary ---
2025-10-26 19:12:13,220 - src.pipeline - INFO - timer:48 - Completed: Saving Final Results in  0.03 seconds
2025-10-26 19:12:13,221 - src.pipeline - INFO - timer:48 - Completed: Total Pipeline in  387.96 seconds
2025-10-26 19:12:13,221 - src.pipeline - INFO - run:127 - ==================================================
2025-10-26 19:12:13,221 - src.pipeline - INFO - run:128 - Processing Pipeline RUN completed for: block
2025-10-26 19:12:13,222 - src.pipeline - INFO - run:129 - ==================================================
2025-10-26 19:12:13,222 - root - INFO - main:69 - Main execution finished successfully.
2025-10-26 19:12:13,223 - root - INFO - main:75 - ================================================================================
PROCESSING COMPLETED IN 387.98 SECONDS
================================================================================
2025-10-31 17:42:43,939 - root - DEBUG - setup_logging:87 - Console handler stream encoding set to UTF-8.
2025-10-31 17:42:43,955 - root - INFO - setup_logging:95 - Logging setup complete. Console level: INFO. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-31 17:42:43,955 - __main__ - INFO - main:86 - Main function started. Initializing processing pipeline...
2025-10-31 17:42:43,955 - src.pipeline - INFO - _load_and_validate_config:117 - Loading configuration from: C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml
2025-10-31 17:42:43,970 - src.data.load_data - INFO - load_config:47 - Loaded default configuration from C:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-31 17:42:43,977 - src.data.load_data - INFO - load_config:57 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-31 17:42:43,977 - src.data.load_data - INFO - load_config:62 - Merged specific configuration over defaults.
2025-10-31 17:42:43,978 - src.data.load_data - INFO - load_config:70 - Configuration loaded successfully.
2025-10-31 17:42:43,978 - root - DEBUG - validate_processing_config:130 - Starting configuration validation...
2025-10-31 17:42:43,979 - root - DEBUG - validate_processing_config:177 - Reference image path validated: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-31 17:42:43,981 - root - DEBUG - validate_processing_config:198 - Validated 5 test image paths.
2025-10-31 17:42:43,981 - root - INFO - validate_processing_config:215 - Configuration validation passed successfully.
2025-10-31 17:42:43,983 - src.utils.output_manager - DEBUG - _create_directories:88 - Ensured output directory structure exists for dataset 'block'.
2025-10-31 17:42:43,983 - src.utils.output_manager - INFO - __init__:49 - OutputManager initialized for dataset 'block'. Output directory: C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-31 17:42:43,983 - src.pipeline - INFO - _load_and_validate_config:134 - OutputManager initialized successfully for dataset: 'block'
2025-10-31 17:42:43,984 - __main__ - INFO - main:97 - Starting pipeline run for dataset specified in: block_config.yaml
2025-10-31 17:42:43,985 - src.pipeline - INFO - run:150 - ==================================================
2025-10-31 17:42:43,985 - src.pipeline - INFO - run:151 - Processing Pipeline RUN starting for dataset: block
2025-10-31 17:42:43,985 - src.pipeline - INFO - run:152 - ==================================================
2025-10-31 17:42:43,985 - src.pipeline - INFO - timer:53 - Starting: Total Pipeline...
2025-10-31 17:42:43,985 - src.pipeline - INFO - timer:53 - Starting: DBN Training...
2025-10-31 17:42:43,985 - src.pipeline - INFO - _train_dbn_model:199 - Loading images specified in config['test_images'] to generate training data...
2025-10-31 17:42:44,641 - root - INFO - save_test_image:207 - Saved test image copy to: datasets\block\inputs\test_images\block1.jpg
2025-10-31 17:42:45,507 - root - INFO - save_test_image:207 - Saved test image copy to: datasets\block\inputs\test_images\block2.jpg
2025-10-31 17:42:45,977 - root - INFO - save_test_image:207 - Saved test image copy to: datasets\block\inputs\test_images\block3.jpg
2025-10-31 17:42:46,501 - root - INFO - save_test_image:207 - Saved test image copy to: datasets\block\inputs\test_images\block4.jpg
2025-10-31 17:42:47,015 - root - INFO - save_test_image:207 - Saved test image copy to: datasets\block\inputs\test_images\block5.jpg
2025-10-31 17:42:47,015 - src.pipeline - INFO - _train_dbn_model:216 - Loading and processing 5 valid images into flattened training arrays...
2025-10-31 17:42:47,015 - src.data.load_data - INFO - load_data:137 - Processing 5 images for training data...
2025-10-31 17:42:48,988 - src.data.load_data - INFO - load_data:167 - Successfully loaded and processed 5/5 images.
2025-10-31 17:42:48,988 - src.data.load_data - INFO - load_data:168 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-31 17:42:48,988 - src.pipeline - DEBUG - _train_dbn_model:225 - Loaded training data shapes - RGB: (5, 30000), LAB: (5, 30000)
2025-10-31 17:42:48,988 - src.pipeline - INFO - _train_dbn_model:227 - Initializing DBNTrainer (Target samples: 800)...
2025-10-31 17:42:48,988 - src.models.dbn_trainer - INFO - __init__:50 - DBNTrainer initialized.
2025-10-31 17:42:48,988 - src.models.dbn_trainer - INFO - train:78 - Starting DBN training and PSO optimization process...
2025-10-31 17:42:48,988 - src.models.dbn_trainer - DEBUG - train:81 - Sampling raw data...
2025-10-31 17:42:48,988 - src.data.sampling - INFO - efficient_data_sampling:53 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-31 17:42:48,995 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 1
2025-10-31 17:42:48,996 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 2
2025-10-31 17:42:48,996 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 3
2025-10-31 17:42:48,996 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 4
2025-10-31 17:42:48,997 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 5
2025-10-31 17:42:48,999 - src.data.sampling - INFO - efficient_data_sampling:123 - Sampling completed: 800 samples extracted.
2025-10-31 17:42:49,000 - src.data.sampling - INFO - efficient_data_sampling:124 - RGB range: [31.00, 214.00]
2025-10-31 17:42:49,000 - src.data.sampling - INFO - efficient_data_sampling:125 - LAB ranges: L[11.76, 84.71], a[-2.00, 3.00], b[-2.00, 8.00]
2025-10-31 17:42:49,000 - src.models.dbn_trainer - DEBUG - train:85 - Sampled data shapes - RGB: (800, 3), LAB: (800, 3)
2025-10-31 17:42:49,000 - src.models.dbn_trainer - DEBUG - train:88 - Splitting data into training/test sets...
2025-10-31 17:42:49,000 - src.models.dbn_trainer - INFO - train:94 - Training set shape: (640, 3), Test set shape: (160, 3)
2025-10-31 17:42:49,000 - src.models.dbn_trainer - DEBUG - train:97 - Preparing data scalers...
2025-10-31 17:42:49,000 - src.models.dbn_trainer - INFO - _prepare_scalers:143 - Preparing and fitting data scalers...
2025-10-31 17:42:49,008 - src.models.dbn_trainer - INFO - _prepare_scalers:167 - Data scaling complete. Scaled X shape: (640, 3), Scaled Y shape: (640, 3)
2025-10-31 17:42:49,008 - src.models.dbn_trainer - DEBUG - _prepare_scalers:168 - Scaled X range: [0.000, 1.000]
2025-10-31 17:42:49,008 - src.models.dbn_trainer - DEBUG - _prepare_scalers:169 - Scaled Y range: [0.000, 1.000]
2025-10-31 17:42:49,009 - src.models.dbn_trainer - DEBUG - train:101 - Initializing DBN model...
2025-10-31 17:42:49,009 - src.models.pso_dbn - INFO - __init__:133 - Initializing DBN: Input(3) -> Hidden([100, 50, 25]) -> Output(3)
2025-10-31 17:42:49,288 - src.models.pso_dbn - INFO - _build_model:178 - DBN Keras model built successfully. Total parameters: 7503
2025-10-31 17:42:49,370 - src.models.dbn_trainer - INFO - train:107 - DBN model initialized with 20 weight layers.
2025-10-31 17:42:49,370 - src.models.dbn_trainer - DEBUG - train:113 - Starting PSO weight optimization...
2025-10-31 17:42:49,370 - src.models.dbn_trainer - INFO - _run_pso_with_retries:189 - Starting PSO optimization with up to 3 retries.
2025-10-31 17:42:49,370 - src.models.dbn_trainer - INFO - _run_pso_with_retries:195 - PSO optimization attempt 1/3
2025-10-31 17:42:49,371 - src.models.pso_dbn - INFO - optimize:363 - Starting PSO optimization with parameters: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-31 17:42:49,373 - src.models.pso_dbn - DEBUG - _calculate_adaptive_bounds:522 - Calculated 7503 adaptive bounds for PSO.
2025-10-31 17:42:49,373 - src.models.pso_dbn - ERROR - optimize:473 - PSO optimization using 'pyswarm' failed critically: pso() got an unexpected keyword argument 'x0'
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\models\pso_dbn.py", line 438, in optimize
    optimized_flat_weights, final_fitness = pso(
TypeError: pso() got an unexpected keyword argument 'x0'
2025-10-31 17:42:49,373 - src.models.pso_dbn - WARNING - optimize:474 - Returning initial weights due to PSO failure.
2025-10-31 17:42:49,400 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 17:42:49,401 - src.models.dbn_trainer - INFO - _run_pso_with_retries:215 - PSO attempt 1 completed successfully.
2025-10-31 17:42:49,409 - src.models.dbn_trainer - INFO - train:117 - DBN training and PSO optimization completed successfully.
2025-10-31 17:42:49,411 - src.pipeline - INFO - _train_dbn_model:232 - DBN training and scaling completed.
2025-10-31 17:42:49,414 - src.pipeline - INFO - timer:58 - Completed: DBN Training in 5.43 seconds
2025-10-31 17:42:49,414 - src.pipeline - INFO - timer:53 - Starting: Reference Image Processing...
2025-10-31 17:42:49,414 - src.pipeline - INFO - _run_reference_processing:251 - Processing reference image specified in config: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-31 17:42:50,974 - root - INFO - save_reference_image:180 - Saved reference image copy to: datasets\block\inputs\reference_image\reference.png
2025-10-31 17:42:50,974 - src.pipeline - INFO - _run_reference_processing:261 - Preprocessing reference image...
2025-10-31 17:42:50,974 - src.data.preprocess - DEBUG - __init__:43 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-31 17:42:50,974 - src.data.preprocess - INFO - preprocess:204 - Starting preprocessing pipeline for image with shape: (4480, 4480, 3)
2025-10-31 17:42:51,023 - src.data.preprocess - INFO - preprocess:216 - Initial resize from 4480x4480 to 512x512
2025-10-31 17:42:52,345 - src.data.preprocess - INFO - preprocess:224 - Applied non-local means denoising with h=10
2025-10-31 17:42:52,355 - src.data.preprocess - DEBUG - unsharp_mask:187 - Unsharp mask amount is zero or less, skipping.
2025-10-31 17:42:52,355 - src.data.preprocess - DEBUG - _estimate_n_colors:67 - Subsampling pixels (262144) for unique color estimation.
2025-10-31 17:42:52,423 - src.data.preprocess - INFO - _estimate_n_colors:76 - Estimated 242 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-31 17:42:52,423 - src.data.preprocess - INFO - quantize_image:106 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-31 17:42:52,423 - src.data.preprocess - DEBUG - quantize_image:127 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-31 17:42:53,456 - src.data.preprocess - INFO - quantize_image:147 - Quantization complete. Final unique colors: 50 (target was 50)
2025-10-31 17:42:53,456 - src.data.preprocess - INFO - preprocess:246 - Final resize to target size (128, 128)
2025-10-31 17:42:53,456 - src.data.preprocess - INFO - preprocess:251 - Preprocessing pipeline completed successfully.
2025-10-31 17:42:53,456 - src.models.segmentation.reference - INFO - segment_reference_image:69 - Starting reference image segmentation (K-Means & SOM)...
2025-10-31 17:42:53,456 - src.models.segmentation.reference - INFO - segment_reference_image:86 - Determining optimal number of clusters for reference image...
2025-10-31 17:42:53,456 - src.models.segmentation.reference - INFO - segment_reference_image:104 - Subsampling 16384 pixels to 10000 for reference k-determination
2025-10-31 17:42:53,479 - src.models.segmentation.strategy - INFO - determine_k:58 - Unique colors: 235. Adjusted k-range: [2, 3]
2025-10-31 17:42:53,480 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=2 for cluster metrics...
2025-10-31 17:42:55,464 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=3 for cluster metrics...
2025-10-31 17:42:57,414 - src.models.segmentation.strategy - INFO - determine_k:122 - Optimal k determined: 2 (score: 1.000)
2025-10-31 17:42:57,414 - src.models.segmentation.reference - INFO - segment_reference_image:111 - Optimal clusters determined for reference: 2
2025-10-31 17:42:57,414 - src.models.segmentation.reference - INFO - timer:32 - Starting: Reference K-Means (k=2)...
2025-10-31 17:42:57,414 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-31 17:42:57,414 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-31 17:42:57,430 - src.models.segmentation.reference - INFO - timer:37 - Completed: Reference K-Means (k=2) in 0.01 seconds
2025-10-31 17:42:57,430 - src.models.segmentation.reference - INFO - timer:32 - Starting: Reference SOM (k=2)...
2025-10-31 17:42:57,430 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-31 17:42:57,430 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-31 17:42:57,818 - src.models.segmentation.reference - INFO - timer:37 - Completed: Reference SOM (k=2) in 0.38 seconds
2025-10-31 17:42:57,819 - src.models.segmentation.reference - INFO - segment_reference_image:170 - Reference segmentation (KMeans, SOM, k-determination) finished in 4.35 seconds.
2025-10-31 17:42:57,819 - src.pipeline - INFO - timer:58 - Completed: Reference Image Processing in 8.40 seconds
2025-10-31 17:42:57,820 - src.pipeline - INFO - timer:58 - Completed: Total Pipeline in 13.83 seconds
2025-10-31 17:42:57,820 - src.pipeline - CRITICAL - run:185 - Pipeline execution failed: Reference K-Means segmentation failed or was invalid, cannot extract target colors.
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 163, in run
    target_colors_lab, ref_kmeans_result, ref_som_result = self._run_reference_processing()
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 293, in _run_reference_processing
    raise ValueError("Reference K-Means segmentation failed or was invalid, cannot extract target colors.")
ValueError: Reference K-Means segmentation failed or was invalid, cannot extract target colors.
2025-10-31 17:42:57,821 - __main__ - CRITICAL - main:107 - A critical error occurred in main execution: Reference K-Means segmentation failed or was invalid, cannot extract target colors.
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\main.py", line 98, in main
    pipeline.run()
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 163, in run
    target_colors_lab, ref_kmeans_result, ref_som_result = self._run_reference_processing()
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 293, in _run_reference_processing
    raise ValueError("Reference K-Means segmentation failed or was invalid, cannot extract target colors.")
ValueError: Reference K-Means segmentation failed or was invalid, cannot extract target colors.
2025-10-31 17:42:57,829 - __main__ - INFO - main:119 - ================================================================================
PROCESSING COMPLETED IN 13.88 SECONDS
================================================================================
2025-10-31 20:03:31,718 - root - DEBUG - setup_logging:87 - Console handler stream encoding set to UTF-8.
2025-10-31 20:03:31,718 - root - INFO - setup_logging:95 - Logging setup complete. Console level: INFO. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-31 20:03:31,718 - __main__ - INFO - main:86 - Main function started. Initializing processing pipeline...
2025-10-31 20:03:31,718 - src.pipeline - INFO - _load_and_validate_config:117 - Loading configuration from: C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml
2025-10-31 20:03:31,743 - src.data.load_data - INFO - load_config:47 - Loaded default configuration from C:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-31 20:03:31,747 - src.data.load_data - INFO - load_config:57 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-31 20:03:31,748 - src.data.load_data - INFO - load_config:62 - Merged specific configuration over defaults.
2025-10-31 20:03:31,748 - src.data.load_data - INFO - load_config:70 - Configuration loaded successfully.
2025-10-31 20:03:31,749 - root - DEBUG - validate_processing_config:130 - Starting configuration validation...
2025-10-31 20:03:31,749 - root - DEBUG - validate_processing_config:177 - Reference image path validated: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-31 20:03:31,752 - root - DEBUG - validate_processing_config:198 - Validated 5 test image paths.
2025-10-31 20:03:31,752 - root - INFO - validate_processing_config:215 - Configuration validation passed successfully.
2025-10-31 20:03:31,756 - src.utils.output_manager - DEBUG - _create_directories:85 - Ensured output directory structure exists for dataset 'block'.
2025-10-31 20:03:31,756 - src.utils.output_manager - INFO - __init__:46 - OutputManager initialized for dataset 'block'. Output directory: C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-31 20:03:31,756 - src.pipeline - INFO - _load_and_validate_config:134 - OutputManager initialized successfully for dataset: 'block'
2025-10-31 20:03:31,756 - __main__ - INFO - main:97 - Starting pipeline run for dataset specified in: block_config.yaml
2025-10-31 20:03:31,756 - src.pipeline - INFO - run:150 - ==================================================
2025-10-31 20:03:31,756 - src.pipeline - INFO - run:151 - Processing Pipeline RUN starting for dataset: block
2025-10-31 20:03:31,756 - src.pipeline - INFO - run:152 - ==================================================
2025-10-31 20:03:31,756 - src.pipeline - INFO - timer:53 - Starting: Total Pipeline...
2025-10-31 20:03:31,756 - src.pipeline - INFO - timer:53 - Starting: DBN Training...
2025-10-31 20:03:31,756 - src.pipeline - INFO - _train_dbn_model:199 - Loading images specified in config['test_images'] to generate training data...
2025-10-31 20:03:32,473 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block1.jpg
2025-10-31 20:03:33,503 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block2.jpg
2025-10-31 20:03:34,052 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block3.jpg
2025-10-31 20:03:34,607 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block4.jpg
2025-10-31 20:03:35,171 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block5.jpg
2025-10-31 20:03:35,171 - src.pipeline - INFO - _train_dbn_model:216 - Loading and processing 5 valid images into flattened training arrays...
2025-10-31 20:03:35,171 - src.data.load_data - INFO - load_data:137 - Processing 5 images for training data...
2025-10-31 20:03:37,421 - src.data.load_data - INFO - load_data:167 - Successfully loaded and processed 5/5 images.
2025-10-31 20:03:37,422 - src.data.load_data - INFO - load_data:168 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-31 20:03:37,426 - src.pipeline - DEBUG - _train_dbn_model:225 - Loaded training data shapes - RGB: (5, 30000), LAB: (5, 30000)
2025-10-31 20:03:37,426 - src.pipeline - INFO - _train_dbn_model:227 - Initializing DBNTrainer (Target samples: 800)...
2025-10-31 20:03:37,426 - src.models.dbn_trainer - INFO - __init__:50 - DBNTrainer initialized.
2025-10-31 20:03:37,426 - src.models.dbn_trainer - INFO - train:78 - Starting DBN training and PSO optimization process...
2025-10-31 20:03:37,427 - src.models.dbn_trainer - DEBUG - train:81 - Sampling raw data...
2025-10-31 20:03:37,427 - src.data.sampling - INFO - efficient_data_sampling:53 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-31 20:03:37,429 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 1
2025-10-31 20:03:37,429 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 2
2025-10-31 20:03:37,430 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 3
2025-10-31 20:03:37,431 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 4
2025-10-31 20:03:37,432 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 5
2025-10-31 20:03:37,434 - src.data.sampling - INFO - efficient_data_sampling:123 - Sampling completed: 800 samples extracted.
2025-10-31 20:03:37,434 - src.data.sampling - INFO - efficient_data_sampling:124 - RGB range: [31.00, 215.00]
2025-10-31 20:03:37,435 - src.data.sampling - INFO - efficient_data_sampling:125 - LAB ranges: L[11.76, 84.71], a[-2.00, 2.00], b[-1.00, 8.00]
2025-10-31 20:03:37,435 - src.models.dbn_trainer - DEBUG - train:85 - Sampled data shapes - RGB: (800, 3), LAB: (800, 3)
2025-10-31 20:03:37,436 - src.models.dbn_trainer - DEBUG - train:88 - Splitting data into training/test sets...
2025-10-31 20:03:37,436 - src.models.dbn_trainer - INFO - train:94 - Training set shape: (640, 3), Test set shape: (160, 3)
2025-10-31 20:03:37,437 - src.models.dbn_trainer - DEBUG - train:97 - Preparing data scalers...
2025-10-31 20:03:37,437 - src.models.dbn_trainer - INFO - _prepare_scalers:143 - Preparing and fitting data scalers...
2025-10-31 20:03:37,440 - src.models.dbn_trainer - INFO - _prepare_scalers:167 - Data scaling complete. Scaled X shape: (640, 3), Scaled Y shape: (640, 3)
2025-10-31 20:03:37,440 - src.models.dbn_trainer - DEBUG - _prepare_scalers:168 - Scaled X range: [0.000, 1.000]
2025-10-31 20:03:37,441 - src.models.dbn_trainer - DEBUG - _prepare_scalers:169 - Scaled Y range: [0.000, 1.000]
2025-10-31 20:03:37,441 - src.models.dbn_trainer - DEBUG - train:101 - Initializing DBN model...
2025-10-31 20:03:37,441 - src.models.pso_dbn - INFO - __init__:133 - Initializing DBN: Input(3) -> Hidden([100, 50, 25]) -> Output(3)
2025-10-31 20:03:37,718 - src.models.pso_dbn - INFO - _build_model:178 - DBN Keras model built successfully. Total parameters: 7503
2025-10-31 20:03:37,785 - src.models.dbn_trainer - INFO - train:107 - DBN model initialized with 20 weight layers.
2025-10-31 20:03:37,786 - src.models.dbn_trainer - DEBUG - train:113 - Starting PSO weight optimization...
2025-10-31 20:03:37,786 - src.models.dbn_trainer - INFO - _run_pso_with_retries:189 - Starting PSO optimization with up to 3 retries.
2025-10-31 20:03:37,786 - src.models.dbn_trainer - INFO - _run_pso_with_retries:195 - PSO optimization attempt 1/3
2025-10-31 20:03:37,787 - src.models.pso_dbn - INFO - optimize:363 - Starting PSO optimization with parameters: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-31 20:03:37,792 - src.models.pso_dbn - DEBUG - _calculate_adaptive_bounds:524 - Calculated 7503 adaptive bounds for PSO.
2025-10-31 20:03:37,818 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:03:38,301 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.157442
2025-10-31 20:03:38,301 - src.models.pso_dbn - ERROR - optimize:475 - PSO optimization using 'pyswarm' failed critically: 'numpy.float32' object is not callable
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\models\pso_dbn.py", line 438, in optimize
    optimized_flat_weights, final_fitness = pso(
  File "C:\Users\LENOVO\Desktop\prints\.venv\lib\site-packages\pyswarm\pso.py", line 120, in pso
    if fp[i]<fg and is_feasible(p[i, :]):
  File "C:\Users\LENOVO\Desktop\prints\.venv\lib\site-packages\pyswarm\pso.py", line 90, in is_feasible
    check = np.all(cons(x)>=0)
  File "C:\Users\LENOVO\Desktop\prints\.venv\lib\site-packages\pyswarm\pso.py", line 83, in <lambda>
    cons = lambda x: np.array([y(x, *args, **kwargs) for y in ieqcons])
  File "C:\Users\LENOVO\Desktop\prints\.venv\lib\site-packages\pyswarm\pso.py", line 83, in <listcomp>
    cons = lambda x: np.array([y(x, *args, **kwargs) for y in ieqcons])
TypeError: 'numpy.float32' object is not callable
2025-10-31 20:03:38,301 - src.models.pso_dbn - WARNING - optimize:476 - Returning initial weights due to PSO failure.
2025-10-31 20:03:38,323 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:03:38,323 - src.models.dbn_trainer - INFO - _run_pso_with_retries:215 - PSO attempt 1 completed successfully.
2025-10-31 20:03:38,334 - src.models.dbn_trainer - INFO - train:117 - DBN training and PSO optimization completed successfully.
2025-10-31 20:03:38,334 - src.pipeline - INFO - _train_dbn_model:232 - DBN training and scaling completed.
2025-10-31 20:03:38,340 - src.pipeline - INFO - timer:58 - Completed: DBN Training in 6.58 seconds
2025-10-31 20:03:38,340 - src.pipeline - INFO - timer:53 - Starting: Reference Image Processing...
2025-10-31 20:03:38,341 - src.pipeline - INFO - _run_reference_processing:251 - Processing reference image specified in config: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-31 20:03:40,121 - root - INFO - save_reference_image:177 - Saved reference image copy to: datasets\block\inputs\reference_image\reference.png
2025-10-31 20:03:40,121 - src.pipeline - INFO - _run_reference_processing:261 - Preprocessing reference image...
2025-10-31 20:03:40,121 - src.data.preprocess - DEBUG - __init__:43 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-31 20:03:40,121 - src.data.preprocess - INFO - preprocess:204 - Starting preprocessing pipeline for image with shape: (4480, 4480, 3)
2025-10-31 20:03:40,168 - src.data.preprocess - INFO - preprocess:216 - Initial resize from 4480x4480 to 512x512
2025-10-31 20:03:41,571 - src.data.preprocess - INFO - preprocess:224 - Applied non-local means denoising with h=10
2025-10-31 20:03:41,571 - src.data.preprocess - DEBUG - unsharp_mask:187 - Unsharp mask amount is zero or less, skipping.
2025-10-31 20:03:41,571 - src.data.preprocess - DEBUG - _estimate_n_colors:67 - Subsampling pixels (262144) for unique color estimation.
2025-10-31 20:03:41,652 - src.data.preprocess - INFO - _estimate_n_colors:76 - Estimated 243 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-31 20:03:41,652 - src.data.preprocess - INFO - quantize_image:106 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-31 20:03:41,652 - src.data.preprocess - DEBUG - quantize_image:127 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-31 20:03:42,631 - src.data.preprocess - INFO - quantize_image:147 - Quantization complete. Final unique colors: 50 (target was 50)
2025-10-31 20:03:42,631 - src.data.preprocess - INFO - preprocess:246 - Final resize to target size (128, 128)
2025-10-31 20:03:42,631 - src.data.preprocess - INFO - preprocess:251 - Preprocessing pipeline completed successfully.
2025-10-31 20:03:42,631 - src.models.segmentation.reference - INFO - segment_reference_image:69 - Starting reference image segmentation (K-Means & SOM)...
2025-10-31 20:03:42,631 - src.models.segmentation.reference - INFO - segment_reference_image:86 - Determining optimal number of clusters for reference image...
2025-10-31 20:03:42,631 - src.models.segmentation.reference - INFO - segment_reference_image:104 - Subsampling 16384 pixels to 10000 for reference k-determination
2025-10-31 20:03:42,664 - src.models.segmentation.strategy - INFO - determine_k:58 - Unique colors: 261. Adjusted k-range: [2, 3]
2025-10-31 20:03:42,664 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=2 for cluster metrics...
2025-10-31 20:03:44,985 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=3 for cluster metrics...
2025-10-31 20:03:47,281 - src.models.segmentation.strategy - INFO - determine_k:122 - Optimal k determined: 2 (score: 1.000)
2025-10-31 20:03:47,281 - src.models.segmentation.reference - INFO - segment_reference_image:111 - Optimal clusters determined for reference: 2
2025-10-31 20:03:47,281 - src.models.segmentation.reference - INFO - timer:32 - Starting: Reference K-Means (k=2)...
2025-10-31 20:03:47,281 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-31 20:03:47,281 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-31 20:03:47,298 - src.models.segmentation.reference - INFO - timer:37 - Completed: Reference K-Means (k=2) in 0.01 seconds
2025-10-31 20:03:47,299 - src.models.segmentation.reference - INFO - timer:32 - Starting: Reference SOM (k=2)...
2025-10-31 20:03:47,299 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-31 20:03:47,300 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-31 20:03:47,714 - src.models.segmentation.reference - INFO - timer:37 - Completed: Reference SOM (k=2) in 0.42 seconds
2025-10-31 20:03:47,714 - src.models.segmentation.reference - INFO - segment_reference_image:170 - Reference segmentation (KMeans, SOM, k-determination) finished in 5.08 seconds.
2025-10-31 20:03:47,714 - src.pipeline - INFO - timer:58 - Completed: Reference Image Processing in 9.38 seconds
2025-10-31 20:03:47,714 - src.pipeline - INFO - timer:58 - Completed: Total Pipeline in 15.96 seconds
2025-10-31 20:03:47,714 - src.pipeline - CRITICAL - run:185 - Pipeline execution failed: Reference K-Means segmentation failed or was invalid, cannot extract target colors.
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 163, in run
    target_colors_lab, ref_kmeans_result, ref_som_result = self._run_reference_processing()
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 293, in _run_reference_processing
    raise ValueError("Reference K-Means segmentation failed or was invalid, cannot extract target colors.")
ValueError: Reference K-Means segmentation failed or was invalid, cannot extract target colors.
2025-10-31 20:03:47,714 - __main__ - CRITICAL - main:107 - A critical error occurred in main execution: Reference K-Means segmentation failed or was invalid, cannot extract target colors.
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\main.py", line 98, in main
    pipeline.run()
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 163, in run
    target_colors_lab, ref_kmeans_result, ref_som_result = self._run_reference_processing()
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 293, in _run_reference_processing
    raise ValueError("Reference K-Means segmentation failed or was invalid, cannot extract target colors.")
ValueError: Reference K-Means segmentation failed or was invalid, cannot extract target colors.
2025-10-31 20:03:47,740 - __main__ - INFO - main:119 - ================================================================================
PROCESSING COMPLETED IN 16.01 SECONDS
================================================================================
2025-10-31 20:11:04,090 - root - DEBUG - setup_logging:87 - Console handler stream encoding set to UTF-8.
2025-10-31 20:11:04,090 - root - INFO - setup_logging:95 - Logging setup complete. Console level: INFO. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-31 20:11:04,090 - __main__ - INFO - main:87 - Main function started. Initializing processing pipeline...
2025-10-31 20:11:04,091 - src.pipeline - INFO - _load_and_validate_config:117 - Loading configuration from: C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml
2025-10-31 20:11:04,098 - src.data.load_data - INFO - load_config:47 - Loaded default configuration from C:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-31 20:11:04,101 - src.data.load_data - INFO - load_config:57 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-31 20:11:04,101 - src.data.load_data - INFO - load_config:62 - Merged specific configuration over defaults.
2025-10-31 20:11:04,102 - src.data.load_data - INFO - load_config:70 - Configuration loaded successfully.
2025-10-31 20:11:04,102 - root - DEBUG - validate_processing_config:130 - Starting configuration validation...
2025-10-31 20:11:04,103 - root - DEBUG - validate_processing_config:177 - Reference image path validated: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-31 20:11:04,104 - root - DEBUG - validate_processing_config:198 - Validated 5 test image paths.
2025-10-31 20:11:04,104 - root - INFO - validate_processing_config:215 - Configuration validation passed successfully.
2025-10-31 20:11:04,106 - src.utils.output_manager - DEBUG - _create_directories:85 - Ensured output directory structure exists for dataset 'block'.
2025-10-31 20:11:04,106 - src.utils.output_manager - INFO - __init__:46 - OutputManager initialized for dataset 'block'. Output directory: C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-31 20:11:04,107 - src.pipeline - INFO - _load_and_validate_config:134 - OutputManager initialized successfully for dataset: 'block'
2025-10-31 20:11:04,107 - __main__ - INFO - main:98 - Starting pipeline run for dataset specified in: block_config.yaml
2025-10-31 20:11:04,108 - src.pipeline - INFO - run:150 - ==================================================
2025-10-31 20:11:04,109 - src.pipeline - INFO - run:151 - Processing Pipeline RUN starting for dataset: block
2025-10-31 20:11:04,109 - src.pipeline - INFO - run:152 - ==================================================
2025-10-31 20:11:04,110 - src.pipeline - INFO - timer:53 - Starting: Total Pipeline...
2025-10-31 20:11:04,110 - src.pipeline - INFO - timer:53 - Starting: DBN Training...
2025-10-31 20:11:04,110 - src.pipeline - INFO - _train_dbn_model:199 - Loading images specified in config['test_images'] to generate training data...
2025-10-31 20:11:04,830 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block1.jpg
2025-10-31 20:11:05,708 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block2.jpg
2025-10-31 20:11:06,192 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block3.jpg
2025-10-31 20:11:06,711 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block4.jpg
2025-10-31 20:11:07,225 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block5.jpg
2025-10-31 20:11:07,225 - src.pipeline - INFO - _train_dbn_model:216 - Loading and processing 5 valid images into flattened training arrays...
2025-10-31 20:11:07,226 - src.data.load_data - INFO - load_data:137 - Processing 5 images for training data...
2025-10-31 20:11:09,077 - src.data.load_data - INFO - load_data:167 - Successfully loaded and processed 5/5 images.
2025-10-31 20:11:09,077 - src.data.load_data - INFO - load_data:168 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-31 20:11:09,081 - src.pipeline - DEBUG - _train_dbn_model:225 - Loaded training data shapes - RGB: (5, 30000), LAB: (5, 30000)
2025-10-31 20:11:09,081 - src.pipeline - INFO - _train_dbn_model:227 - Initializing DBNTrainer (Target samples: 800)...
2025-10-31 20:11:09,082 - src.models.dbn_trainer - INFO - __init__:50 - DBNTrainer initialized.
2025-10-31 20:11:09,082 - src.models.dbn_trainer - INFO - train:78 - Starting DBN training and PSO optimization process...
2025-10-31 20:11:09,083 - src.models.dbn_trainer - DEBUG - train:81 - Sampling raw data...
2025-10-31 20:11:09,083 - src.data.sampling - INFO - efficient_data_sampling:53 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-31 20:11:09,084 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 1
2025-10-31 20:11:09,085 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 2
2025-10-31 20:11:09,086 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 3
2025-10-31 20:11:09,086 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 4
2025-10-31 20:11:09,087 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 5
2025-10-31 20:11:09,088 - src.data.sampling - INFO - efficient_data_sampling:123 - Sampling completed: 800 samples extracted.
2025-10-31 20:11:09,088 - src.data.sampling - INFO - efficient_data_sampling:124 - RGB range: [31.00, 214.00]
2025-10-31 20:11:09,089 - src.data.sampling - INFO - efficient_data_sampling:125 - LAB ranges: L[11.76, 84.71], a[-2.00, 2.00], b[-1.00, 8.00]
2025-10-31 20:11:09,089 - src.models.dbn_trainer - DEBUG - train:85 - Sampled data shapes - RGB: (800, 3), LAB: (800, 3)
2025-10-31 20:11:09,089 - src.models.dbn_trainer - DEBUG - train:88 - Splitting data into training/test sets...
2025-10-31 20:11:09,091 - src.models.dbn_trainer - INFO - train:94 - Training set shape: (640, 3), Test set shape: (160, 3)
2025-10-31 20:11:09,092 - src.models.dbn_trainer - DEBUG - train:97 - Preparing data scalers...
2025-10-31 20:11:09,092 - src.models.dbn_trainer - INFO - _prepare_scalers:143 - Preparing and fitting data scalers...
2025-10-31 20:11:09,095 - src.models.dbn_trainer - INFO - _prepare_scalers:167 - Data scaling complete. Scaled X shape: (640, 3), Scaled Y shape: (640, 3)
2025-10-31 20:11:09,095 - src.models.dbn_trainer - DEBUG - _prepare_scalers:168 - Scaled X range: [0.000, 1.000]
2025-10-31 20:11:09,095 - src.models.dbn_trainer - DEBUG - _prepare_scalers:169 - Scaled Y range: [0.000, 1.000]
2025-10-31 20:11:09,096 - src.models.dbn_trainer - DEBUG - train:101 - Initializing DBN model...
2025-10-31 20:11:09,096 - src.models.pso_dbn - INFO - __init__:133 - Initializing DBN: Input(3) -> Hidden([100, 50, 25]) -> Output(3)
2025-10-31 20:11:09,304 - src.models.pso_dbn - INFO - _build_model:178 - DBN Keras model built successfully. Total parameters: 7503
2025-10-31 20:11:09,353 - src.models.dbn_trainer - INFO - train:107 - DBN model initialized with 20 weight layers.
2025-10-31 20:11:09,353 - src.models.dbn_trainer - DEBUG - train:113 - Starting PSO weight optimization...
2025-10-31 20:11:09,354 - src.models.dbn_trainer - INFO - _run_pso_with_retries:189 - Starting PSO optimization with up to 3 retries.
2025-10-31 20:11:09,354 - src.models.dbn_trainer - INFO - _run_pso_with_retries:195 - PSO optimization attempt 1/3
2025-10-31 20:11:09,354 - src.models.pso_dbn - INFO - optimize:363 - Starting PSO optimization with parameters: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-31 20:11:09,359 - src.models.pso_dbn - DEBUG - _calculate_adaptive_bounds:523 - Calculated 7503 adaptive bounds for PSO.
2025-10-31 20:11:09,381 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:09,661 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.140442
2025-10-31 20:11:09,670 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:09,794 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:09,915 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:10,038 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.115242
2025-10-31 20:11:10,045 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:10,201 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:10,363 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:10,502 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:10,632 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:10,772 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:10,891 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.113116
2025-10-31 20:11:10,901 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:11,020 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:11,157 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:11,293 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:11,443 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:11,578 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:11,707 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:11,835 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:11,967 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:12,101 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:12,231 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:12,370 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:12,499 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:12,626 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:12,751 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:12,879 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:13,012 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:13,140 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:13,264 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:13,394 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:13,521 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:13,648 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:13,777 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:13,910 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:14,048 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:14,180 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:14,310 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:14,436 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:14,571 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:14,687 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.105593
2025-10-31 20:11:14,694 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:14,822 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:14,947 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:15,069 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:15,197 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:15,314 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.077228
2025-10-31 20:11:15,322 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:15,449 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:15,577 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:15,707 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:15,835 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:15,959 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:16,084 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:16,218 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:16,343 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:16,467 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:16,593 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:16,751 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:16,874 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:17,000 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:17,126 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:17,250 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:17,373 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:17,497 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:17,622 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:17,747 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:17,879 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:18,004 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:18,135 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:18,260 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:18,388 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:18,509 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:18,633 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:18,758 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:18,894 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:19,015 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:19,142 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:19,267 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:19,398 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:19,522 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:19,668 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:19,830 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:20,078 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:20,209 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:20,335 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:20,463 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:20,590 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:20,718 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:20,845 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:20,965 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:21,099 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:21,226 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:21,352 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:21,483 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:21,609 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:21,745 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:21,872 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:21,996 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:22,147 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:22,277 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:22,435 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:22,567 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:22,701 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:22,859 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:23,056 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:23,229 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:23,383 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:23,531 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:23,697 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:23,858 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:23,985 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:24,113 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:24,300 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:24,479 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:24,621 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:24,761 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:24,883 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:25,020 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:25,150 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:25,280 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:25,412 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:25,553 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:25,708 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:25,856 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:25,996 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:26,136 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:26,275 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:26,405 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:26,528 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:26,658 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:26,792 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:26,915 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:27,040 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:27,172 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:27,297 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:27,428 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:27,556 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:27,728 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.055071
2025-10-31 20:11:27,735 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:27,854 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:27,983 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:28,106 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:28,231 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:28,359 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:28,484 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:28,620 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:28,744 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:28,871 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:28,997 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:29,124 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:29,247 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:29,393 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:29,528 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:29,660 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:29,786 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:29,915 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:30,043 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:30,161 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:30,286 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:30,412 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:30,552 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:30,690 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:30,817 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:30,945 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:31,070 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:31,194 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:31,319 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:31,446 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:31,577 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:31,705 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:31,830 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:31,955 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:32,080 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:32,208 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:32,327 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:32,450 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:32,573 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:32,700 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:32,824 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:32,949 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:33,075 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:33,198 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:33,319 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:33,445 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:33,572 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:33,697 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:33,826 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:33,950 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:34,076 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:34,207 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:34,330 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:34,452 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:34,579 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:34,711 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:34,837 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:34,958 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:35,083 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:35,210 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:35,334 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:35,458 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:35,585 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:35,710 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:35,840 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:35,967 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:36,091 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:36,215 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:36,336 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:36,462 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:36,588 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:36,724 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:36,848 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:36,973 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:37,096 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:37,219 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:37,344 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:37,468 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:37,597 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:37,727 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:37,855 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:37,981 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:38,111 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:38,238 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:38,361 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:38,484 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:38,613 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:38,741 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:38,863 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:38,984 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:39,110 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:39,240 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:39,371 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:39,503 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:39,636 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:39,767 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:39,888 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:40,015 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.052994
2025-10-31 20:11:40,023 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:40,157 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:40,277 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:40,410 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:40,538 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:40,657 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:40,780 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:40,898 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:41,030 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:41,159 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:41,291 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:41,416 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:41,542 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:41,666 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:41,789 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:41,921 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:42,046 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:42,171 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:42,294 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:42,423 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:42,552 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:42,681 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:42,806 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:42,934 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:43,059 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:43,252 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:43,381 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:43,506 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:43,638 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:43,763 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:43,895 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:44,037 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:44,160 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:44,279 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:44,416 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:44,544 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:44,671 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:44,791 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.045302
2025-10-31 20:11:44,798 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:44,932 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:45,058 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:45,186 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:45,311 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:45,437 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:45,568 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:45,693 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:45,820 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:45,946 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:46,071 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:46,207 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:46,329 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:46,454 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:46,582 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:46,710 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:46,833 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:46,963 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:47,087 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:47,214 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:47,338 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:47,466 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:47,596 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:47,720 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:47,839 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:47,973 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:48,103 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:48,229 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:48,352 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:48,475 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:48,600 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:48,735 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:48,859 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:48,986 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:49,108 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:49,236 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:49,363 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:49,485 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:49,615 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:49,740 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:49,861 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:49,999 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:50,125 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:50,248 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:50,372 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:50,493 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:50,633 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:50,758 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:50,883 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:51,008 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:51,137 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:51,269 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:51,394 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:51,523 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:51,655 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:51,781 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:51,916 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:52,045 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:52,170 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:52,295 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:52,413 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.039008
2025-10-31 20:11:52,420 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:52,542 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:52,668 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:52,797 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:52,929 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:53,051 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:53,173 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:53,297 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:53,420 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:53,547 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:53,671 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:53,785 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.032978
2025-10-31 20:11:53,795 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:53,918 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:54,046 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:54,171 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:54,295 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:54,415 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:54,539 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:54,665 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:54,795 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:54,921 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:55,049 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:55,178 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:55,307 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:55,435 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:55,553 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:55,674 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:55,796 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:55,916 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:56,040 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:56,169 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:56,298 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:56,426 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:56,551 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:56,684 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:56,808 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:56,935 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:57,058 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:57,183 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:57,307 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:57,433 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:57,557 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:57,692 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:57,817 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:57,948 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:58,070 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:58,187 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:58,307 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:58,434 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:58,558 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:58,729 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:58,856 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:58,988 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:59,113 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:59,241 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:59,368 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:59,493 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:59,623 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:59,747 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:11:59,876 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:00,006 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:00,142 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:00,266 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:00,390 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:00,512 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:00,641 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:00,763 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:00,889 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:01,014 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:01,139 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:01,261 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:01,390 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:01,518 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:01,638 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:01,760 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:01,887 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:02,011 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:02,135 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:02,257 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:02,381 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:02,504 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:02,629 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:02,754 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:02,878 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:03,003 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:03,126 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:03,255 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:03,384 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:03,507 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:03,631 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:03,756 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:03,884 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:04,018 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:04,145 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:04,270 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:04,394 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:04,520 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:04,639 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:04,768 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:04,892 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:05,019 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:05,141 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:05,268 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:05,393 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:05,513 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:05,645 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:05,769 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:05,888 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:06,014 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:06,138 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:06,263 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:06,382 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.026766
2025-10-31 20:12:06,392 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:06,521 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:06,648 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:06,771 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:06,897 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:07,025 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:07,154 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:07,290 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:07,418 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:07,544 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:07,673 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:07,797 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:07,919 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:08,048 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:08,174 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:08,297 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:08,421 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:08,551 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:08,678 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:08,800 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:08,931 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:09,059 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:09,185 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:09,316 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:09,445 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:09,574 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:09,700 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:09,826 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:09,963 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:10,083 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:10,217 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:10,346 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:10,470 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:10,594 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:10,718 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:10,848 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:10,976 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:11,098 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:11,223 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:11,349 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:11,466 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.025341
2025-10-31 20:12:11,476 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:11,598 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:11,722 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:11,847 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:12,003 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:12,149 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:12,279 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:12,414 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.022681
2025-10-31 20:12:12,428 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:12,616 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:12,745 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:12,871 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:13,014 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:13,150 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:13,285 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:13,427 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:13,563 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:13,701 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:13,840 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:13,983 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:14,121 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:14,267 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:14,402 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:14,539 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:14,680 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:14,813 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:14,949 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:15,101 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:15,235 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:15,367 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:15,496 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:15,619 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:15,744 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:15,871 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:16,001 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:16,125 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:16,248 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:16,372 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:16,502 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:16,638 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:16,763 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:16,894 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:17,026 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:17,163 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:17,293 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:17,425 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:17,553 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:17,675 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:17,805 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:17,944 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:18,074 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:18,208 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:18,337 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:18,476 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:18,606 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:18,741 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:18,864 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:18,985 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:19,105 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:19,258 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:19,400 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:19,548 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:19,674 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:19,807 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:19,938 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:20,069 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:20,212 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:20,343 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:20,474 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:20,598 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:20,725 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:20,862 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:20,988 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:21,109 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:21,231 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:21,356 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:21,488 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:21,609 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:21,730 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:21,851 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:21,979 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:22,105 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:22,281 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:22,407 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:22,534 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:22,667 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:22,793 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:22,920 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:23,050 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:23,183 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:23,309 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:23,439 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:23,564 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:23,695 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:23,824 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:23,954 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:24,082 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:24,211 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:24,336 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:24,466 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:24,593 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:24,723 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:24,851 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:24,979 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:25,102 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:25,233 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.019278
2025-10-31 20:12:25,240 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:25,367 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:25,493 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:25,621 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:25,752 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:25,878 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:26,008 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:26,135 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:26,267 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:26,391 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:26,520 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:26,650 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:26,778 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:26,912 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:27,038 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:27,169 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:27,304 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:27,434 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:27,561 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:27,691 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:27,815 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:27,940 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:28,065 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:28,192 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:28,333 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:28,464 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:28,593 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:28,715 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:28,840 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:28,963 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:29,098 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:29,222 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:29,352 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:29,481 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:29,605 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:29,732 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:29,863 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:29,987 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:30,114 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:30,239 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:30,370 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:30,513 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:30,646 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:30,777 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:30,898 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:31,022 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:31,145 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:31,284 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:31,417 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:31,561 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:31,694 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:31,815 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:31,939 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:32,073 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:32,201 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:32,330 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:32,459 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:32,589 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:32,709 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.019128
2025-10-31 20:12:32,715 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:32,844 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:32,979 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:33,110 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:33,241 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:33,367 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:33,492 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:33,621 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:33,758 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:33,887 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:34,014 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:34,140 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:34,270 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:34,399 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:34,527 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:34,661 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:34,790 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:34,918 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:35,048 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:35,176 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:35,308 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:35,447 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:35,581 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:35,715 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:35,843 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:35,969 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:36,095 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:36,226 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:36,348 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:36,490 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:36,620 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:36,747 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:36,877 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:37,008 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:37,136 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:37,271 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:37,395 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:37,522 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:37,649 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:37,775 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:37,905 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:38,029 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:38,152 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:38,282 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:38,426 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:38,548 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:38,682 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:38,817 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:38,945 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:39,069 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:39,202 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:39,324 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:39,518 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:39,643 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:39,766 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:39,889 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:40,013 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:40,140 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:40,266 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:40,391 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:40,513 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:40,651 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:40,775 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:40,902 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:41,027 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:41,153 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:41,277 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:41,396 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:41,528 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:41,654 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:41,773 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:41,899 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:42,031 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:42,154 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:42,280 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:42,414 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:42,544 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:42,668 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:42,797 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:42,926 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:43,052 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:43,176 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:43,304 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:43,428 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:43,551 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:43,676 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:43,803 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:43,935 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:44,063 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:44,191 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:44,320 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:44,444 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:44,569 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:44,692 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:44,819 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:44,942 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:45,064 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:45,193 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:45,341 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:45,461 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:45,586 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:45,713 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:45,840 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:45,966 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:46,094 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:46,218 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:46,346 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:46,478 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:46,603 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:46,730 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:46,852 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:46,975 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:47,097 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:47,224 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:47,348 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:47,477 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:47,603 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:47,730 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:47,859 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:47,988 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:48,114 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.018324
2025-10-31 20:12:48,121 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:48,252 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:48,376 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:48,505 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:48,632 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:48,755 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:48,878 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:49,010 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:49,148 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:49,272 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:49,404 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:49,534 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:49,658 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:49,786 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:49,914 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:50,038 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:50,171 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:50,297 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:50,434 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:50,561 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:50,697 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:50,823 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:50,952 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:51,077 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:51,207 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:51,332 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:51,457 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:51,584 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:51,708 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:51,830 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:51,976 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:52,138 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:52,262 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:52,386 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:52,508 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:52,633 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:52,759 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:52,895 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:53,025 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:53,149 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:53,271 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:53,395 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:53,521 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:53,645 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:53,772 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:53,903 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:54,031 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:54,158 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:54,279 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:54,411 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:54,536 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:54,668 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:54,792 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:54,918 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:55,045 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:55,170 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:55,298 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:55,435 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:55,567 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:55,691 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:55,863 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:55,990 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:56,114 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:56,238 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:56,369 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:56,493 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:56,617 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:56,741 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:56,874 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:56,999 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:57,124 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:57,249 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:57,374 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:57,505 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:57,630 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:57,754 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:57,885 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:58,015 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:58,143 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:58,267 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:58,392 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:58,518 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:58,643 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:58,778 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:58,903 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:59,023 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:59,151 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:59,282 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:59,401 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:59,531 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:59,656 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:59,782 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:12:59,912 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:00,036 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:00,166 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:00,291 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:00,421 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:00,551 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:00,680 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:00,808 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:00,941 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:01,063 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:01,194 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:01,314 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:01,434 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:01,559 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:01,688 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:01,813 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:01,939 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:02,080 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:02,207 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:02,332 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:02,457 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:02,588 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:02,710 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:02,832 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:02,958 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:03,090 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:03,215 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:03,340 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:03,472 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:03,598 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:03,725 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:03,854 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:03,984 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:04,108 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:04,232 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:04,359 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:04,488 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:04,607 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:04,731 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:04,853 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:04,996 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:05,121 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:05,248 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:05,374 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:05,504 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:05,628 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:05,759 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:05,894 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:06,026 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:06,155 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:06,277 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:06,396 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:06,521 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:06,649 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:06,777 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:06,900 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:07,027 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:07,154 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:07,282 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:07,408 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:07,543 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:07,672 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:07,799 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:07,930 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:08,056 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:08,190 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:08,325 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:08,452 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:08,576 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:08,701 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:08,824 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:08,944 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:09,067 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:09,191 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:09,315 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:09,441 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:09,564 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:09,687 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:09,812 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:09,939 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:10,063 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:10,187 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:10,311 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:10,433 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:10,559 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:10,687 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:10,819 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:10,944 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:11,074 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:11,202 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:11,333 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:11,457 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:11,581 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:11,707 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:11,836 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:12,014 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:12,139 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:12,267 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:12,391 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:12,514 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:12,640 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:12,765 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:12,882 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:13,005 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:13,139 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:13,268 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:13,391 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:13,515 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:13,646 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:13,775 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:13,907 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:14,032 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:14,154 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:14,280 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:14,405 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:14,530 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:14,657 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:14,782 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:14,913 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:15,034 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:15,157 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:15,278 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:15,400 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:15,522 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:15,651 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:15,782 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:15,914 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:16,037 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:16,167 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:16,295 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:16,422 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:16,550 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:16,678 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:16,802 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:16,928 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:17,060 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:17,184 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:17,307 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:17,436 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:17,559 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:17,684 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:17,807 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:17,933 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:18,064 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:18,193 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:18,315 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:18,448 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:18,576 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:18,703 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:18,840 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:18,968 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:19,096 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:19,220 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:19,347 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:19,479 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:19,606 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:19,742 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:19,873 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:20,000 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:20,133 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:20,267 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:20,394 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:20,520 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:20,644 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:20,768 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:20,896 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:21,014 - src.models.pso_dbn - INFO - optimize:453 - PSO optimization process completed in 131.65s. Reported final fitness: 0.018324, Best fitness found: 0.018324
2025-10-31 20:13:21,023 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:13:21,023 - src.models.dbn_trainer - INFO - _run_pso_with_retries:215 - PSO attempt 1 completed successfully.
2025-10-31 20:13:21,031 - src.models.dbn_trainer - INFO - train:117 - DBN training and PSO optimization completed successfully.
2025-10-31 20:13:21,032 - src.pipeline - INFO - _train_dbn_model:232 - DBN training and scaling completed.
2025-10-31 20:13:21,035 - src.pipeline - INFO - timer:58 - Completed: DBN Training in 136.92 seconds
2025-10-31 20:13:21,035 - src.pipeline - INFO - timer:53 - Starting: Reference Image Processing...
2025-10-31 20:13:21,035 - src.pipeline - INFO - _run_reference_processing:251 - Processing reference image specified in config: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-31 20:13:22,620 - root - INFO - save_reference_image:177 - Saved reference image copy to: datasets\block\inputs\reference_image\reference.png
2025-10-31 20:13:22,621 - src.pipeline - INFO - _run_reference_processing:261 - Preprocessing reference image...
2025-10-31 20:13:22,621 - src.data.preprocess - DEBUG - __init__:43 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-31 20:13:22,621 - src.data.preprocess - INFO - preprocess:204 - Starting preprocessing pipeline for image with shape: (4480, 4480, 3)
2025-10-31 20:13:22,651 - src.data.preprocess - INFO - preprocess:216 - Initial resize from 4480x4480 to 512x512
2025-10-31 20:13:23,985 - src.data.preprocess - INFO - preprocess:224 - Applied non-local means denoising with h=10
2025-10-31 20:13:23,986 - src.data.preprocess - DEBUG - unsharp_mask:187 - Unsharp mask amount is zero or less, skipping.
2025-10-31 20:13:23,986 - src.data.preprocess - DEBUG - _estimate_n_colors:67 - Subsampling pixels (262144) for unique color estimation.
2025-10-31 20:13:24,051 - src.data.preprocess - INFO - _estimate_n_colors:76 - Estimated 244 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-31 20:13:24,051 - src.data.preprocess - INFO - quantize_image:106 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-31 20:13:24,053 - src.data.preprocess - DEBUG - quantize_image:127 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-31 20:13:24,904 - src.data.preprocess - INFO - quantize_image:147 - Quantization complete. Final unique colors: 50 (target was 50)
2025-10-31 20:13:24,906 - src.data.preprocess - INFO - preprocess:246 - Final resize to target size (128, 128)
2025-10-31 20:13:24,907 - src.data.preprocess - INFO - preprocess:251 - Preprocessing pipeline completed successfully.
2025-10-31 20:13:24,907 - src.models.segmentation.reference - INFO - segment_reference_image:69 - Starting reference image segmentation (K-Means & SOM)...
2025-10-31 20:13:24,908 - src.models.segmentation.reference - INFO - segment_reference_image:86 - Determining optimal number of clusters for reference image...
2025-10-31 20:13:24,908 - src.models.segmentation.reference - INFO - segment_reference_image:104 - Subsampling 16384 pixels to 10000 for reference k-determination
2025-10-31 20:13:24,919 - src.models.segmentation.strategy - INFO - determine_k:58 - Unique colors: 248. Adjusted k-range: [2, 3]
2025-10-31 20:13:24,919 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=2 for cluster metrics...
2025-10-31 20:13:26,783 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=3 for cluster metrics...
2025-10-31 20:13:28,601 - src.models.segmentation.strategy - INFO - determine_k:122 - Optimal k determined: 2 (score: 1.000)
2025-10-31 20:13:28,601 - src.models.segmentation.reference - INFO - segment_reference_image:111 - Optimal clusters determined for reference: 2
2025-10-31 20:13:28,602 - src.models.segmentation.reference - INFO - timer:32 - Starting: Reference K-Means (k=2)...
2025-10-31 20:13:28,602 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-31 20:13:28,602 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-31 20:13:28,611 - src.models.segmentation.reference - INFO - timer:37 - Completed: Reference K-Means (k=2) in 0.01 seconds
2025-10-31 20:13:28,612 - src.models.segmentation.reference - INFO - timer:32 - Starting: Reference SOM (k=2)...
2025-10-31 20:13:28,612 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-31 20:13:28,612 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-31 20:13:28,956 - src.models.segmentation.reference - INFO - timer:37 - Completed: Reference SOM (k=2) in 0.34 seconds
2025-10-31 20:13:28,956 - src.models.segmentation.reference - INFO - segment_reference_image:170 - Reference segmentation (KMeans, SOM, k-determination) finished in 4.05 seconds.
2025-10-31 20:13:29,349 - matplotlib.pyplot - DEBUG - switch_backend:482 - Loaded backend tkagg version 8.6.
2025-10-31 20:13:29,707 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:13:29,707 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:13:29,707 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:13:29,707 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:13:29,707 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:13:29,765 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:13:29,765 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:13:29,765 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:13:29,765 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:13:29,765 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:13:29,797 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:13:29,797 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:13:29,797 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:13:29,798 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:13:29,798 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:13:29,804 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:13:29,805 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:13:29,805 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:13:29,805 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:13:29,805 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:13:29,812 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:13:29,812 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:13:29,812 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:13:29,812 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:13:29,812 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:13:29,818 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:13:29,818 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:13:29,818 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:13:29,818 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:13:29,818 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:13:29,824 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:13:29,825 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:13:29,825 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:13:29,825 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:13:29,825 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:13:29,831 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:13:29,831 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:13:29,831 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:13:29,831 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:13:29,831 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:13:29,836 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:13:29,836 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:13:29,836 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:13:29,836 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:13:29,836 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:13:29,845 - matplotlib.font_manager - DEBUG - _findfont_cached:1413 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2025-10-31 20:13:29,845 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,845 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-10-31 20:13:29,845 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,845 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,846 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,846 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,846 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,846 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,846 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,846 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,846 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,846 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-10-31 20:13:29,846 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,846 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,846 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,847 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,847 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,847 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,847 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,847 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,847 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,847 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,847 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-10-31 20:13:29,847 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,847 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,848 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,848 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,848 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,848 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,848 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,848 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,848 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,848 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-10-31 20:13:29,848 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,848 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,848 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,849 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,849 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,849 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:29,849 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,849 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-10-31 20:13:29,849 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:29,849 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:29,849 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:29,849 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,849 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,849 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,849 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,850 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,850 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,850 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,850 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,850 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,850 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,850 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,850 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,850 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:29,850 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,850 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-10-31 20:13:29,851 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:29,851 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,851 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:13:29,851 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,851 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:29,851 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,851 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,851 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,851 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,851 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,851 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,852 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,852 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,852 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,852 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:29,852 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,852 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,852 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,852 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:29,852 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:13:29,852 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,852 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:29,852 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:29,853 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,853 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,853 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,853 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:29,853 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,853 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,853 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,853 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,853 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,853 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,853 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,853 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,854 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,854 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,854 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,854 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,854 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,854 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,854 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,854 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,854 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,854 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,854 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,854 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:29,855 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,855 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,855 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,855 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,855 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,855 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:29,855 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,856 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,856 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:29,856 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
2025-10-31 20:13:29,856 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,856 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:29,856 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,856 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,856 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:13:29,857 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,857 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,857 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,857 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,857 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,857 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,857 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:29,857 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,857 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,857 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:29,857 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:29,858 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,858 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:29,858 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
2025-10-31 20:13:29,858 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:29,858 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,858 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,858 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-10-31 20:13:29,858 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,858 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,858 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,858 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,858 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,859 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-10-31 20:13:29,859 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,859 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,859 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,859 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:29,859 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:29,859 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,859 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,859 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,859 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,859 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:29,860 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,860 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,860 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,860 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,860 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,860 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,860 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,860 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,860 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,860 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,860 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,860 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,861 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:29,861 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:13:29,861 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:29,861 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,861 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:13:29,861 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,861 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,861 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,861 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,861 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:29,861 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,861 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,862 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:29,862 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,862 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,862 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,862 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,862 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,862 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:13:29,862 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,862 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,862 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:13:29,862 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,862 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-10-31 20:13:29,863 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,863 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,863 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,863 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,863 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,863 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,863 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,863 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,863 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,863 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,863 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,864 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
2025-10-31 20:13:29,864 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,864 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,864 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:13:29,864 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,864 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,864 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
2025-10-31 20:13:29,864 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,864 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,864 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,864 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,864 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,865 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,865 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,865 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,865 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,865 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,865 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,865 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,865 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,865 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,865 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,865 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,865 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,866 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,866 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,866 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:29,866 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,866 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-10-31 20:13:29,866 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,866 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,866 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,866 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,866 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,866 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,866 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,867 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,867 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,867 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,867 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,867 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,867 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,867 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,867 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,867 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,867 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,867 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:29,867 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:13:29,868 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,868 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:13:29,868 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,868 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
2025-10-31 20:13:29,868 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,868 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-10-31 20:13:29,868 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,868 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,868 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,868 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,868 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:13:29,869 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,869 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,869 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,869 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,869 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,869 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:13:29,869 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,869 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,869 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,869 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:29,869 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,870 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,870 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,870 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,870 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,870 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,870 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,870 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:29,870 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,870 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,870 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:29,870 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,870 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,871 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,871 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,871 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,871 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,871 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,871 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,871 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,871 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,871 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,871 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,872 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:13:29,872 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,872 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,872 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,872 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,872 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,872 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,872 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,873 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,873 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:29,873 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,873 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,873 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:29,873 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,873 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,873 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,873 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,874 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,874 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:29,874 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,874 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,874 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-10-31 20:13:29,874 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
2025-10-31 20:13:29,874 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,874 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,874 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,874 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-10-31 20:13:29,874 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,875 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,875 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,875 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,875 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,875 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,875 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,875 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:29,875 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,875 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,875 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:29,875 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:29,875 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,876 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:29,876 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,876 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,876 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,876 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,876 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:29,876 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,876 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,876 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,876 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,876 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,876 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,877 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,877 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,877 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,877 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,877 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,877 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,877 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,877 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,877 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,877 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,877 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,878 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:13:29,878 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,878 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,878 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,878 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,878 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-10-31 20:13:29,878 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,878 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,878 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,878 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,878 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:29,878 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,879 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-10-31 20:13:29,879 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:29,879 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:29,879 - matplotlib.font_manager - DEBUG - _findfont_cached:1457 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2025-10-31 20:13:30,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1413 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2025-10-31 20:13:30,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-10-31 20:13:30,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-10-31 20:13:30,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-10-31 20:13:30,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-10-31 20:13:30,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-10-31 20:13:30,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,084 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,084 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,084 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,084 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,084 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,084 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,084 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,084 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,084 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,084 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,084 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,085 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,085 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,085 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,085 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,085 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,085 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-10-31 20:13:30,085 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,085 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,085 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:13:30,085 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,085 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,085 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,086 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,086 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,086 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,086 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,086 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,086 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,086 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,086 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,086 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,086 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,086 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,086 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,087 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:30,087 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:13:30,087 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,087 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,087 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,087 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,087 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,087 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,087 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,087 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,087 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,087 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,088 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,088 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,088 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,088 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,088 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,088 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,088 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,089 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,089 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,089 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,089 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,089 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,089 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,090 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,090 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,090 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,090 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,090 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,090 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,091 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,091 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,091 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,091 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,091 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,091 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,092 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,092 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
2025-10-31 20:13:30,092 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,092 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,092 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,092 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,092 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:13:30,092 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,092 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,093 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,093 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,093 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,093 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,093 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,093 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,093 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,093 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,093 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:30,093 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,093 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,094 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
2025-10-31 20:13:30,094 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,094 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,094 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,094 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-10-31 20:13:30,094 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,094 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,094 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,094 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,094 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,095 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-10-31 20:13:30,095 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,095 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,095 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,095 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,095 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,095 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,095 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,095 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,095 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,096 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,096 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,096 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,096 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,096 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,096 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,096 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,096 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,096 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,096 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,097 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,097 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,097 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,097 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:30,097 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:13:30,097 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,097 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,097 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:13:30,097 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,097 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,098 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,098 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,098 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:30,098 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,098 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,098 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,098 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,098 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,098 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,098 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,099 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,099 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:13:30,099 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,099 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,099 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:13:30,099 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,099 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-10-31 20:13:30,099 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,099 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,099 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,099 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,100 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,100 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,100 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,100 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,100 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,100 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,100 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,100 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
2025-10-31 20:13:30,100 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,100 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,101 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:13:30,101 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,101 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,101 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
2025-10-31 20:13:30,101 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,101 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,101 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,101 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,101 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,101 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,102 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,102 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,102 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,102 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,102 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,102 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,102 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,102 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,102 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,102 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,102 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,103 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,103 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,103 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,103 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,103 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-10-31 20:13:30,103 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,103 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,103 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,103 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,103 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,104 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,104 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,104 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,104 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,104 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,104 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,104 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,104 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,104 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,105 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,105 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,105 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,105 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,105 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:13:30,105 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,105 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:13:30,105 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,106 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
2025-10-31 20:13:30,106 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,106 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-10-31 20:13:30,106 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,106 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,106 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,106 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,106 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:13:30,106 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,106 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,106 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,107 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,107 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,107 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:13:30,107 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,107 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,107 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,107 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,107 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,107 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,107 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,108 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,108 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,108 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,108 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,108 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,108 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,108 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,108 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,108 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,108 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,108 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,109 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,109 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,109 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,109 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,109 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,109 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,109 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,109 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,109 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,109 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:13:30,110 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,110 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,110 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,110 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,110 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,110 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,110 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,110 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,110 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,110 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,110 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,111 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,111 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,111 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,111 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,111 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,111 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,111 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,111 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,111 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,111 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-10-31 20:13:30,111 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
2025-10-31 20:13:30,112 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,112 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,112 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,112 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-10-31 20:13:30,112 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,112 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,112 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,112 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,112 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,112 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,113 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,113 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,113 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,113 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,113 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,113 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,113 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,113 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,113 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,113 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,113 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,114 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,114 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,114 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,114 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,114 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,114 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,114 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,114 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,114 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,114 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,115 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,115 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,115 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,115 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,115 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,115 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,115 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,115 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,115 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,115 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:13:30,115 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,116 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,116 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,116 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,116 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-10-31 20:13:30,116 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,116 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,116 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,116 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,116 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,116 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,117 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-10-31 20:13:30,117 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,117 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,117 - matplotlib.font_manager - DEBUG - _findfont_cached:1457 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2025-10-31 20:13:30,159 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:13:30,160 - matplotlib.font_manager - DEBUG - _findfont_cached:1413 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=8.0.
2025-10-31 20:13:30,160 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,160 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-10-31 20:13:30,160 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,160 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,160 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,160 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,160 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,160 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,161 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,161 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,161 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,161 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-10-31 20:13:30,161 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,161 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,161 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,161 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,161 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,161 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,161 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,161 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,162 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,162 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,162 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-10-31 20:13:30,162 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,162 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,162 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,162 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,162 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,162 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,162 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,162 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,162 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,163 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-10-31 20:13:30,163 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,163 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,163 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,163 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,163 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,163 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,163 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,163 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-10-31 20:13:30,163 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,163 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,164 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,164 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,164 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,164 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,164 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,164 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,164 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,164 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,164 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,164 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,164 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,164 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,165 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,165 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,165 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,165 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-10-31 20:13:30,165 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,165 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,165 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:13:30,165 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,165 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,165 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,165 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,165 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,166 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,166 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,166 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,166 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,166 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,166 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,166 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,166 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,166 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,166 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,166 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:30,166 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:13:30,167 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,167 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,167 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,167 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,167 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,167 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,167 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,167 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,167 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,167 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,167 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,167 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,168 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,168 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,168 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,168 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,168 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,168 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,168 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,168 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,168 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,168 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,168 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,168 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,169 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,169 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,169 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,169 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,169 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,169 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,169 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,169 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,169 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,169 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,169 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,170 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,170 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
2025-10-31 20:13:30,170 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,170 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,170 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,170 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,170 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:13:30,170 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,170 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,170 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,170 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,170 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,171 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,171 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,171 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,171 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,171 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,171 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:30,171 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,171 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,171 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
2025-10-31 20:13:30,172 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,172 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,172 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,172 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-10-31 20:13:30,172 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,172 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,172 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,172 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,172 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,172 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-10-31 20:13:30,173 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,173 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,173 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,173 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,173 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,173 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,173 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,173 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,173 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,173 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,173 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,173 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,174 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,174 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,174 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,174 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,174 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,174 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,174 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,174 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,174 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,174 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,174 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:30,174 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:13:30,175 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,175 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,175 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:13:30,175 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,175 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,175 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,175 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,175 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:30,175 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,175 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,175 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,175 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,176 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,176 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,176 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,176 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,176 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:13:30,176 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,176 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,176 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:13:30,176 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,176 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-10-31 20:13:30,176 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,177 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,177 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,177 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,177 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,177 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,177 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,177 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,177 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,177 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,177 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,177 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
2025-10-31 20:13:30,177 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,178 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,178 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:13:30,178 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,178 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,178 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
2025-10-31 20:13:30,178 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,178 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,178 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,178 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,178 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,178 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,178 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,179 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,179 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,179 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,179 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,179 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,179 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,179 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,179 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,179 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,179 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,179 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,179 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,180 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,180 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,180 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-10-31 20:13:30,180 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,180 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,180 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,180 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,180 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,180 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,180 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,180 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,181 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,181 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,181 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,181 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,181 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,181 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,181 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,181 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,181 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,181 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,181 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:13:30,182 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,182 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:13:30,182 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,182 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
2025-10-31 20:13:30,182 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,182 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-10-31 20:13:30,182 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,182 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,182 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,182 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,182 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:13:30,182 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,183 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,183 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,183 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,183 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,183 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:13:30,183 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,183 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,183 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,183 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,183 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,184 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,184 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,184 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,184 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,184 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,184 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,185 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,185 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,185 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,185 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,185 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,185 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,185 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,185 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,185 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,185 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,185 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,186 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,186 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,186 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,186 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,186 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,186 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:13:30,186 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,186 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,187 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,187 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,187 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,187 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,187 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,187 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,187 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,187 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,187 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,188 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,188 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,188 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,188 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,188 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,188 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,188 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,188 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,189 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,189 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-10-31 20:13:30,189 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
2025-10-31 20:13:30,189 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,189 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,189 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,189 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-10-31 20:13:30,189 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,189 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,189 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,189 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,190 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,190 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,190 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,190 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,190 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,190 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,190 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,190 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,190 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,190 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,190 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,190 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,191 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,191 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,191 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,191 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,191 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,191 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,191 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,191 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,191 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,191 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,191 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,191 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,192 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,192 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,192 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,192 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,192 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,192 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,192 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,192 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,192 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:13:30,192 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,192 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,192 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,193 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,193 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-10-31 20:13:30,193 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,193 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,193 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,193 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,193 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,193 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,193 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-10-31 20:13:30,193 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,193 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,193 - matplotlib.font_manager - DEBUG - _findfont_cached:1457 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=8.0 to DejaVu Sans ('C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2025-10-31 20:13:30,197 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:13:30,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1413 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.0.
2025-10-31 20:13:30,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-10-31 20:13:30,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-10-31 20:13:30,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-10-31 20:13:30,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-10-31 20:13:30,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-10-31 20:13:30,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,205 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,205 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,205 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,205 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,205 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,205 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,205 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,205 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-10-31 20:13:30,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:13:30,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:30,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:13:30,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
2025-10-31 20:13:30,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:13:30,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:30,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
2025-10-31 20:13:30,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-10-31 20:13:30,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-10-31 20:13:30,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:30,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:13:30,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:13:30,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:13:30,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:13:30,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:13:30,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-10-31 20:13:30,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
2025-10-31 20:13:30,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:13:30,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
2025-10-31 20:13:30,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-10-31 20:13:30,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:13:30,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:13:30,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
2025-10-31 20:13:30,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-10-31 20:13:30,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:13:30,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:13:30,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:13:30,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:13:30,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:13:30,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-10-31 20:13:30,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
2025-10-31 20:13:30,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-10-31 20:13:30,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,231 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,231 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,231 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,231 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:13:30,231 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,231 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,231 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:13:30,231 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,231 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,231 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,231 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,231 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:13:30,232 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,232 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,232 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,232 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,232 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,232 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,232 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,232 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,232 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,232 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,233 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,233 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,233 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,233 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,233 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,233 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,233 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,233 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:13:30,233 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,233 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,233 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,233 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,234 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-10-31 20:13:30,234 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,234 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,234 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,234 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,234 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:13:30,234 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,234 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-10-31 20:13:30,234 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:13:30,234 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:13:30,234 - matplotlib.font_manager - DEBUG - _findfont_cached:1457 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.0 to DejaVu Sans ('C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2025-10-31 20:13:30,265 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:13:30,266 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:13:30,909 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:13:30,914 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:13:30,945 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:13:30,947 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:13:31,607 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:13:31,614 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:13:32,001 - src.utils.visualization - INFO - plot_reference_summary:178 - Reference summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\summaries\reference_summary.png
2025-10-31 20:13:32,013 - src.pipeline - INFO - _run_reference_processing:322 - Reference image processed successfully. Determined k=2. Extracted 2 target LAB colors.
2025-10-31 20:13:32,019 - src.pipeline - INFO - timer:58 - Completed: Reference Image Processing in 10.98 seconds
2025-10-31 20:13:32,019 - src.pipeline - INFO - timer:53 - Starting: Test Image Analysis Loop...
2025-10-31 20:13:32,020 - src.pipeline - INFO - _run_test_image_analysis:346 - Starting test image analysis loop...
2025-10-31 20:13:32,020 - src.pipeline - INFO - _run_test_image_analysis:352 - --- Processing test image: block1 ---
2025-10-31 20:13:32,331 - root - DEBUG - set_current_image_stem:130 - Current image stem set to: 'block1'
2025-10-31 20:13:32,331 - src.pipeline - INFO - timer:53 - Starting: Single image processing for block1...
2025-10-31 20:13:32,332 - src.data.preprocess - DEBUG - __init__:43 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-31 20:13:32,332 - src.data.preprocess - INFO - preprocess:204 - Starting preprocessing pipeline for image with shape: (3950, 3950, 3)
2025-10-31 20:13:32,360 - src.data.preprocess - INFO - preprocess:216 - Initial resize from 3950x3950 to 512x512
2025-10-31 20:13:33,712 - src.data.preprocess - INFO - preprocess:224 - Applied non-local means denoising with h=10
2025-10-31 20:13:33,712 - src.data.preprocess - DEBUG - unsharp_mask:187 - Unsharp mask amount is zero or less, skipping.
2025-10-31 20:13:33,713 - src.data.preprocess - DEBUG - _estimate_n_colors:67 - Subsampling pixels (262144) for unique color estimation.
2025-10-31 20:13:33,784 - src.data.preprocess - INFO - _estimate_n_colors:76 - Estimated 234 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-31 20:13:33,785 - src.data.preprocess - INFO - quantize_image:106 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-31 20:13:33,786 - src.data.preprocess - DEBUG - quantize_image:127 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-31 20:13:34,301 - src.data.preprocess - INFO - quantize_image:147 - Quantization complete. Final unique colors: 50 (target was 50)
2025-10-31 20:13:34,304 - src.data.preprocess - INFO - preprocess:246 - Final resize to target size (128, 128)
2025-10-31 20:13:34,304 - src.data.preprocess - INFO - preprocess:251 - Preprocessing pipeline completed successfully.
2025-10-31 20:13:34,304 - src.pipeline - ERROR - _process_single_test_image:429 - Preprocessing failed for test image 'block1': Preprocessing returned None
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 420, in _process_single_test_image
    raise ValueError("Preprocessing returned None")
ValueError: Preprocessing returned None
2025-10-31 20:13:34,306 - src.pipeline - INFO - timer:58 - Completed: Single image processing for block1 in 1.98 seconds
2025-10-31 20:13:34,306 - src.pipeline - INFO - _run_test_image_analysis:352 - --- Processing test image: block2 ---
2025-10-31 20:13:34,719 - root - DEBUG - set_current_image_stem:130 - Current image stem set to: 'block2'
2025-10-31 20:13:34,720 - src.pipeline - INFO - timer:53 - Starting: Single image processing for block2...
2025-10-31 20:13:34,720 - src.data.preprocess - DEBUG - __init__:43 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-31 20:13:34,720 - src.data.preprocess - INFO - preprocess:204 - Starting preprocessing pipeline for image with shape: (4480, 4480, 3)
2025-10-31 20:13:34,755 - src.data.preprocess - INFO - preprocess:216 - Initial resize from 4480x4480 to 512x512
2025-10-31 20:13:36,121 - src.data.preprocess - INFO - preprocess:224 - Applied non-local means denoising with h=10
2025-10-31 20:13:36,122 - src.data.preprocess - DEBUG - unsharp_mask:187 - Unsharp mask amount is zero or less, skipping.
2025-10-31 20:13:36,122 - src.data.preprocess - DEBUG - _estimate_n_colors:67 - Subsampling pixels (262144) for unique color estimation.
2025-10-31 20:13:36,194 - src.data.preprocess - INFO - _estimate_n_colors:76 - Estimated 211 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-31 20:13:36,194 - src.data.preprocess - INFO - quantize_image:106 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-31 20:13:36,196 - src.data.preprocess - DEBUG - quantize_image:127 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-31 20:13:36,688 - src.data.preprocess - INFO - quantize_image:147 - Quantization complete. Final unique colors: 50 (target was 50)
2025-10-31 20:13:36,690 - src.data.preprocess - INFO - preprocess:246 - Final resize to target size (128, 128)
2025-10-31 20:13:36,691 - src.data.preprocess - INFO - preprocess:251 - Preprocessing pipeline completed successfully.
2025-10-31 20:13:36,691 - src.pipeline - ERROR - _process_single_test_image:429 - Preprocessing failed for test image 'block2': Preprocessing returned None
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 420, in _process_single_test_image
    raise ValueError("Preprocessing returned None")
ValueError: Preprocessing returned None
2025-10-31 20:13:36,692 - src.pipeline - INFO - timer:58 - Completed: Single image processing for block2 in 1.97 seconds
2025-10-31 20:13:36,692 - src.pipeline - INFO - _run_test_image_analysis:352 - --- Processing test image: block3 ---
2025-10-31 20:13:36,928 - root - DEBUG - set_current_image_stem:130 - Current image stem set to: 'block3'
2025-10-31 20:13:36,928 - src.pipeline - INFO - timer:53 - Starting: Single image processing for block3...
2025-10-31 20:13:36,928 - src.data.preprocess - DEBUG - __init__:43 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-31 20:13:36,928 - src.data.preprocess - INFO - preprocess:204 - Starting preprocessing pipeline for image with shape: (3477, 3477, 3)
2025-10-31 20:13:36,950 - src.data.preprocess - INFO - preprocess:216 - Initial resize from 3477x3477 to 511x511
2025-10-31 20:13:38,234 - src.data.preprocess - INFO - preprocess:224 - Applied non-local means denoising with h=10
2025-10-31 20:13:38,234 - src.data.preprocess - DEBUG - unsharp_mask:187 - Unsharp mask amount is zero or less, skipping.
2025-10-31 20:13:38,234 - src.data.preprocess - DEBUG - _estimate_n_colors:67 - Subsampling pixels (261121) for unique color estimation.
2025-10-31 20:13:38,305 - src.data.preprocess - INFO - _estimate_n_colors:76 - Estimated 253 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-31 20:13:38,306 - src.data.preprocess - INFO - quantize_image:106 - Quantizing image (shape: (511, 511, 3)) to approx 50 colors
2025-10-31 20:13:38,307 - src.data.preprocess - DEBUG - quantize_image:127 - Subsampling 261121 pixels to 20000 for K-Means fitting.
2025-10-31 20:13:38,816 - src.data.preprocess - INFO - quantize_image:147 - Quantization complete. Final unique colors: 50 (target was 50)
2025-10-31 20:13:38,819 - src.data.preprocess - INFO - preprocess:246 - Final resize to target size (128, 128)
2025-10-31 20:13:38,820 - src.data.preprocess - INFO - preprocess:251 - Preprocessing pipeline completed successfully.
2025-10-31 20:13:38,820 - src.pipeline - ERROR - _process_single_test_image:429 - Preprocessing failed for test image 'block3': Preprocessing returned None
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 420, in _process_single_test_image
    raise ValueError("Preprocessing returned None")
ValueError: Preprocessing returned None
2025-10-31 20:13:38,821 - src.pipeline - INFO - timer:58 - Completed: Single image processing for block3 in 1.89 seconds
2025-10-31 20:13:38,821 - src.pipeline - INFO - _run_test_image_analysis:352 - --- Processing test image: block4 ---
2025-10-31 20:13:39,044 - root - DEBUG - set_current_image_stem:130 - Current image stem set to: 'block4'
2025-10-31 20:13:39,045 - src.pipeline - INFO - timer:53 - Starting: Single image processing for block4...
2025-10-31 20:13:39,045 - src.data.preprocess - DEBUG - __init__:43 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-31 20:13:39,045 - src.data.preprocess - INFO - preprocess:204 - Starting preprocessing pipeline for image with shape: (3622, 3622, 3)
2025-10-31 20:13:39,067 - src.data.preprocess - INFO - preprocess:216 - Initial resize from 3622x3622 to 512x512
2025-10-31 20:13:40,368 - src.data.preprocess - INFO - preprocess:224 - Applied non-local means denoising with h=10
2025-10-31 20:13:40,368 - src.data.preprocess - DEBUG - unsharp_mask:187 - Unsharp mask amount is zero or less, skipping.
2025-10-31 20:13:40,369 - src.data.preprocess - DEBUG - _estimate_n_colors:67 - Subsampling pixels (262144) for unique color estimation.
2025-10-31 20:13:40,431 - src.data.preprocess - INFO - _estimate_n_colors:76 - Estimated 177 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-31 20:13:40,431 - src.data.preprocess - INFO - quantize_image:106 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-31 20:13:40,433 - src.data.preprocess - DEBUG - quantize_image:127 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-31 20:13:40,944 - src.data.preprocess - INFO - quantize_image:147 - Quantization complete. Final unique colors: 49 (target was 50)
2025-10-31 20:13:40,946 - src.data.preprocess - INFO - preprocess:246 - Final resize to target size (128, 128)
2025-10-31 20:13:40,946 - src.data.preprocess - INFO - preprocess:251 - Preprocessing pipeline completed successfully.
2025-10-31 20:13:40,947 - src.pipeline - ERROR - _process_single_test_image:429 - Preprocessing failed for test image 'block4': Preprocessing returned None
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 420, in _process_single_test_image
    raise ValueError("Preprocessing returned None")
ValueError: Preprocessing returned None
2025-10-31 20:13:40,948 - src.pipeline - INFO - timer:58 - Completed: Single image processing for block4 in 1.90 seconds
2025-10-31 20:13:40,948 - src.pipeline - INFO - _run_test_image_analysis:352 - --- Processing test image: block5 ---
2025-10-31 20:13:41,190 - root - DEBUG - set_current_image_stem:130 - Current image stem set to: 'block5'
2025-10-31 20:13:41,190 - src.pipeline - INFO - timer:53 - Starting: Single image processing for block5...
2025-10-31 20:13:41,190 - src.data.preprocess - DEBUG - __init__:43 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-31 20:13:41,190 - src.data.preprocess - INFO - preprocess:204 - Starting preprocessing pipeline for image with shape: (3504, 3504, 3)
2025-10-31 20:13:41,212 - src.data.preprocess - INFO - preprocess:216 - Initial resize from 3504x3504 to 512x512
2025-10-31 20:13:42,516 - src.data.preprocess - INFO - preprocess:224 - Applied non-local means denoising with h=10
2025-10-31 20:13:42,516 - src.data.preprocess - DEBUG - unsharp_mask:187 - Unsharp mask amount is zero or less, skipping.
2025-10-31 20:13:42,516 - src.data.preprocess - DEBUG - _estimate_n_colors:67 - Subsampling pixels (262144) for unique color estimation.
2025-10-31 20:13:42,588 - src.data.preprocess - INFO - _estimate_n_colors:76 - Estimated 204 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-31 20:13:42,588 - src.data.preprocess - INFO - quantize_image:106 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-31 20:13:42,589 - src.data.preprocess - DEBUG - quantize_image:127 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-31 20:13:43,123 - src.data.preprocess - INFO - quantize_image:147 - Quantization complete. Final unique colors: 50 (target was 50)
2025-10-31 20:13:43,125 - src.data.preprocess - INFO - preprocess:246 - Final resize to target size (128, 128)
2025-10-31 20:13:43,126 - src.data.preprocess - INFO - preprocess:251 - Preprocessing pipeline completed successfully.
2025-10-31 20:13:43,126 - src.pipeline - ERROR - _process_single_test_image:429 - Preprocessing failed for test image 'block5': Preprocessing returned None
Traceback (most recent call last):
  File "C:\Users\LENOVO\Desktop\prints\src\pipeline.py", line 420, in _process_single_test_image
    raise ValueError("Preprocessing returned None")
ValueError: Preprocessing returned None
2025-10-31 20:13:43,127 - src.pipeline - INFO - timer:58 - Completed: Single image processing for block5 in 1.94 seconds
2025-10-31 20:13:43,127 - root - DEBUG - set_current_image_stem:132 - Current image stem cleared.
2025-10-31 20:13:43,127 - src.pipeline - INFO - _run_test_image_analysis:380 - Test image analysis loop finished.
2025-10-31 20:13:43,131 - src.pipeline - INFO - timer:58 - Completed: Test Image Analysis Loop in 11.11 seconds
2025-10-31 20:13:43,131 - src.pipeline - INFO - timer:53 - Starting: Saving Final Results...
2025-10-31 20:13:43,131 - src.pipeline - WARNING - _save_and_summarize_results:554 - No Delta E results were generated to save or summarize.
2025-10-31 20:13:43,132 - src.pipeline - INFO - timer:58 - Completed: Saving Final Results in 0.00 seconds
2025-10-31 20:13:43,132 - src.pipeline - INFO - timer:58 - Completed: Total Pipeline in 159.02 seconds
2025-10-31 20:13:43,132 - src.pipeline - INFO - run:179 - ==================================================
2025-10-31 20:13:43,133 - src.pipeline - INFO - run:180 - Processing Pipeline RUN completed successfully for: block
2025-10-31 20:13:43,133 - src.pipeline - INFO - run:181 - ==================================================
2025-10-31 20:13:43,133 - __main__ - INFO - main:101 - Main execution finished successfully.
2025-10-31 20:13:43,134 - __main__ - INFO - main:120 - ================================================================================
PROCESSING COMPLETED IN 159.04 SECONDS
================================================================================
2025-10-31 20:19:50,131 - root - DEBUG - setup_logging:87 - Console handler stream encoding set to UTF-8.
2025-10-31 20:19:50,131 - root - INFO - setup_logging:95 - Logging setup complete. Console level: INFO. Log file: C:\Users\LENOVO\Desktop\prints\output\processing.log
2025-10-31 20:19:50,131 - __main__ - INFO - main:87 - Main function started. Initializing processing pipeline...
2025-10-31 20:19:50,132 - src.pipeline - INFO - _load_and_validate_config:117 - Loading configuration from: C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml
2025-10-31 20:19:50,143 - src.data.load_data - INFO - load_config:47 - Loaded default configuration from C:\Users\LENOVO\Desktop\prints\configurations\defaults.yaml
2025-10-31 20:19:50,146 - src.data.load_data - INFO - load_config:57 - Loading specific configuration from C:\Users\LENOVO\Desktop\prints\configurations\pattern_configs\block_config.yaml...
2025-10-31 20:19:50,146 - src.data.load_data - INFO - load_config:62 - Merged specific configuration over defaults.
2025-10-31 20:19:50,147 - src.data.load_data - INFO - load_config:70 - Configuration loaded successfully.
2025-10-31 20:19:50,147 - root - DEBUG - validate_processing_config:130 - Starting configuration validation...
2025-10-31 20:19:50,147 - root - DEBUG - validate_processing_config:177 - Reference image path validated: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-31 20:19:50,149 - root - DEBUG - validate_processing_config:198 - Validated 5 test image paths.
2025-10-31 20:19:50,149 - root - INFO - validate_processing_config:215 - Configuration validation passed successfully.
2025-10-31 20:19:50,152 - src.utils.output_manager - DEBUG - _create_directories:85 - Ensured output directory structure exists for dataset 'block'.
2025-10-31 20:19:50,152 - src.utils.output_manager - INFO - __init__:46 - OutputManager initialized for dataset 'block'. Output directory: C:\Users\LENOVO\Desktop\prints\output\datasets\block
2025-10-31 20:19:50,152 - src.pipeline - INFO - _load_and_validate_config:134 - OutputManager initialized successfully for dataset: 'block'
2025-10-31 20:19:50,153 - __main__ - INFO - main:98 - Starting pipeline run for dataset specified in: block_config.yaml
2025-10-31 20:19:50,153 - src.pipeline - INFO - run:150 - ==================================================
2025-10-31 20:19:50,153 - src.pipeline - INFO - run:151 - Processing Pipeline RUN starting for dataset: block
2025-10-31 20:19:50,154 - src.pipeline - INFO - run:152 - ==================================================
2025-10-31 20:19:50,154 - src.pipeline - INFO - timer:53 - Starting: Total Pipeline...
2025-10-31 20:19:50,154 - src.pipeline - INFO - timer:53 - Starting: DBN Training...
2025-10-31 20:19:50,154 - src.pipeline - INFO - _train_dbn_model:199 - Loading images specified in config['test_images'] to generate training data...
2025-10-31 20:19:50,820 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block1.jpg
2025-10-31 20:19:51,646 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block2.jpg
2025-10-31 20:19:52,104 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block3.jpg
2025-10-31 20:19:52,603 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block4.jpg
2025-10-31 20:19:53,109 - root - INFO - save_test_image:204 - Saved test image copy to: datasets\block\inputs\test_images\block5.jpg
2025-10-31 20:19:53,110 - src.pipeline - INFO - _train_dbn_model:216 - Loading and processing 5 valid images into flattened training arrays...
2025-10-31 20:19:53,110 - src.data.load_data - INFO - load_data:137 - Processing 5 images for training data...
2025-10-31 20:19:55,015 - src.data.load_data - INFO - load_data:167 - Successfully loaded and processed 5/5 images.
2025-10-31 20:19:55,016 - src.data.load_data - INFO - load_data:168 - rgb_data shape: (5, 30000), lab_data shape: (5, 30000)
2025-10-31 20:19:55,019 - src.pipeline - DEBUG - _train_dbn_model:225 - Loaded training data shapes - RGB: (5, 30000), LAB: (5, 30000)
2025-10-31 20:19:55,019 - src.pipeline - INFO - _train_dbn_model:227 - Initializing DBNTrainer (Target samples: 800)...
2025-10-31 20:19:55,020 - src.models.dbn_trainer - INFO - __init__:50 - DBNTrainer initialized.
2025-10-31 20:19:55,020 - src.models.dbn_trainer - INFO - train:78 - Starting DBN training and PSO optimization process...
2025-10-31 20:19:55,020 - src.models.dbn_trainer - DEBUG - train:81 - Sampling raw data...
2025-10-31 20:19:55,020 - src.data.sampling - INFO - efficient_data_sampling:53 - Sampling 800 total samples from flattened data, max 160 per image
2025-10-31 20:19:55,021 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 1
2025-10-31 20:19:55,022 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 2
2025-10-31 20:19:55,022 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 3
2025-10-31 20:19:55,023 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 4
2025-10-31 20:19:55,023 - src.data.sampling - DEBUG - efficient_data_sampling:74 - Planning to sample 160 pixels from image 5
2025-10-31 20:19:55,024 - src.data.sampling - INFO - efficient_data_sampling:123 - Sampling completed: 800 samples extracted.
2025-10-31 20:19:55,025 - src.data.sampling - INFO - efficient_data_sampling:124 - RGB range: [31.00, 215.00]
2025-10-31 20:19:55,025 - src.data.sampling - INFO - efficient_data_sampling:125 - LAB ranges: L[11.76, 84.71], a[-2.00, 2.00], b[-1.00, 9.00]
2025-10-31 20:19:55,026 - src.models.dbn_trainer - DEBUG - train:85 - Sampled data shapes - RGB: (800, 3), LAB: (800, 3)
2025-10-31 20:19:55,026 - src.models.dbn_trainer - DEBUG - train:88 - Splitting data into training/test sets...
2025-10-31 20:19:55,027 - src.models.dbn_trainer - INFO - train:94 - Training set shape: (640, 3), Test set shape: (160, 3)
2025-10-31 20:19:55,028 - src.models.dbn_trainer - DEBUG - train:97 - Preparing data scalers...
2025-10-31 20:19:55,028 - src.models.dbn_trainer - INFO - _prepare_scalers:143 - Preparing and fitting data scalers...
2025-10-31 20:19:55,032 - src.models.dbn_trainer - INFO - _prepare_scalers:167 - Data scaling complete. Scaled X shape: (640, 3), Scaled Y shape: (640, 3)
2025-10-31 20:19:55,032 - src.models.dbn_trainer - DEBUG - _prepare_scalers:168 - Scaled X range: [0.000, 1.000]
2025-10-31 20:19:55,032 - src.models.dbn_trainer - DEBUG - _prepare_scalers:169 - Scaled Y range: [0.000, 1.000]
2025-10-31 20:19:55,032 - src.models.dbn_trainer - DEBUG - train:101 - Initializing DBN model...
2025-10-31 20:19:55,033 - src.models.pso_dbn - INFO - __init__:133 - Initializing DBN: Input(3) -> Hidden([100, 50, 25]) -> Output(3)
2025-10-31 20:19:55,240 - src.models.pso_dbn - INFO - _build_model:178 - DBN Keras model built successfully. Total parameters: 7503
2025-10-31 20:19:55,296 - src.models.dbn_trainer - INFO - train:107 - DBN model initialized with 20 weight layers.
2025-10-31 20:19:55,296 - src.models.dbn_trainer - DEBUG - train:113 - Starting PSO weight optimization...
2025-10-31 20:19:55,297 - src.models.dbn_trainer - INFO - _run_pso_with_retries:189 - Starting PSO optimization with up to 3 retries.
2025-10-31 20:19:55,297 - src.models.dbn_trainer - INFO - _run_pso_with_retries:195 - PSO optimization attempt 1/3
2025-10-31 20:19:55,297 - src.models.pso_dbn - INFO - optimize:363 - Starting PSO optimization with parameters: {'swarmsize': 20, 'maxiter': 50, 'w': 0.7, 'c1': 2.0, 'c2': 2.0}
2025-10-31 20:19:55,303 - src.models.pso_dbn - DEBUG - _calculate_adaptive_bounds:523 - Calculated 7503 adaptive bounds for PSO.
2025-10-31 20:19:55,326 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:55,621 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.140277
2025-10-31 20:19:55,627 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:55,754 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:55,882 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:56,006 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.139984
2025-10-31 20:19:56,014 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:56,155 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:56,273 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.122040
2025-10-31 20:19:56,280 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:56,410 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:56,535 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:56,663 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:56,789 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:56,912 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.117050
2025-10-31 20:19:56,919 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:57,044 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:57,161 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.112211
2025-10-31 20:19:57,168 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:57,288 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.098304
2025-10-31 20:19:57,295 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:57,419 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:57,549 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:57,678 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:57,813 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:57,953 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:58,091 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:58,225 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:58,350 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:58,473 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:58,593 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:58,715 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:58,847 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:58,978 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:59,112 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:59,243 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:59,385 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:59,518 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:59,647 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:59,774 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:19:59,907 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:00,050 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:00,187 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:00,317 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:00,448 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:00,580 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:00,710 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:00,848 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:00,986 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:01,125 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:01,255 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:01,380 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:01,516 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:01,647 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:01,780 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:01,904 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:02,041 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:02,175 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:02,315 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:02,447 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:02,580 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:02,763 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:02,892 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:03,029 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:03,158 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:03,293 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:03,427 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:03,560 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:03,693 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:03,838 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:03,975 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:04,114 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:04,244 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:04,369 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:04,508 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:04,642 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:04,776 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:04,901 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:05,026 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:05,155 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:05,281 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:05,405 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:05,544 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:05,673 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:05,805 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:05,945 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:06,084 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:06,221 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:06,362 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:06,507 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:06,642 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:06,772 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:06,900 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:07,040 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:07,174 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:07,317 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:07,466 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:07,606 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:07,737 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:07,863 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:07,997 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:08,138 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:08,285 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:08,414 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:08,552 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:08,694 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:08,834 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:08,967 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:09,103 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:09,245 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:09,380 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:09,519 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:09,641 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.080300
2025-10-31 20:20:09,647 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:09,773 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:09,899 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:10,023 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:10,148 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:10,273 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:10,400 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:10,531 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:10,671 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:10,811 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:10,953 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:11,130 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:11,277 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:11,398 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:11,535 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:11,733 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:11,867 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:12,003 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:12,137 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:12,279 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:12,430 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:12,575 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:12,704 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:12,835 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:12,963 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:13,092 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:13,218 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:13,383 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:13,555 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:13,688 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:13,820 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:13,943 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:14,092 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:14,236 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:14,354 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.068707
2025-10-31 20:20:14,364 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:14,490 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:14,621 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:14,762 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:14,885 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:15,016 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:15,151 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:15,276 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:15,398 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:15,522 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:15,646 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:15,786 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:15,909 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:16,030 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:16,153 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:16,279 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:16,399 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:16,522 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:16,648 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:16,777 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:16,898 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.060691
2025-10-31 20:20:16,909 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:17,038 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:17,169 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:17,295 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:17,428 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:17,554 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:17,682 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:17,808 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:17,934 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:18,057 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:18,186 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:18,306 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:18,436 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:18,571 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:18,703 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:18,832 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:18,965 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:19,089 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:19,211 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:19,340 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:19,474 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:19,602 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:19,728 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:19,853 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:20,052 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:20,194 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:20,329 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:20,457 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:20,605 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:20,739 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:20,893 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:21,024 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:21,145 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:21,268 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:21,414 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:21,544 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:21,667 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:21,791 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:21,913 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:22,069 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:22,196 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:22,314 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.031180
2025-10-31 20:20:22,320 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:22,446 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:22,573 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:22,701 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:22,836 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:22,964 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:23,091 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:23,223 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:23,349 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:23,479 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:23,602 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:23,730 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:23,855 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:23,982 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:24,109 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:24,238 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:24,360 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:24,490 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:24,610 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:24,729 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.023837
2025-10-31 20:20:24,739 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:24,865 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.018607
2025-10-31 20:20:24,872 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:24,995 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:25,126 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:25,252 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:25,374 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:25,503 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:25,632 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:25,761 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:25,882 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:26,006 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:26,130 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:26,261 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:26,383 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:26,508 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:26,635 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:26,762 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:26,886 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:27,009 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:27,135 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:27,273 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:27,397 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:27,522 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:27,649 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:27,780 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:27,908 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:28,033 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:28,207 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:28,338 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:28,466 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:28,597 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:28,723 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:28,849 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:28,977 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:29,103 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:29,233 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:29,364 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:29,489 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:29,623 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:29,746 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:29,875 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:30,002 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:30,132 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:30,259 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:30,397 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:30,524 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:30,648 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:30,774 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:30,903 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:31,022 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:31,147 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:31,281 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:31,418 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:31,541 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:31,674 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:31,798 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:31,923 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:32,055 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:32,182 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:32,319 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:32,447 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:32,579 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:32,712 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:32,838 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:32,959 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:33,083 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:33,208 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:33,342 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:33,474 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:33,607 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:33,736 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:33,874 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:34,002 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:34,130 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:34,256 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:34,385 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:34,511 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:34,637 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:34,765 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:34,894 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:35,031 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:35,156 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:35,283 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:35,412 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:35,539 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:35,665 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:35,792 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:35,924 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:36,054 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:36,177 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:36,306 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:36,429 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:36,553 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:36,676 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:36,809 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:36,939 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:37,070 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:37,197 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:37,374 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:37,499 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:37,623 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:37,752 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:37,876 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:38,002 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:38,145 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:38,275 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:38,404 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:38,535 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:38,667 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:38,789 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:38,910 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:39,029 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:39,152 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:39,279 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:39,410 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:39,542 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:39,669 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:39,805 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:39,934 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:40,060 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:40,190 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:40,313 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:40,437 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:40,563 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:40,691 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:40,823 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:40,950 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:41,081 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:41,208 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:41,336 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:41,470 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:41,613 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:41,735 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:41,869 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:42,002 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:42,125 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:42,249 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:42,378 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:42,505 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:42,677 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:42,806 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:42,950 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:43,083 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:43,210 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:43,334 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:43,464 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:43,591 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:43,725 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:43,858 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:43,988 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:44,112 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:44,233 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:44,357 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:44,486 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:44,621 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:44,749 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:44,875 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:45,001 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:45,128 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:45,249 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:45,385 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:45,512 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:45,639 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:45,767 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:45,895 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:46,025 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:46,152 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:46,275 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:46,407 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:46,533 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:46,666 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:46,800 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:46,928 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:47,053 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:47,180 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:47,309 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:47,432 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:47,561 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:47,688 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:47,818 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:47,952 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:48,077 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:48,199 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:48,327 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:48,457 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:48,581 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:48,706 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:48,835 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:48,963 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:49,093 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:49,223 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:49,349 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:49,475 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:49,601 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:49,719 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:49,841 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:49,971 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:50,103 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:50,222 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:50,349 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:50,479 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:50,605 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:50,727 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.018331
2025-10-31 20:20:50,735 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:50,862 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:50,987 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:51,110 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:51,234 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:51,359 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:51,491 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:51,618 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:51,742 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:51,869 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:52,046 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:52,173 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:52,303 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:52,425 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:52,556 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:52,688 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:52,817 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:52,946 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:53,072 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:53,199 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:53,322 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:53,448 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:53,577 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:53,705 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:53,834 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:53,974 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:54,104 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:54,229 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:54,355 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:54,482 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:54,608 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:54,732 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:54,856 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:54,985 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:55,113 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:55,241 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:55,372 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:55,501 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:55,628 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:55,753 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:55,887 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:56,015 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:56,145 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:56,269 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:56,396 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:56,517 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:56,645 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:56,775 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:56,906 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:57,030 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:57,165 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:57,291 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:57,414 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:57,537 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:57,667 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:57,792 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:57,922 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:58,047 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:58,181 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:58,323 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:58,456 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:58,584 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:58,707 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:58,839 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:58,967 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:59,094 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:59,221 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:59,347 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:59,480 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:59,608 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:59,727 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:59,851 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:20:59,983 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:00,115 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:00,245 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:00,375 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:00,500 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:00,626 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:00,756 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:00,884 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:01,012 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:01,136 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:01,265 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:01,441 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:01,567 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:01,700 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:01,830 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:01,956 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:02,092 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:02,219 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:02,348 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:02,481 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:02,612 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:02,747 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:02,880 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:03,007 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:03,137 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:03,266 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:03,395 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:03,529 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:03,657 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:03,784 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:03,913 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:04,040 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:04,170 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:04,295 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:04,426 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:04,551 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:04,676 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:04,801 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:04,928 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:05,053 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:05,175 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:05,311 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:05,438 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:05,558 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:05,692 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:05,819 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:05,948 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:06,077 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:06,207 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:06,345 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:06,473 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:06,613 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:06,750 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:06,873 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:07,009 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:07,146 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:07,270 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:07,394 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:07,524 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:07,648 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:07,780 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:07,908 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:08,036 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:08,159 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:08,301 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:08,432 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:08,567 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:08,692 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:08,816 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:08,946 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:09,076 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:09,214 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:09,345 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:09,470 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:09,596 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:09,731 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:09,860 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:09,997 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:10,135 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:10,264 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:10,385 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:10,510 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:10,636 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:10,762 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:10,888 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:11,012 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:11,150 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:11,313 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:11,452 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:11,579 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:11,708 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:11,832 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:11,957 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:12,086 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:12,215 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:12,340 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:12,469 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:12,594 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:12,718 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:12,841 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:12,966 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:13,093 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:13,221 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:13,348 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:13,469 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:13,605 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:13,729 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:13,852 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:13,986 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:14,112 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:14,240 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:14,374 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:14,500 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:14,630 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:14,758 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:14,882 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:15,021 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:15,150 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:15,277 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:15,403 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:15,536 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:15,658 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:15,784 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:15,906 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:16,038 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:16,172 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:16,300 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:16,427 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:16,556 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:16,685 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:16,816 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:16,944 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:17,077 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:17,203 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:17,336 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:17,466 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:17,600 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:17,726 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:17,850 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:17,973 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:18,107 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:18,231 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:18,353 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:18,478 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:18,608 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:18,738 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:18,866 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:18,985 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:19,111 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.017851
2025-10-31 20:21:19,119 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:19,249 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:19,376 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:19,503 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:19,631 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:19,845 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:20,136 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:20,309 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:20,498 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:20,684 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:20,815 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:20,950 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:21,093 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:21,229 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:21,380 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:21,514 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:21,655 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:21,805 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:21,958 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:22,102 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:22,241 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:22,372 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:22,500 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:22,627 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:22,752 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:22,883 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:23,013 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:23,149 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:23,286 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:23,411 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:23,544 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:23,668 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:23,792 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:23,918 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:24,047 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:24,179 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:24,303 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:24,437 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:24,585 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:24,714 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:24,835 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:24,958 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:25,087 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:25,213 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:25,341 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:25,464 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:25,592 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:25,720 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:25,845 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:25,978 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:26,107 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:26,245 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:26,370 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:26,501 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:26,627 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:26,754 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:26,883 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:27,013 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:27,151 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:27,270 - src.models.pso_dbn - DEBUG - objective_function:419 - PSO New best fitness: 0.016647
2025-10-31 20:21:27,277 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:27,399 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:27,527 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:27,647 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:27,772 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:27,896 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:28,020 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:28,144 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:28,269 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:28,399 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:28,527 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:28,656 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:28,782 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:28,910 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:29,032 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:29,156 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:29,282 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:29,404 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:29,529 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:29,659 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:29,786 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:29,957 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:30,086 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:30,212 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:30,336 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:30,461 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:30,585 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:30,705 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:30,827 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:30,952 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:31,079 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:31,206 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:31,329 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:31,456 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:31,583 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:31,706 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:31,832 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:31,956 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:32,082 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:32,212 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:32,339 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:32,473 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:32,603 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:32,732 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:32,858 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:32,991 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:33,115 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:33,241 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:33,366 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:33,490 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:33,620 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:33,741 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:33,866 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:33,991 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:34,123 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:34,250 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:34,375 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:34,499 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:34,621 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:34,749 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:34,878 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:35,003 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:35,128 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:35,251 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:35,373 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:35,502 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:35,630 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:35,756 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:35,882 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:36,013 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:36,142 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:36,266 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:36,386 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:36,520 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:36,660 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:36,791 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:36,933 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:37,077 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:37,232 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:37,360 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:37,493 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:37,626 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:37,749 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:37,887 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:38,026 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:38,159 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:38,293 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:38,438 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:38,579 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:38,702 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:38,824 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:38,949 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:39,076 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:39,222 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:39,352 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:39,478 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:39,598 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:39,723 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:39,850 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:40,013 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:40,141 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:40,266 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:40,392 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:40,517 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:40,643 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:40,769 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:40,895 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:41,032 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:41,162 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:41,296 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:41,423 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:41,551 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:41,680 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:41,804 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:41,926 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:42,056 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:42,190 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:42,313 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:42,442 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:42,575 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:42,700 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:42,824 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:42,945 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:43,071 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:43,196 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:43,324 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:43,447 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:43,576 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:43,704 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:43,833 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:43,954 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:44,100 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:44,272 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:44,397 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:44,520 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:44,644 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:44,772 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:44,903 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:45,037 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:45,173 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:45,303 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:45,433 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:45,558 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:45,691 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:45,814 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:45,941 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:46,067 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:46,191 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:46,311 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:46,437 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:46,571 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:46,695 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:46,822 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:46,956 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:47,084 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:47,209 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:47,339 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:47,464 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:47,587 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:47,715 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:47,842 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:47,969 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:48,094 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:48,219 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:48,346 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:48,478 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:48,613 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:48,746 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:48,874 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:48,998 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:49,125 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:49,250 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:49,378 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:49,505 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:49,637 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:49,763 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:49,902 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:50,052 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:50,179 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:50,314 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:50,473 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:50,609 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:50,738 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:50,865 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:50,997 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:51,130 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:51,256 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:51,383 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:51,508 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:51,638 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:51,761 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:51,894 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:52,022 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:52,146 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:52,274 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:52,399 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:52,529 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:52,661 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:52,793 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:52,918 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:53,043 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:53,170 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:53,297 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:53,430 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:53,551 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:53,679 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:53,825 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:53,952 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:54,087 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:54,214 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:54,342 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:54,473 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:54,595 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:54,724 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:54,846 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:54,975 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:55,111 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:55,234 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:55,365 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:55,503 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:55,624 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:55,750 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:55,875 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:56,007 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:56,144 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:56,274 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:56,400 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:56,534 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:56,659 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:56,785 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:56,913 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:57,046 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:57,178 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:57,305 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:57,479 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:57,608 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:57,738 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:57,867 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:57,994 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:58,129 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:58,259 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:58,399 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:58,524 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:58,657 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:58,781 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:58,909 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:59,041 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:59,166 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:59,295 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:59,419 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:59,543 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:59,668 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:59,792 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:21:59,918 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:00,047 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:00,171 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:00,294 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:00,424 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:00,560 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:00,685 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:00,813 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:00,934 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:01,058 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:01,187 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:01,311 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:01,449 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:01,579 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:01,710 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:01,842 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:01,971 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:02,096 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:02,222 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:02,348 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:02,479 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:02,616 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:02,741 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:02,867 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:02,990 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:03,125 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:03,264 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:03,389 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:03,520 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:03,647 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:03,777 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:03,910 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:04,037 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:04,158 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:04,284 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:04,411 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:04,543 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:04,667 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:04,790 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:04,924 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:05,048 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:05,180 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:05,308 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:05,436 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:05,571 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:05,701 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:05,830 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:05,957 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:06,082 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:06,206 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:06,332 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:06,461 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:06,592 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:06,717 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:06,841 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:06,965 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:07,096 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:07,269 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:07,390 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:07,515 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:07,638 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:07,761 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:07,903 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:08,033 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:08,170 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:08,295 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:08,417 - src.models.pso_dbn - INFO - optimize:453 - PSO optimization process completed in 133.11s. Reported final fitness: 0.016647, Best fitness found: 0.016647
2025-10-31 20:22:08,424 - src.models.pso_dbn - INFO - set_weights:306 - Successfully set weights in the DBN model.
2025-10-31 20:22:08,425 - src.models.dbn_trainer - INFO - _run_pso_with_retries:215 - PSO attempt 1 completed successfully.
2025-10-31 20:22:08,434 - src.models.dbn_trainer - INFO - train:117 - DBN training and PSO optimization completed successfully.
2025-10-31 20:22:08,434 - src.pipeline - INFO - _train_dbn_model:232 - DBN training and scaling completed.
2025-10-31 20:22:08,438 - src.pipeline - INFO - timer:58 - Completed: DBN Training in 138.28 seconds
2025-10-31 20:22:08,438 - src.pipeline - INFO - timer:53 - Starting: Reference Image Processing...
2025-10-31 20:22:08,439 - src.pipeline - INFO - _run_reference_processing:251 - Processing reference image specified in config: C:\Users\LENOVO\Desktop\prints\dataset\block\reference.jpg
2025-10-31 20:22:10,006 - root - INFO - save_reference_image:177 - Saved reference image copy to: datasets\block\inputs\reference_image\reference.png
2025-10-31 20:22:10,006 - src.pipeline - INFO - _run_reference_processing:261 - Preprocessing reference image...
2025-10-31 20:22:10,006 - src.data.preprocess - DEBUG - __init__:43 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-31 20:22:10,007 - src.data.preprocess - INFO - preprocess:204 - Starting preprocessing pipeline for image with shape: (4480, 4480, 3)
2025-10-31 20:22:10,039 - src.data.preprocess - INFO - preprocess:216 - Initial resize from 4480x4480 to 512x512
2025-10-31 20:22:11,357 - src.data.preprocess - INFO - preprocess:224 - Applied non-local means denoising with h=10
2025-10-31 20:22:11,357 - src.data.preprocess - DEBUG - unsharp_mask:187 - Unsharp mask amount is zero or less, skipping.
2025-10-31 20:22:11,358 - src.data.preprocess - DEBUG - _estimate_n_colors:67 - Subsampling pixels (262144) for unique color estimation.
2025-10-31 20:22:11,425 - src.data.preprocess - INFO - _estimate_n_colors:76 - Estimated 245 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-31 20:22:11,425 - src.data.preprocess - INFO - quantize_image:106 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-31 20:22:11,427 - src.data.preprocess - DEBUG - quantize_image:127 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-31 20:22:12,212 - src.data.preprocess - INFO - quantize_image:147 - Quantization complete. Final unique colors: 49 (target was 50)
2025-10-31 20:22:12,214 - src.data.preprocess - INFO - preprocess:246 - Final resize to target size (128, 128)
2025-10-31 20:22:12,214 - src.data.preprocess - INFO - preprocess:251 - Preprocessing pipeline completed successfully.
2025-10-31 20:22:12,215 - src.models.segmentation.reference - INFO - segment_reference_image:69 - Starting reference image segmentation (K-Means & SOM)...
2025-10-31 20:22:12,215 - src.models.segmentation.reference - INFO - segment_reference_image:86 - Determining optimal number of clusters for reference image...
2025-10-31 20:22:12,215 - src.models.segmentation.reference - INFO - segment_reference_image:104 - Subsampling 16384 pixels to 10000 for reference k-determination
2025-10-31 20:22:12,226 - src.models.segmentation.strategy - INFO - determine_k:58 - Unique colors: 242. Adjusted k-range: [2, 3]
2025-10-31 20:22:12,226 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=2 for cluster metrics...
2025-10-31 20:22:14,057 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=3 for cluster metrics...
2025-10-31 20:22:15,815 - src.models.segmentation.strategy - INFO - determine_k:122 - Optimal k determined: 2 (score: 1.000)
2025-10-31 20:22:15,815 - src.models.segmentation.reference - INFO - segment_reference_image:111 - Optimal clusters determined for reference: 2
2025-10-31 20:22:15,816 - src.models.segmentation.reference - INFO - timer:32 - Starting: Reference K-Means (k=2)...
2025-10-31 20:22:15,816 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-31 20:22:15,816 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-31 20:22:15,825 - src.models.segmentation.reference - INFO - timer:37 - Completed: Reference K-Means (k=2) in 0.01 seconds
2025-10-31 20:22:15,825 - src.models.segmentation.reference - INFO - timer:32 - Starting: Reference SOM (k=2)...
2025-10-31 20:22:15,826 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-31 20:22:15,826 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-31 20:22:16,163 - src.models.segmentation.reference - INFO - timer:37 - Completed: Reference SOM (k=2) in 0.34 seconds
2025-10-31 20:22:16,163 - src.models.segmentation.reference - INFO - segment_reference_image:170 - Reference segmentation (KMeans, SOM, k-determination) finished in 3.95 seconds.
2025-10-31 20:22:16,206 - matplotlib.pyplot - DEBUG - switch_backend:482 - Loaded backend tkagg version 8.6.
2025-10-31 20:22:16,318 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:16,318 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:16,319 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:16,319 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:16,319 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:22:16,329 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:16,329 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:16,329 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:16,330 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:16,330 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:22:16,356 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:16,356 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:16,356 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:16,356 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:16,356 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:22:16,359 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:16,359 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:16,359 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:16,359 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:16,359 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:22:16,362 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:16,362 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:16,362 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:16,362 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:16,362 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:22:16,364 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:16,365 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:16,365 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:16,365 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:16,365 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:22:16,367 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:16,367 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:16,367 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:16,367 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:16,368 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:22:16,370 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:16,370 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:16,370 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:16,370 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:16,370 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:22:16,372 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:16,372 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:16,373 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:16,373 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:16,373 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:22:16,379 - matplotlib.font_manager - DEBUG - _findfont_cached:1413 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2025-10-31 20:22:16,380 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,380 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-10-31 20:22:16,380 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,380 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,380 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,380 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,380 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,380 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,380 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,380 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,381 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,381 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-10-31 20:22:16,381 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,381 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,381 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,381 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,381 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,381 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,381 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,381 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,382 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,382 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,382 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-10-31 20:22:16,382 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,382 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,382 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,382 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,382 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,382 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,382 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,382 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,383 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,383 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-10-31 20:22:16,383 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,383 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,383 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,383 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,383 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,383 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,383 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,383 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-10-31 20:22:16,384 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,384 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,384 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,384 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,384 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,384 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,384 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,384 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,384 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,384 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,385 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,385 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,385 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,385 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,385 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,385 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,385 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,385 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-10-31 20:22:16,385 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,385 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,385 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:16,386 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,386 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,386 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,386 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,386 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,386 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,386 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,386 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,386 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,386 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,387 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,387 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,387 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,387 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,387 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,387 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,387 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:22:16,387 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,387 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,387 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,387 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,388 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,388 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,388 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,388 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,388 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,388 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,388 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,388 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,388 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,388 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,389 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,389 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,389 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,389 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,389 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,389 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,389 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,389 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,389 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,389 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,390 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,390 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,390 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,390 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,390 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,390 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,390 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,390 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,390 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,390 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,391 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,391 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,391 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
2025-10-31 20:22:16,391 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,391 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,391 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,391 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,391 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:16,391 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,391 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,392 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,392 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,392 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,392 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,392 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,392 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,392 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,392 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,392 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,392 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,392 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,393 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
2025-10-31 20:22:16,393 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,393 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,393 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,393 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-10-31 20:22:16,393 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,393 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,393 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,393 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,394 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,394 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-10-31 20:22:16,394 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,394 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,394 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,394 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,394 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,394 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,394 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,394 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,394 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,394 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,395 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,395 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,395 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,395 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,395 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,395 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,395 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,395 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,395 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,395 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,395 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,395 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,396 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,396 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:22:16,396 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,396 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,396 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:22:16,396 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,396 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,396 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,396 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,396 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,396 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,397 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,397 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,397 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,397 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,397 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,397 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,397 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,397 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:22:16,397 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,397 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,397 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:16,397 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,398 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-10-31 20:22:16,398 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,398 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,398 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,398 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,398 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,398 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,398 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,398 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,398 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,398 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,398 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,399 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
2025-10-31 20:22:16,399 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,399 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,399 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:22:16,399 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,399 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,399 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
2025-10-31 20:22:16,399 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,399 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,399 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,399 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,400 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,400 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,400 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,400 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,400 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,400 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,400 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,400 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,400 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,400 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,400 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,400 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,401 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,401 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,401 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,401 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,401 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,401 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-10-31 20:22:16,401 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,401 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,401 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,401 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,401 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,401 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,402 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,402 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,402 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,402 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,402 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,402 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,402 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,402 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,402 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,402 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,402 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,402 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,403 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:22:16,403 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,403 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:16,403 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,403 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
2025-10-31 20:22:16,403 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,403 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-10-31 20:22:16,403 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,403 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,403 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,403 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,404 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:16,404 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,404 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,404 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,404 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,404 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,404 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:22:16,404 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,404 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,404 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,404 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,404 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,405 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,405 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,405 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,405 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,405 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,405 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,405 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,405 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,405 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,405 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,405 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,405 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,406 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,406 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,406 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,406 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,406 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,406 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,406 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,406 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,406 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,406 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,407 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:16,407 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,407 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,407 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,407 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,407 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,407 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,407 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,407 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,407 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,408 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,408 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,408 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,408 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,408 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,408 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,408 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,408 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,408 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,408 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,408 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,409 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-10-31 20:22:16,409 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
2025-10-31 20:22:16,409 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,409 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,409 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,409 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-10-31 20:22:16,409 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,409 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,409 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,409 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,410 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,411 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,411 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,411 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,411 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,411 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,411 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,411 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,411 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,411 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,411 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,411 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,413 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,413 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,413 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:22:16,413 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,413 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,413 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,413 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,413 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-10-31 20:22:16,413 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,413 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,414 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,414 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,414 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,414 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,414 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-10-31 20:22:16,414 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,414 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,414 - matplotlib.font_manager - DEBUG - _findfont_cached:1457 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2025-10-31 20:22:16,601 - matplotlib.font_manager - DEBUG - _findfont_cached:1413 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2025-10-31 20:22:16,601 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,601 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-10-31 20:22:16,601 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,601 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,602 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,602 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,602 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,602 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,602 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,602 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,602 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,602 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-10-31 20:22:16,602 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,603 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,603 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,603 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,603 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,603 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,603 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,603 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,603 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,603 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,603 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-10-31 20:22:16,604 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,604 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,604 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,604 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,604 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,604 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,604 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,604 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,604 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,604 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-10-31 20:22:16,605 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,605 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,605 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,605 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,605 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,605 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,605 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,605 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-10-31 20:22:16,605 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,605 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,606 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,606 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,606 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,606 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,606 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,606 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,606 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,606 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,606 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,606 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,606 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,607 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,607 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,607 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,607 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,607 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-10-31 20:22:16,607 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,607 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,607 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:16,607 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,607 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,608 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,608 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,608 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,608 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,608 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,608 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,608 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,608 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,608 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,608 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,608 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,609 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,609 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,609 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,609 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:22:16,609 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,609 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,609 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,609 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,609 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,610 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,610 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,610 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,610 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,610 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,610 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,610 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,610 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,610 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,610 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,610 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,611 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,611 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,611 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,611 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,611 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,611 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,611 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,611 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,611 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,611 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,611 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,612 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,612 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,612 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,612 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,612 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,612 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,612 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,612 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,612 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,612 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
2025-10-31 20:22:16,612 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,613 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,613 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,613 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,613 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:16,613 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,613 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,613 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,613 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,613 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,613 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,613 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,614 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,614 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,614 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,614 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,614 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,614 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,614 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
2025-10-31 20:22:16,614 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,614 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,614 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,614 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-10-31 20:22:16,614 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,615 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,615 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,615 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,615 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,615 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-10-31 20:22:16,615 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,615 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,615 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,615 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,615 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,615 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,615 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,616 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,616 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,616 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,616 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,616 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,617 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,617 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,617 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,617 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,617 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,617 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,617 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,617 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,617 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,617 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,617 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,618 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:22:16,618 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,618 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,618 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:22:16,618 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,618 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,618 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,618 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,618 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,618 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,618 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,618 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,619 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,619 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,619 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,619 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,619 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,619 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:22:16,619 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,619 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,619 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:16,619 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,619 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-10-31 20:22:16,620 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,620 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,620 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,620 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,620 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,620 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,620 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,620 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,620 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,620 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,620 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,620 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
2025-10-31 20:22:16,621 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,621 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,621 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:22:16,621 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,621 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,621 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
2025-10-31 20:22:16,621 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,621 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,621 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,621 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,621 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,622 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,622 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,622 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,622 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,622 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,622 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,622 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,622 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,622 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,622 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,622 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,622 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,623 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,623 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,623 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,623 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,623 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-10-31 20:22:16,623 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,623 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,623 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,623 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,623 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,623 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,623 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,624 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,624 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,624 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,624 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,624 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,624 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,624 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,624 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,624 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,624 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,624 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,625 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:22:16,625 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,625 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:16,625 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,625 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
2025-10-31 20:22:16,625 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,625 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-10-31 20:22:16,625 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,625 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,625 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,625 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,625 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:16,626 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,626 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,626 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,626 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,626 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,626 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:22:16,626 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,626 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,626 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,627 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,627 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,627 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,627 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,627 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,627 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,627 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,627 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,627 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,628 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,628 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,628 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,628 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,628 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,628 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,628 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,628 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,628 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,628 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,628 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,629 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,629 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,629 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,629 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,629 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:16,629 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,629 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,629 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,629 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,629 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,630 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,630 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,630 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,630 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,630 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,630 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,630 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,630 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,630 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,630 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,631 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,631 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,631 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,631 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,631 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,631 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-10-31 20:22:16,631 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
2025-10-31 20:22:16,631 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,631 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,631 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,632 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-10-31 20:22:16,632 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,632 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,632 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,632 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,632 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,632 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,632 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,632 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,632 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,633 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,633 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,633 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,633 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,633 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,633 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,633 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,633 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,633 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,633 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,633 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,634 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,634 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,634 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,634 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,634 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,634 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,634 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,634 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,634 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,634 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,635 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,635 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,635 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,635 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,635 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,635 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,635 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:22:16,635 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,635 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,635 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,636 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,636 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-10-31 20:22:16,636 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,636 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,636 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,636 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,636 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,636 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,636 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-10-31 20:22:16,636 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,637 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,637 - matplotlib.font_manager - DEBUG - _findfont_cached:1457 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2025-10-31 20:22:16,682 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:22:16,682 - matplotlib.font_manager - DEBUG - _findfont_cached:1413 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=8.0.
2025-10-31 20:22:16,683 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,683 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-10-31 20:22:16,683 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,683 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,683 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,683 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,683 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,683 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,683 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,683 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,684 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,684 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-10-31 20:22:16,684 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,684 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,684 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,684 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,684 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,684 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,684 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,684 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,685 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,685 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,685 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-10-31 20:22:16,685 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,685 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,685 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,685 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,685 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,685 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,685 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,686 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,686 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,686 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-10-31 20:22:16,686 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,686 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,686 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,686 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,686 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,686 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,686 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,687 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-10-31 20:22:16,687 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,687 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,687 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,687 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,687 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,687 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,687 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,687 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,687 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,687 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,688 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,688 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,688 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,688 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,688 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,688 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,688 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,688 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-10-31 20:22:16,688 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,688 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,689 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:16,689 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,689 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,689 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,689 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,689 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,689 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,689 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,689 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,689 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,689 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,690 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,690 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,690 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,690 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,690 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,690 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,690 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:22:16,690 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,690 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,690 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,691 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,691 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,691 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,691 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,691 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,691 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,691 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,691 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,691 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,691 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,692 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,692 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,692 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,692 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,692 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,692 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,692 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,692 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,692 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,692 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,692 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,692 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,693 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,693 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,693 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,693 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,693 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,693 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,694 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,694 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,694 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,694 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,694 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,694 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
2025-10-31 20:22:16,694 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,694 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,694 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,694 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,695 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:16,695 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,695 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,695 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,695 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,695 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,695 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,695 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,695 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,695 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,695 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,696 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,696 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,696 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,696 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
2025-10-31 20:22:16,696 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,696 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,696 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,696 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-10-31 20:22:16,696 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,696 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,696 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,697 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,697 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,697 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-10-31 20:22:16,697 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,697 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,697 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,697 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,697 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,697 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,697 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,697 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,697 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,698 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,698 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,698 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,698 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,698 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,698 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,698 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,698 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,698 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,698 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,698 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,699 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,699 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,699 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,699 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:22:16,699 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,699 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,699 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:22:16,699 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,699 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,699 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,699 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,699 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,700 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,700 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,700 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,700 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,700 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,700 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,700 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,700 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,700 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:22:16,700 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,700 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,700 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:16,701 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,701 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-10-31 20:22:16,701 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,701 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,701 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,701 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,701 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,701 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,701 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,701 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,701 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,701 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,702 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,702 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
2025-10-31 20:22:16,702 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,702 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,702 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:22:16,702 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,702 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,702 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
2025-10-31 20:22:16,702 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,702 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,702 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,703 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,703 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,703 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,703 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,703 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,703 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,703 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,703 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,703 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,703 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,703 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,703 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,704 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,704 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,704 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,704 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,704 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,704 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,704 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-10-31 20:22:16,704 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,704 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,704 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,704 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,704 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,705 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,705 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,705 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,705 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,705 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,705 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,705 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,705 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,705 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,705 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,705 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,706 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,706 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,706 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:22:16,706 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,706 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:16,706 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,706 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
2025-10-31 20:22:16,706 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,706 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-10-31 20:22:16,706 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,706 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,706 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,707 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,707 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:16,707 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,707 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,707 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,707 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,707 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,707 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:22:16,707 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,707 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,707 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,708 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,708 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,708 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,708 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,708 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,708 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,708 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,708 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,708 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,708 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,709 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,709 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,709 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,709 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,709 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,709 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,709 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,709 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,709 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,709 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,710 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,710 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,710 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,710 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,710 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:16,710 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,710 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,710 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,710 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,710 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,710 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,711 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,711 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,711 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,711 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,711 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,711 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,711 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,711 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,711 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,711 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,711 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,712 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,712 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,712 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,712 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-10-31 20:22:16,712 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
2025-10-31 20:22:16,712 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,712 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,712 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,712 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-10-31 20:22:16,712 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,712 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,712 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,713 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,713 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,713 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,713 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,713 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,713 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,713 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,713 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,713 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,713 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,713 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,713 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,714 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,714 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,714 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,714 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,714 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,714 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,714 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,714 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,714 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,714 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,714 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,715 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,715 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,715 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,715 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,715 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,715 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,715 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,715 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,715 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,715 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,715 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:22:16,715 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,716 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,716 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,716 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,716 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-10-31 20:22:16,716 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,716 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,716 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,716 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,716 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,716 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,716 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-10-31 20:22:16,716 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,717 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,717 - matplotlib.font_manager - DEBUG - _findfont_cached:1457 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=8.0 to DejaVu Sans ('C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2025-10-31 20:22:16,720 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:22:16,723 - matplotlib.font_manager - DEBUG - _findfont_cached:1413 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.0.
2025-10-31 20:22:16,723 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,723 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-10-31 20:22:16,723 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,723 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,723 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,723 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,724 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,724 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,724 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,724 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,724 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,724 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-10-31 20:22:16,724 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,724 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,724 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,724 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,724 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,725 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,725 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,725 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,725 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,725 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,725 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-10-31 20:22:16,725 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,725 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,725 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,725 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,725 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,725 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,726 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,726 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,726 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,726 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-10-31 20:22:16,726 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,726 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,726 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,726 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,726 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,727 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,727 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,727 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-10-31 20:22:16,727 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,727 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,727 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,727 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,727 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,727 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,727 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,728 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,728 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,728 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,728 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,728 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,728 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,728 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,728 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,728 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,728 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,728 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-10-31 20:22:16,729 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,729 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,729 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:16,729 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,729 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,729 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,729 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,729 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,729 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,730 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,730 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,730 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,730 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,730 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,730 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,730 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,730 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,730 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,730 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,730 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:22:16,731 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,731 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,731 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,731 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,731 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,731 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,731 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,731 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,731 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,731 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,732 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,732 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,732 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,732 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,732 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,732 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,732 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,732 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,732 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,732 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,732 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,733 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,733 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,733 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,733 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,733 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,733 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,733 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,733 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,733 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,733 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,734 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,734 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,734 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,734 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,734 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,734 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
2025-10-31 20:22:16,734 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,734 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,734 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,734 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,734 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:16,735 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,735 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,735 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,735 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,735 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,735 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,735 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,735 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,735 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,735 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,736 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,736 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,736 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,736 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
2025-10-31 20:22:16,736 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,736 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,736 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,736 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-10-31 20:22:16,736 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,736 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,736 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,737 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,737 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,737 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-10-31 20:22:16,737 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,737 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,737 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,737 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,737 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,737 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,737 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,738 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,738 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,738 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,738 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,738 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,738 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,738 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,738 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,738 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,738 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,738 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,739 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,739 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,739 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,739 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,739 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,739 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:22:16,739 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,739 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,739 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:22:16,739 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,740 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,740 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,740 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,740 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:16,740 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,740 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,740 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,740 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,740 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,740 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,740 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,741 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,741 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:22:16,741 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,741 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,741 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:16,741 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,741 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-10-31 20:22:16,741 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,741 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,741 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,742 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,742 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,742 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,742 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,742 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,742 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,742 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,742 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,742 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
2025-10-31 20:22:16,742 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,743 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,743 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:22:16,743 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,743 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,743 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
2025-10-31 20:22:16,743 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,743 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,743 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,743 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,744 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,744 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,744 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,744 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,744 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,744 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,744 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,744 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,744 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,744 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,745 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,745 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,745 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,745 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,745 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,745 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,745 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,745 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-10-31 20:22:16,745 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,745 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,745 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,746 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,746 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,746 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,746 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,746 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,746 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,746 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,746 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,746 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,746 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,746 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,746 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,747 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,747 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,747 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,747 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:22:16,747 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,747 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:16,747 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,747 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
2025-10-31 20:22:16,747 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,747 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-10-31 20:22:16,747 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,748 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,748 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,748 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,748 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:16,748 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,748 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,748 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,748 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,748 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,748 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:22:16,748 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,749 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,749 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,749 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:16,749 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,749 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,749 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,749 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,749 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,749 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,749 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,749 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,749 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,750 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,750 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,750 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,750 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,750 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,750 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,750 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,750 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,750 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,750 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,750 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,750 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,751 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,751 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,751 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:16,751 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,751 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,751 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,751 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,751 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,751 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,751 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,751 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,751 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,752 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,752 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,752 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,752 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,752 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,752 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,752 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,752 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,752 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:16,752 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,752 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,753 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-10-31 20:22:16,753 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
2025-10-31 20:22:16,753 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,753 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,753 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,753 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-10-31 20:22:16,753 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,753 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,753 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,753 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,753 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,754 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,754 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,754 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,754 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,754 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,754 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:16,754 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,754 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,754 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:16,754 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,754 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,755 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,755 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,755 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:16,755 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,755 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,755 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,755 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,755 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,755 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,755 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,755 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,755 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,756 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,756 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,756 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,756 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,756 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,756 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,756 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,756 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,756 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:22:16,756 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,756 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,756 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,757 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,757 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-10-31 20:22:16,757 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,757 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,757 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,757 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,757 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:16,757 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,757 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-10-31 20:22:16,757 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:16,757 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:16,757 - matplotlib.font_manager - DEBUG - _findfont_cached:1457 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.0 to DejaVu Sans ('C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2025-10-31 20:22:16,789 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:22:16,790 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:22:17,432 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:22:17,437 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:22:17,469 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:22:17,470 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:22:18,120 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:22:18,127 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:22:18,518 - src.utils.visualization - INFO - plot_reference_summary:178 - Reference summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\summaries\reference_summary.png
2025-10-31 20:22:18,530 - src.pipeline - INFO - _run_reference_processing:322 - Reference image processed successfully. Determined k=2. Extracted 2 target LAB colors.
2025-10-31 20:22:18,536 - src.pipeline - INFO - timer:58 - Completed: Reference Image Processing in 10.10 seconds
2025-10-31 20:22:18,536 - src.pipeline - INFO - timer:53 - Starting: Test Image Analysis Loop...
2025-10-31 20:22:18,537 - src.pipeline - INFO - _run_test_image_analysis:346 - Starting test image analysis loop...
2025-10-31 20:22:18,537 - src.pipeline - INFO - _run_test_image_analysis:352 - --- Processing test image: block1 ---
2025-10-31 20:22:18,838 - root - DEBUG - set_current_image_stem:130 - Current image stem set to: 'block1'
2025-10-31 20:22:18,838 - src.pipeline - INFO - timer:53 - Starting: Single image processing for block1...
2025-10-31 20:22:18,839 - src.data.preprocess - DEBUG - __init__:43 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-31 20:22:18,839 - src.data.preprocess - INFO - preprocess:204 - Starting preprocessing pipeline for image with shape: (3950, 3950, 3)
2025-10-31 20:22:18,865 - src.data.preprocess - INFO - preprocess:216 - Initial resize from 3950x3950 to 512x512
2025-10-31 20:22:20,139 - src.data.preprocess - INFO - preprocess:224 - Applied non-local means denoising with h=10
2025-10-31 20:22:20,140 - src.data.preprocess - DEBUG - unsharp_mask:187 - Unsharp mask amount is zero or less, skipping.
2025-10-31 20:22:20,140 - src.data.preprocess - DEBUG - _estimate_n_colors:67 - Subsampling pixels (262144) for unique color estimation.
2025-10-31 20:22:20,207 - src.data.preprocess - INFO - _estimate_n_colors:76 - Estimated 224 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-31 20:22:20,208 - src.data.preprocess - INFO - quantize_image:106 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-31 20:22:20,210 - src.data.preprocess - DEBUG - quantize_image:127 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-31 20:22:20,762 - src.data.preprocess - INFO - quantize_image:147 - Quantization complete. Final unique colors: 50 (target was 50)
2025-10-31 20:22:20,764 - src.data.preprocess - INFO - preprocess:246 - Final resize to target size (128, 128)
2025-10-31 20:22:20,764 - src.data.preprocess - INFO - preprocess:251 - Preprocessing pipeline completed successfully.
2025-10-31 20:22:20,766 - root - INFO - save_preprocessed_image:227 - Saved preprocessed image to: datasets\block\processed\preprocessed\block1_preprocessed.png
2025-10-31 20:22:20,863 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:20,863 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:20,863 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:20,863 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:20,863 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:22:20,870 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:20,871 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:20,871 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:20,871 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:20,871 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:22:20,885 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:20,886 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:20,886 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:20,886 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:20,886 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:22:20,888 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:20,888 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:20,888 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:20,889 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:20,889 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:22:20,891 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:20,891 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:20,891 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:20,891 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:20,891 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:22:20,895 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:20,895 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:20,895 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:20,895 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:20,895 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:22:20,898 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:20,898 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:20,898 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:20,898 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:20,898 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:22:20,900 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:20,900 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:20,900 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:20,901 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:20,901 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:22:20,903 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:22:20,903 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:22:20,903 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:22:20,903 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:22:20,903 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:22:21,049 - matplotlib.font_manager - DEBUG - _findfont_cached:1413 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0.
2025-10-31 20:22:21,049 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,049 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-10-31 20:22:21,049 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,050 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,050 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,050 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,050 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,050 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,050 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,050 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,050 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,050 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-10-31 20:22:21,050 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,050 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,051 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,051 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,051 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,051 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,051 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,051 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,051 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,051 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,051 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-10-31 20:22:21,051 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,051 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,052 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,052 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,052 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,052 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,052 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,052 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,052 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,052 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-10-31 20:22:21,052 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,052 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,052 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,052 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,053 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,053 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:21,053 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,053 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-10-31 20:22:21,053 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:21,053 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:21,053 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:21,053 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,053 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,053 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,053 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,053 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,054 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,054 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,054 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,054 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,054 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,054 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,054 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,054 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:21,054 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,054 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-10-31 20:22:21,054 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:21,055 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,055 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:21,055 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,055 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:21,055 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,055 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,055 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,055 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,055 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,055 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,055 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,055 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,056 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,056 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:21,056 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,056 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,056 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,056 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:21,056 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:22:21,056 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,056 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:21,056 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:21,056 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,056 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,057 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,057 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:21,057 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,057 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,057 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,057 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,057 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,057 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,057 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,057 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,057 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,058 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,058 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,058 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,058 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,058 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,058 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,058 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,058 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,058 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,058 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,058 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:21,058 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,059 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,059 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,059 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,059 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,059 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:21,059 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,059 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,059 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:21,059 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
2025-10-31 20:22:21,059 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,059 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:21,059 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,060 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,060 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:21,060 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,060 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,060 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,060 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,060 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,060 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,060 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:21,060 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,061 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,061 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:21,061 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:21,061 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,061 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:21,061 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
2025-10-31 20:22:21,061 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:21,061 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,061 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,061 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-10-31 20:22:21,062 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,062 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,062 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,062 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,062 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,062 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-10-31 20:22:21,062 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,062 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,062 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,062 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:21,062 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:21,063 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,063 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,063 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,063 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,063 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:21,063 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,063 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,063 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,063 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,063 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,064 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,064 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,064 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,064 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,064 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,064 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,064 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,064 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:21,064 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:22:21,064 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:21,064 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,065 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:22:21,065 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,065 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,065 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,065 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,065 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:22:21,065 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,065 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,065 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:21,065 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,066 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,066 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,066 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,066 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,066 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:22:21,066 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,066 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,066 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:21,066 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,066 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-10-31 20:22:21,066 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,067 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,067 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,067 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,067 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,067 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,067 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,067 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,067 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,067 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,067 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,068 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
2025-10-31 20:22:21,068 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,068 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,068 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:22:21,068 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,068 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,068 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
2025-10-31 20:22:21,068 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,068 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,068 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,068 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,069 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,069 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,069 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,069 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,069 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,069 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,069 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,069 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,069 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,069 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,070 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,070 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,070 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,070 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,070 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,070 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:21,070 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,070 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-10-31 20:22:21,070 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,070 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,070 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,071 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,071 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,071 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,071 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,071 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,071 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,071 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,071 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,071 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,071 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,072 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,072 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,072 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,072 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,072 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:21,072 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:22:21,072 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,072 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:22:21,072 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,072 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
2025-10-31 20:22:21,072 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,073 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-10-31 20:22:21,073 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,073 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,073 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,073 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,073 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:21,073 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,073 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,073 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,073 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,074 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,074 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:22:21,074 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,074 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,074 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,074 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:22:21,074 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,074 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,074 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,074 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,074 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,075 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,075 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,075 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:21,075 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,075 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,075 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:21,075 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,075 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,075 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,076 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,076 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,076 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,076 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,076 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,076 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,076 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,076 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,076 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,077 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:22:21,077 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,077 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,077 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,077 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,077 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,077 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,077 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,077 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,077 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:21,077 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,077 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,078 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:21,078 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,078 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,078 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,078 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,078 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,078 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:22:21,078 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,078 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,078 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-10-31 20:22:21,078 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
2025-10-31 20:22:21,079 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,079 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,079 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,079 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-10-31 20:22:21,079 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,079 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,079 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,079 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,079 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,079 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,079 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,079 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:21,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:22:21,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:21,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:22:21,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:22:21,080 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,081 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:22:21,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-10-31 20:22:21,082 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:22:21,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-10-31 20:22:21,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:22:21,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:22:21,083 - matplotlib.font_manager - DEBUG - _findfont_cached:1457 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0 to DejaVu Sans ('C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2025-10-31 20:22:22,499 - src.utils.visualization - INFO - plot_preprocessing_steps:353 - Preprocessing steps plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\preprocessed\block1_preprocessing_steps.png
2025-10-31 20:22:22,513 - src.pipeline - INFO - timer:53 - Starting: Segmentation loop (block1, k_type: determined)...
2025-10-31 20:22:22,514 - root - DEBUG - _initialize_segmenters:89 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-31 20:22:22,514 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-31 20:22:22,514 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-31 20:22:22,514 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-31 20:22:22,515 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-31 20:22:22,515 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-31 20:22:22,515 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-31 20:22:22,515 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-31 20:22:22,515 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-31 20:22:22,515 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-31 20:22:22,515 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-31 20:22:22,516 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-31 20:22:22,516 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-31 20:22:22,516 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-31 20:22:22,516 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-31 20:22:22,516 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-31 20:22:22,516 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-31 20:22:22,516 - src.models.segmentation.facade - INFO - __init__:66 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-31 20:22:22,517 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: kmeans_opt
2025-10-31 20:22:22,517 - src.models.segmentation.kmeans - DEBUG - segment:61 - KMeans: Determining optimal k...
2025-10-31 20:22:22,535 - src.models.segmentation.strategy - INFO - determine_k:58 - Unique colors: 345. Adjusted k-range: [2, 3]
2025-10-31 20:22:22,535 - src.models.segmentation.strategy - INFO - determine_k:66 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-31 20:22:22,537 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=2 for cluster metrics...
2025-10-31 20:22:24,403 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=3 for cluster metrics...
2025-10-31 20:22:26,247 - src.models.segmentation.strategy - INFO - determine_k:122 - Optimal k determined: 2 (score: 0.500)
2025-10-31 20:22:26,247 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-31 20:22:26,255 - src.models.segmentation.facade - INFO - process:138 - Method kmeans_opt completed in 3.74s with 2 clusters.
2025-10-31 20:22:26,257 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (kmeans_opt) to: datasets\block\processed\segmented\kmeans_opt\block1_determined.png
2025-10-31 20:22:26,257 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: som_opt
2025-10-31 20:22:26,275 - src.models.segmentation.strategy - INFO - determine_k:58 - Unique colors: 345. Adjusted k-range: [2, 3]
2025-10-31 20:22:26,275 - src.models.segmentation.strategy - INFO - determine_k:66 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-31 20:22:26,277 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=2 for cluster metrics...
2025-10-31 20:22:28,091 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=3 for cluster metrics...
2025-10-31 20:22:29,894 - src.models.segmentation.strategy - INFO - determine_k:122 - Optimal k determined: 2 (score: 0.500)
2025-10-31 20:22:29,895 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-31 20:22:30,203 - src.models.segmentation.facade - INFO - process:138 - Method som_opt completed in 3.95s with 2 clusters.
2025-10-31 20:22:30,204 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (som_opt) to: datasets\block\processed\segmented\som_opt\block1_determined.png
2025-10-31 20:22:30,205 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: dbscan
2025-10-31 20:22:30,205 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:68 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-31 20:23:13,412 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:90 - Optimal DBSCAN parameters: eps=10.0, min=5
2025-10-31 20:23:15,131 - src.models.segmentation.facade - INFO - process:138 - Method dbscan completed in 44.93s with 2 clusters.
2025-10-31 20:23:15,133 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block1_determined.png
2025-10-31 20:23:15,133 - src.models.segmentation.facade - INFO - process:154 - Segmentation processing completed for k_type='determined'.
2025-10-31 20:23:15,362 - src.pipeline - INFO - _process_single_test_image:512 - -> Result kmeans_opt (determined) on block1: Avg Delta E Traditional=1.71, Avg Delta E DBN=5.67, k=2
2025-10-31 20:23:15,549 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:15,549 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:15,549 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:15,549 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:15,549 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:23:15,558 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:15,558 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:15,558 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:15,558 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:15,558 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:23:15,573 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:15,574 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:15,574 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:15,574 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:15,574 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:23:15,576 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:15,576 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:15,576 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:15,576 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:15,577 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:23:15,579 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:15,580 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:15,580 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:15,580 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:15,580 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:23:15,582 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:15,582 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:15,583 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:15,583 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:15,583 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:23:15,585 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:15,585 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:15,585 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:15,585 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:15,585 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:23:15,588 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:15,588 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:15,588 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:15,588 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:15,588 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:23:15,591 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:15,591 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:15,591 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:15,591 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:15,591 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:23:15,887 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:15,891 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:15,912 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:15,914 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:15,964 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:15,970 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:15,993 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:15,995 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:16,051 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:16,059 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:16,188 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\kmeans_opt\block1_determined_summary.png
2025-10-31 20:23:16,306 - src.pipeline - INFO - _process_single_test_image:512 - -> Result som_opt (determined) on block1: Avg Delta E Traditional=8.14, Avg Delta E DBN=5.40, k=2
2025-10-31 20:23:16,496 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:16,496 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:16,496 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:16,496 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:16,496 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:23:16,504 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:16,504 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:16,504 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:16,504 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:16,504 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:23:16,521 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:16,521 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:16,521 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:16,521 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:16,521 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:23:16,524 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:16,524 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:16,524 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:16,524 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:16,524 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:23:16,527 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:16,527 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:16,527 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:16,527 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:16,527 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:23:16,530 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:16,530 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:16,530 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:16,530 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:16,530 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:23:16,533 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:16,533 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:16,533 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:16,533 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:16,533 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:23:16,536 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:16,536 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:16,536 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:16,536 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:16,536 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:23:16,538 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:16,538 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:16,538 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:16,538 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:16,538 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:23:17,020 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:17,024 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:17,046 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:17,048 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:17,097 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:17,103 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:17,135 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:17,137 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:17,193 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:17,202 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:17,338 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\som_opt\block1_determined_summary.png
2025-10-31 20:23:17,445 - src.pipeline - INFO - _process_single_test_image:512 - -> Result dbscan (determined) on block1: Avg Delta E Traditional=1.85, Avg Delta E DBN=5.66, k=2
2025-10-31 20:23:17,640 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:17,640 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:17,640 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:17,640 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:17,640 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:23:17,648 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:17,648 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:17,648 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:17,648 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:17,648 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:23:17,664 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:17,665 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:17,665 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:17,665 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:17,665 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:23:17,667 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:17,667 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:17,667 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:17,668 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:17,668 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:23:17,670 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:17,670 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:17,670 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:17,670 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:17,670 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:23:17,672 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:17,673 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:17,673 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:17,673 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:17,673 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:23:17,675 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:17,675 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:17,675 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:17,675 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:17,675 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:23:17,678 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:17,678 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:17,678 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:17,678 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:17,678 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:23:17,680 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:17,681 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:17,681 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:17,681 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:17,681 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:23:17,969 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:17,973 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:17,997 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:17,998 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:18,051 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:18,056 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:18,082 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:18,083 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:18,138 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:18,147 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:18,278 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\dbscan\block1_determined_summary.png
2025-10-31 20:23:18,288 - src.pipeline - INFO - timer:58 - Completed: Segmentation loop (block1, k_type: determined) in 55.77 seconds
2025-10-31 20:23:18,288 - src.pipeline - INFO - timer:53 - Starting: Segmentation loop (block1, k_type: predefined)...
2025-10-31 20:23:18,289 - root - DEBUG - _initialize_segmenters:89 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-31 20:23:18,289 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-31 20:23:18,289 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-31 20:23:18,289 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-31 20:23:18,289 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-31 20:23:18,289 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-31 20:23:18,290 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-31 20:23:18,290 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-31 20:23:18,290 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-31 20:23:18,290 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-31 20:23:18,290 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-31 20:23:18,290 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-31 20:23:18,291 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-31 20:23:18,291 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-31 20:23:18,291 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-31 20:23:18,291 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-31 20:23:18,291 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-31 20:23:18,291 - src.models.segmentation.facade - INFO - __init__:66 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-31 20:23:18,292 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: kmeans_predef
2025-10-31 20:23:18,293 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-31 20:23:18,303 - src.models.segmentation.facade - INFO - process:138 - Method kmeans_predef completed in 0.01s with 2 clusters.
2025-10-31 20:23:18,305 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (kmeans_predef) to: datasets\block\processed\segmented\kmeans_predef\block1_predefined.png
2025-10-31 20:23:18,305 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: som_predef
2025-10-31 20:23:18,306 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-31 20:23:18,628 - src.models.segmentation.facade - INFO - process:138 - Method som_predef completed in 0.32s with 2 clusters.
2025-10-31 20:23:18,629 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (som_predef) to: datasets\block\processed\segmented\som_predef\block1_predefined.png
2025-10-31 20:23:18,630 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: dbscan
2025-10-31 20:23:18,630 - src.models.segmentation.dbscan - INFO - segment:117 - Using predefined DBSCAN.
2025-10-31 20:23:20,408 - src.models.segmentation.facade - INFO - process:138 - Method dbscan completed in 1.78s with 2 clusters.
2025-10-31 20:23:20,410 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block1_predefined.png
2025-10-31 20:23:20,410 - src.models.segmentation.facade - INFO - process:154 - Segmentation processing completed for k_type='predefined'.
2025-10-31 20:23:20,519 - src.pipeline - INFO - _process_single_test_image:512 - -> Result kmeans_predef (predefined) on block1: Avg Delta E Traditional=1.71, Avg Delta E DBN=5.67, k=2
2025-10-31 20:23:20,718 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:20,719 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:20,719 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:20,719 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:20,719 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:23:20,726 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:20,726 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:20,726 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:20,727 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:20,727 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:23:20,742 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:20,742 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:20,742 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:20,743 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:20,743 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:23:20,746 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:20,746 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:20,746 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:20,747 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:20,747 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:23:20,750 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:20,750 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:20,750 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:20,750 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:20,750 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:23:20,753 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:20,753 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:20,753 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:20,753 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:20,754 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:23:20,756 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:20,756 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:20,756 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:20,756 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:20,756 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:23:20,759 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:20,759 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:20,759 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:20,759 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:20,759 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:23:20,762 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:20,762 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:20,762 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:20,762 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:20,763 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:23:21,072 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:21,076 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:21,100 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:21,102 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:21,151 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:21,156 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:21,181 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:21,182 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:21,243 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:21,254 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:21,383 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\kmeans_predef\block1_predefined_summary.png
2025-10-31 20:23:21,499 - src.pipeline - INFO - _process_single_test_image:512 - -> Result som_predef (predefined) on block1: Avg Delta E Traditional=8.14, Avg Delta E DBN=5.40, k=2
2025-10-31 20:23:21,688 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:21,688 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:21,688 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:21,689 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:21,689 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:23:21,696 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:21,696 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:21,696 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:21,696 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:21,696 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:23:21,712 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:21,712 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:21,713 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:21,713 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:21,713 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:23:21,715 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:21,715 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:21,715 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:21,715 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:21,716 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:23:21,718 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:21,718 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:21,718 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:21,718 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:21,718 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:23:21,721 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:21,721 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:21,721 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:21,721 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:21,721 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:23:21,723 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:21,723 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:21,724 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:21,724 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:21,724 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:23:21,726 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:21,726 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:21,727 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:21,727 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:21,727 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:23:21,729 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:21,729 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:21,730 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:21,730 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:21,730 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:23:22,087 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:22,091 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:22,117 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:22,119 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:22,169 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:22,174 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:22,205 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:22,207 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:22,262 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:22,270 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:22,396 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\som_predef\block1_predefined_summary.png
2025-10-31 20:23:22,508 - src.pipeline - INFO - _process_single_test_image:512 - -> Result dbscan (predefined) on block1: Avg Delta E Traditional=1.85, Avg Delta E DBN=5.66, k=2
2025-10-31 20:23:22,705 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:22,705 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:22,705 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:22,705 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:22,706 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:23:22,713 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:22,713 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:22,714 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:22,714 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:22,714 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:23:22,730 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:22,730 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:22,731 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:22,731 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:22,731 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:23:22,733 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:22,733 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:22,733 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:22,733 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:22,734 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:23:22,736 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:22,736 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:22,736 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:22,736 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:22,736 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:23:22,738 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:22,739 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:22,739 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:22,739 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:22,739 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:23:22,741 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:22,741 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:22,741 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:22,741 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:22,741 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:23:22,744 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:22,745 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:22,745 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:22,745 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:22,745 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:23:22,747 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:22,747 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:22,748 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:22,748 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:22,748 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:23:23,065 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:23,069 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:23,092 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:23,093 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:23,146 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:23,151 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:23,175 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:23,177 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:23,234 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:23,241 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:23:23,379 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\dbscan\block1_predefined_summary.png
2025-10-31 20:23:23,389 - src.pipeline - INFO - timer:58 - Completed: Segmentation loop (block1, k_type: predefined) in 5.10 seconds
2025-10-31 20:23:23,390 - src.pipeline - INFO - timer:58 - Completed: Single image processing for block1 in 64.55 seconds
2025-10-31 20:23:23,391 - src.pipeline - INFO - _run_test_image_analysis:352 - --- Processing test image: block2 ---
2025-10-31 20:23:23,780 - root - DEBUG - set_current_image_stem:130 - Current image stem set to: 'block2'
2025-10-31 20:23:23,780 - src.pipeline - INFO - timer:53 - Starting: Single image processing for block2...
2025-10-31 20:23:23,781 - src.data.preprocess - DEBUG - __init__:43 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-31 20:23:23,781 - src.data.preprocess - INFO - preprocess:204 - Starting preprocessing pipeline for image with shape: (4480, 4480, 3)
2025-10-31 20:23:23,813 - src.data.preprocess - INFO - preprocess:216 - Initial resize from 4480x4480 to 512x512
2025-10-31 20:23:25,095 - src.data.preprocess - INFO - preprocess:224 - Applied non-local means denoising with h=10
2025-10-31 20:23:25,096 - src.data.preprocess - DEBUG - unsharp_mask:187 - Unsharp mask amount is zero or less, skipping.
2025-10-31 20:23:25,096 - src.data.preprocess - DEBUG - _estimate_n_colors:67 - Subsampling pixels (262144) for unique color estimation.
2025-10-31 20:23:25,177 - src.data.preprocess - INFO - _estimate_n_colors:76 - Estimated 218 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-31 20:23:25,178 - src.data.preprocess - INFO - quantize_image:106 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-31 20:23:25,180 - src.data.preprocess - DEBUG - quantize_image:127 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-31 20:23:25,705 - src.data.preprocess - INFO - quantize_image:147 - Quantization complete. Final unique colors: 49 (target was 50)
2025-10-31 20:23:25,706 - src.data.preprocess - INFO - preprocess:246 - Final resize to target size (128, 128)
2025-10-31 20:23:25,707 - src.data.preprocess - INFO - preprocess:251 - Preprocessing pipeline completed successfully.
2025-10-31 20:23:25,709 - root - INFO - save_preprocessed_image:227 - Saved preprocessed image to: datasets\block\processed\preprocessed\block2_preprocessed.png
2025-10-31 20:23:25,816 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:25,816 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:25,816 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:25,816 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:25,816 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:23:25,824 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:25,825 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:25,825 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:25,825 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:25,825 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:23:25,840 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:25,840 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:25,840 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:25,840 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:25,840 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:23:25,843 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:25,843 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:25,843 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:25,843 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:25,844 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:23:25,847 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:25,847 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:25,848 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:25,848 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:25,848 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:23:25,850 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:25,850 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:25,850 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:25,851 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:25,851 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:23:25,853 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:25,853 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:25,853 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:25,853 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:25,854 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:23:25,856 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:25,856 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:25,856 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:25,856 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:25,856 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:23:25,859 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:23:25,859 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:23:25,859 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:23:25,859 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:23:25,859 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:23:27,616 - src.utils.visualization - INFO - plot_preprocessing_steps:353 - Preprocessing steps plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\preprocessed\block2_preprocessing_steps.png
2025-10-31 20:23:27,634 - src.pipeline - INFO - timer:53 - Starting: Segmentation loop (block2, k_type: determined)...
2025-10-31 20:23:27,634 - root - DEBUG - _initialize_segmenters:89 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-31 20:23:27,634 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-31 20:23:27,635 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-31 20:23:27,635 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-31 20:23:27,635 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-31 20:23:27,635 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-31 20:23:27,635 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-31 20:23:27,636 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-31 20:23:27,636 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-31 20:23:27,636 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-31 20:23:27,636 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-31 20:23:27,636 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-31 20:23:27,636 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-31 20:23:27,636 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-31 20:23:27,636 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-31 20:23:27,637 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-31 20:23:27,637 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-31 20:23:27,637 - src.models.segmentation.facade - INFO - __init__:66 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-31 20:23:27,638 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: kmeans_opt
2025-10-31 20:23:27,638 - src.models.segmentation.kmeans - DEBUG - segment:61 - KMeans: Determining optimal k...
2025-10-31 20:23:27,656 - src.models.segmentation.strategy - INFO - determine_k:58 - Unique colors: 313. Adjusted k-range: [2, 3]
2025-10-31 20:23:27,657 - src.models.segmentation.strategy - INFO - determine_k:66 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-31 20:23:27,658 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=2 for cluster metrics...
2025-10-31 20:23:29,551 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=3 for cluster metrics...
2025-10-31 20:23:31,397 - src.models.segmentation.strategy - INFO - determine_k:122 - Optimal k determined: 2 (score: 0.500)
2025-10-31 20:23:31,398 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-31 20:23:31,408 - src.models.segmentation.facade - INFO - process:138 - Method kmeans_opt completed in 3.77s with 2 clusters.
2025-10-31 20:23:31,410 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (kmeans_opt) to: datasets\block\processed\segmented\kmeans_opt\block2_determined.png
2025-10-31 20:23:31,411 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: som_opt
2025-10-31 20:23:31,429 - src.models.segmentation.strategy - INFO - determine_k:58 - Unique colors: 313. Adjusted k-range: [2, 3]
2025-10-31 20:23:31,430 - src.models.segmentation.strategy - INFO - determine_k:66 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-31 20:23:31,431 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=2 for cluster metrics...
2025-10-31 20:23:33,277 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=3 for cluster metrics...
2025-10-31 20:23:35,128 - src.models.segmentation.strategy - INFO - determine_k:122 - Optimal k determined: 2 (score: 0.500)
2025-10-31 20:23:35,129 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-31 20:23:35,457 - src.models.segmentation.facade - INFO - process:138 - Method som_opt completed in 4.05s with 2 clusters.
2025-10-31 20:23:35,459 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (som_opt) to: datasets\block\processed\segmented\som_opt\block2_determined.png
2025-10-31 20:23:35,460 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: dbscan
2025-10-31 20:23:35,460 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:68 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-31 20:24:19,677 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:90 - Optimal DBSCAN parameters: eps=20.0, min=20
2025-10-31 20:24:21,546 - src.models.segmentation.facade - INFO - process:138 - Method dbscan completed in 46.09s with 2 clusters.
2025-10-31 20:24:21,547 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block2_determined.png
2025-10-31 20:24:21,548 - src.models.segmentation.facade - INFO - process:154 - Segmentation processing completed for k_type='determined'.
2025-10-31 20:24:21,651 - src.pipeline - INFO - _process_single_test_image:512 - -> Result kmeans_opt (determined) on block2: Avg Delta E Traditional=1.77, Avg Delta E DBN=5.53, k=2
2025-10-31 20:24:21,843 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:21,843 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:21,843 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:21,844 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:21,844 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:24:21,852 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:21,852 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:21,852 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:21,852 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:21,852 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:24:21,870 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:21,870 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:21,870 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:21,870 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:21,870 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:24:21,873 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:21,873 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:21,873 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:21,873 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:21,873 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:24:21,875 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:21,875 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:21,875 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:21,876 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:21,876 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:24:21,878 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:21,878 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:21,878 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:21,878 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:21,878 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:24:21,881 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:21,881 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:21,881 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:21,881 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:21,881 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:24:21,884 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:21,884 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:21,884 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:21,884 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:21,884 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:24:21,886 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:21,887 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:21,887 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:21,887 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:21,887 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:24:22,174 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:22,178 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:22,205 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:22,206 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:22,257 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:22,263 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:22,288 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:22,289 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:22,355 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:22,363 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:22,501 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\kmeans_opt\block2_determined_summary.png
2025-10-31 20:24:22,626 - src.pipeline - INFO - _process_single_test_image:512 - -> Result som_opt (determined) on block2: Avg Delta E Traditional=6.89, Avg Delta E DBN=5.29, k=2
2025-10-31 20:24:22,814 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:22,815 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:22,815 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:22,815 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:22,815 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:24:22,822 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:22,822 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:22,823 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:22,823 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:22,823 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:24:22,839 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:22,839 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:22,839 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:22,839 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:22,840 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:24:22,842 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:22,842 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:22,842 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:22,842 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:22,842 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:24:22,844 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:22,844 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:22,845 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:22,845 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:22,845 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:24:22,847 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:22,848 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:22,848 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:22,848 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:22,848 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:24:22,850 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:22,851 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:22,851 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:22,851 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:22,851 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:24:22,853 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:22,853 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:22,853 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:22,853 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:22,853 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:24:22,856 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:22,856 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:22,856 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:22,856 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:22,856 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:24:23,174 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:23,179 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:23,202 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:23,203 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:23,254 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:23,259 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:23,283 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:23,284 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:23,337 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:23,346 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:23,471 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\som_opt\block2_determined_summary.png
2025-10-31 20:24:23,584 - src.pipeline - INFO - _process_single_test_image:512 - -> Result dbscan (determined) on block2: Avg Delta E Traditional=1.88, Avg Delta E DBN=5.52, k=2
2025-10-31 20:24:23,776 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:23,776 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:23,776 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:23,776 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:23,777 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:24:23,784 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:23,785 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:23,785 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:23,785 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:23,785 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:24:23,801 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:23,802 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:23,802 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:23,802 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:23,802 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:24:23,804 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:23,804 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:23,804 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:23,804 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:23,804 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:24:23,806 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:23,807 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:23,807 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:23,807 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:23,807 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:24:23,809 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:23,809 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:23,809 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:23,809 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:23,809 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:24:23,812 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:23,812 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:23,812 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:23,812 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:23,812 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:24:23,815 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:23,815 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:23,815 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:23,815 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:23,815 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:24:23,818 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:23,818 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:23,818 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:23,818 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:23,818 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:24:24,182 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:24,186 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:24,207 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:24,209 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:24,268 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:24,273 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:24,305 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:24,306 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:24,359 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:24,368 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:24,494 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\dbscan\block2_determined_summary.png
2025-10-31 20:24:24,505 - src.pipeline - INFO - timer:58 - Completed: Segmentation loop (block2, k_type: determined) in 56.87 seconds
2025-10-31 20:24:24,506 - src.pipeline - INFO - timer:53 - Starting: Segmentation loop (block2, k_type: predefined)...
2025-10-31 20:24:24,506 - root - DEBUG - _initialize_segmenters:89 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-31 20:24:24,506 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-31 20:24:24,506 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-31 20:24:24,506 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-31 20:24:24,506 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-31 20:24:24,507 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-31 20:24:24,507 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-31 20:24:24,507 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-31 20:24:24,507 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-31 20:24:24,507 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-31 20:24:24,507 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-31 20:24:24,508 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-31 20:24:24,508 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-31 20:24:24,508 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-31 20:24:24,508 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-31 20:24:24,508 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-31 20:24:24,509 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-31 20:24:24,509 - src.models.segmentation.facade - INFO - __init__:66 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-31 20:24:24,510 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: kmeans_predef
2025-10-31 20:24:24,510 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-31 20:24:24,520 - src.models.segmentation.facade - INFO - process:138 - Method kmeans_predef completed in 0.01s with 2 clusters.
2025-10-31 20:24:24,521 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (kmeans_predef) to: datasets\block\processed\segmented\kmeans_predef\block2_predefined.png
2025-10-31 20:24:24,522 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: som_predef
2025-10-31 20:24:24,522 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-31 20:24:24,865 - src.models.segmentation.facade - INFO - process:138 - Method som_predef completed in 0.34s with 2 clusters.
2025-10-31 20:24:24,866 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (som_predef) to: datasets\block\processed\segmented\som_predef\block2_predefined.png
2025-10-31 20:24:24,867 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: dbscan
2025-10-31 20:24:24,867 - src.models.segmentation.dbscan - INFO - segment:117 - Using predefined DBSCAN.
2025-10-31 20:24:26,802 - src.models.segmentation.facade - INFO - process:138 - Method dbscan completed in 1.94s with 2 clusters.
2025-10-31 20:24:26,804 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block2_predefined.png
2025-10-31 20:24:26,804 - src.models.segmentation.facade - INFO - process:154 - Segmentation processing completed for k_type='predefined'.
2025-10-31 20:24:26,916 - src.pipeline - INFO - _process_single_test_image:512 - -> Result kmeans_predef (predefined) on block2: Avg Delta E Traditional=1.77, Avg Delta E DBN=5.53, k=2
2025-10-31 20:24:27,110 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:27,110 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:27,110 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:27,110 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:27,110 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:24:27,118 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:27,118 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:27,118 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:27,118 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:27,118 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:24:27,136 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:27,137 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:27,137 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:27,137 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:27,137 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:24:27,139 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:27,140 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:27,140 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:27,140 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:27,140 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:24:27,143 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:27,143 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:27,143 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:27,143 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:27,143 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:24:27,146 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:27,146 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:27,146 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:27,146 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:27,146 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:24:27,149 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:27,150 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:27,150 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:27,150 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:27,150 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:24:27,152 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:27,153 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:27,153 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:27,153 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:27,153 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:24:27,156 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:27,156 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:27,156 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:27,156 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:27,156 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:24:27,446 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:27,450 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:27,477 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:27,478 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:27,530 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:27,536 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:27,561 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:27,561 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:27,616 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:27,625 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:27,757 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\kmeans_predef\block2_predefined_summary.png
2025-10-31 20:24:27,872 - src.pipeline - INFO - _process_single_test_image:512 - -> Result som_predef (predefined) on block2: Avg Delta E Traditional=6.89, Avg Delta E DBN=5.29, k=2
2025-10-31 20:24:28,058 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:28,058 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:28,059 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:28,059 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:28,059 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:24:28,067 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:28,067 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:28,067 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:28,067 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:28,067 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:24:28,086 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:28,086 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:28,086 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:28,086 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:28,086 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:24:28,088 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:28,089 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:28,089 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:28,089 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:28,089 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:24:28,091 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:28,091 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:28,091 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:28,091 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:28,091 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:24:28,094 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:28,094 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:28,094 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:28,094 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:28,094 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:24:28,097 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:28,097 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:28,097 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:28,097 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:28,097 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:24:28,100 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:28,100 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:28,100 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:28,100 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:28,100 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:24:28,102 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:28,102 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:28,102 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:28,103 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:28,103 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:24:28,419 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:28,424 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:28,448 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:28,450 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:28,500 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:28,506 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:28,531 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:28,532 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:28,590 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:28,598 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:28,720 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\som_predef\block2_predefined_summary.png
2025-10-31 20:24:28,834 - src.pipeline - INFO - _process_single_test_image:512 - -> Result dbscan (predefined) on block2: Avg Delta E Traditional=1.88, Avg Delta E DBN=5.52, k=2
2025-10-31 20:24:29,032 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:29,033 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:29,033 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:29,033 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:29,033 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:24:29,041 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:29,041 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:29,041 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:29,041 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:29,041 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:24:29,058 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:29,058 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:29,058 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:29,059 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:29,059 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:24:29,062 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:29,062 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:29,062 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:29,062 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:29,062 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:24:29,065 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:29,065 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:29,065 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:29,065 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:29,065 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:24:29,067 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:29,067 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:29,067 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:29,068 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:29,068 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:24:29,070 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:29,070 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:29,070 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:29,070 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:29,070 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:24:29,073 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:29,073 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:29,073 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:29,073 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:29,073 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:24:29,075 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:29,075 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:29,076 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:29,076 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:29,076 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:24:29,581 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:29,584 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:29,607 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:29,608 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:29,661 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:29,667 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:29,691 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:29,692 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:29,750 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:29,758 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:24:29,889 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\dbscan\block2_predefined_summary.png
2025-10-31 20:24:29,902 - src.pipeline - INFO - timer:58 - Completed: Segmentation loop (block2, k_type: predefined) in 5.40 seconds
2025-10-31 20:24:29,902 - src.pipeline - INFO - timer:58 - Completed: Single image processing for block2 in 66.12 seconds
2025-10-31 20:24:29,903 - src.pipeline - INFO - _run_test_image_analysis:352 - --- Processing test image: block3 ---
2025-10-31 20:24:30,114 - root - DEBUG - set_current_image_stem:130 - Current image stem set to: 'block3'
2025-10-31 20:24:30,114 - src.pipeline - INFO - timer:53 - Starting: Single image processing for block3...
2025-10-31 20:24:30,115 - src.data.preprocess - DEBUG - __init__:43 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-31 20:24:30,115 - src.data.preprocess - INFO - preprocess:204 - Starting preprocessing pipeline for image with shape: (3477, 3477, 3)
2025-10-31 20:24:30,135 - src.data.preprocess - INFO - preprocess:216 - Initial resize from 3477x3477 to 511x511
2025-10-31 20:24:31,427 - src.data.preprocess - INFO - preprocess:224 - Applied non-local means denoising with h=10
2025-10-31 20:24:31,427 - src.data.preprocess - DEBUG - unsharp_mask:187 - Unsharp mask amount is zero or less, skipping.
2025-10-31 20:24:31,428 - src.data.preprocess - DEBUG - _estimate_n_colors:67 - Subsampling pixels (261121) for unique color estimation.
2025-10-31 20:24:31,497 - src.data.preprocess - INFO - _estimate_n_colors:76 - Estimated 234 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-31 20:24:31,497 - src.data.preprocess - INFO - quantize_image:106 - Quantizing image (shape: (511, 511, 3)) to approx 50 colors
2025-10-31 20:24:31,499 - src.data.preprocess - DEBUG - quantize_image:127 - Subsampling 261121 pixels to 20000 for K-Means fitting.
2025-10-31 20:24:32,059 - src.data.preprocess - INFO - quantize_image:147 - Quantization complete. Final unique colors: 50 (target was 50)
2025-10-31 20:24:32,062 - src.data.preprocess - INFO - preprocess:246 - Final resize to target size (128, 128)
2025-10-31 20:24:32,062 - src.data.preprocess - INFO - preprocess:251 - Preprocessing pipeline completed successfully.
2025-10-31 20:24:32,064 - root - INFO - save_preprocessed_image:227 - Saved preprocessed image to: datasets\block\processed\preprocessed\block3_preprocessed.png
2025-10-31 20:24:32,159 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:32,159 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:32,160 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:32,160 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:32,160 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:24:32,167 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:32,167 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:32,167 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:32,167 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:32,167 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:24:32,183 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:32,184 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:32,184 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:32,184 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:32,184 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:24:32,186 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:32,186 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:32,186 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:32,186 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:32,186 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:24:32,189 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:32,189 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:32,189 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:32,189 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:32,189 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:24:32,191 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:32,191 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:32,191 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:32,191 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:32,192 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:24:32,194 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:32,194 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:32,194 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:32,195 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:32,195 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:24:32,197 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:32,197 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:32,197 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:32,197 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:32,197 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:24:32,200 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:24:32,200 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:24:32,200 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:24:32,200 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:24:32,200 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:24:33,474 - src.utils.visualization - INFO - plot_preprocessing_steps:353 - Preprocessing steps plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\preprocessed\block3_preprocessing_steps.png
2025-10-31 20:24:33,489 - src.pipeline - INFO - timer:53 - Starting: Segmentation loop (block3, k_type: determined)...
2025-10-31 20:24:33,490 - root - DEBUG - _initialize_segmenters:89 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-31 20:24:33,490 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-31 20:24:33,490 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-31 20:24:33,490 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-31 20:24:33,490 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-31 20:24:33,490 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-31 20:24:33,491 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-31 20:24:33,491 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-31 20:24:33,491 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-31 20:24:33,491 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-31 20:24:33,491 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-31 20:24:33,491 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-31 20:24:33,491 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-31 20:24:33,492 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-31 20:24:33,492 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-31 20:24:33,492 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-31 20:24:33,492 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-31 20:24:33,492 - src.models.segmentation.facade - INFO - __init__:66 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-31 20:24:33,494 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: kmeans_opt
2025-10-31 20:24:33,495 - src.models.segmentation.kmeans - DEBUG - segment:61 - KMeans: Determining optimal k...
2025-10-31 20:24:33,511 - src.models.segmentation.strategy - INFO - determine_k:58 - Unique colors: 307. Adjusted k-range: [2, 3]
2025-10-31 20:24:33,512 - src.models.segmentation.strategy - INFO - determine_k:66 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-31 20:24:33,513 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=2 for cluster metrics...
2025-10-31 20:24:35,441 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=3 for cluster metrics...
2025-10-31 20:24:37,322 - src.models.segmentation.strategy - INFO - determine_k:122 - Optimal k determined: 2 (score: 1.000)
2025-10-31 20:24:37,323 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-31 20:24:37,331 - src.models.segmentation.facade - INFO - process:138 - Method kmeans_opt completed in 3.84s with 2 clusters.
2025-10-31 20:24:37,333 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (kmeans_opt) to: datasets\block\processed\segmented\kmeans_opt\block3_determined.png
2025-10-31 20:24:37,334 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: som_opt
2025-10-31 20:24:37,351 - src.models.segmentation.strategy - INFO - determine_k:58 - Unique colors: 307. Adjusted k-range: [2, 3]
2025-10-31 20:24:37,351 - src.models.segmentation.strategy - INFO - determine_k:66 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-31 20:24:37,352 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=2 for cluster metrics...
2025-10-31 20:24:39,189 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=3 for cluster metrics...
2025-10-31 20:24:41,002 - src.models.segmentation.strategy - INFO - determine_k:122 - Optimal k determined: 2 (score: 1.000)
2025-10-31 20:24:41,002 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-31 20:24:41,344 - src.models.segmentation.facade - INFO - process:138 - Method som_opt completed in 4.01s with 2 clusters.
2025-10-31 20:24:41,345 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (som_opt) to: datasets\block\processed\segmented\som_opt\block3_determined.png
2025-10-31 20:24:41,346 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: dbscan
2025-10-31 20:24:41,346 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:68 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-31 20:25:17,126 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:90 - Optimal DBSCAN parameters: eps=15.0, min=20
2025-10-31 20:25:18,690 - src.models.segmentation.facade - INFO - process:138 - Method dbscan completed in 37.34s with 2 clusters.
2025-10-31 20:25:18,691 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block3_determined.png
2025-10-31 20:25:18,692 - src.models.segmentation.facade - INFO - process:154 - Segmentation processing completed for k_type='determined'.
2025-10-31 20:25:18,813 - src.pipeline - INFO - _process_single_test_image:512 - -> Result kmeans_opt (determined) on block3: Avg Delta E Traditional=1.77, Avg Delta E DBN=5.57, k=2
2025-10-31 20:25:19,020 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,020 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,020 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,020 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,020 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:25:19,027 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,027 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,028 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,028 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,028 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:25:19,044 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,044 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,044 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,044 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,045 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:25:19,047 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,047 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,047 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,047 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,047 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:25:19,051 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,051 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,051 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,051 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,051 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:25:19,054 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,054 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,054 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,054 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,054 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:25:19,057 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,057 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,057 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,057 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,057 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:25:19,060 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,060 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,060 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,060 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,060 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:25:19,062 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,062 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,063 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,063 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,063 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:25:19,345 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:19,350 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:19,375 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:19,377 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:19,425 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:19,431 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:19,457 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:19,458 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:19,515 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:19,523 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:19,649 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\kmeans_opt\block3_determined_summary.png
2025-10-31 20:25:19,765 - src.pipeline - INFO - _process_single_test_image:512 - -> Result som_opt (determined) on block3: Avg Delta E Traditional=1.78, Avg Delta E DBN=5.57, k=2
2025-10-31 20:25:19,950 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,951 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,951 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,951 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,951 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:25:19,958 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,958 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,958 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,958 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,958 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:25:19,974 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,974 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,974 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,974 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,974 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:25:19,976 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,976 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,976 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,977 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,977 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:25:19,979 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,979 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,979 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,979 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,979 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:25:19,981 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,981 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,982 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,982 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,982 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:25:19,984 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,984 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,984 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,984 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,984 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:25:19,987 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,987 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,987 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,987 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,987 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:25:19,989 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:19,989 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:19,989 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:19,989 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:19,989 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:25:20,298 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:20,302 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:20,324 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:20,327 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:20,380 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:20,385 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:20,410 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:20,412 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:20,473 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:20,480 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:20,604 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\som_opt\block3_determined_summary.png
2025-10-31 20:25:20,717 - src.pipeline - INFO - _process_single_test_image:512 - -> Result dbscan (determined) on block3: Avg Delta E Traditional=1.60, Avg Delta E DBN=5.56, k=2
2025-10-31 20:25:20,906 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:20,906 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:20,906 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:20,906 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:20,906 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:25:20,914 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:20,914 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:20,915 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:20,915 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:20,915 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:25:20,931 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:20,931 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:20,931 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:20,931 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:20,931 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:25:20,935 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:20,935 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:20,935 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:20,935 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:20,935 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:25:20,938 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:20,938 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:20,938 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:20,938 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:20,938 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:25:20,940 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:20,940 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:20,941 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:20,941 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:20,941 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:25:20,943 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:20,943 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:20,943 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:20,943 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:20,944 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:25:20,946 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:20,946 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:20,946 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:20,946 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:20,946 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:25:20,949 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:20,949 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:20,949 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:20,949 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:20,949 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:25:21,257 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:21,261 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:21,291 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:21,292 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:21,341 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:21,347 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:21,378 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:21,379 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:21,442 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:21,449 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:21,574 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\dbscan\block3_determined_summary.png
2025-10-31 20:25:21,584 - src.pipeline - INFO - timer:58 - Completed: Segmentation loop (block3, k_type: determined) in 48.10 seconds
2025-10-31 20:25:21,585 - src.pipeline - INFO - timer:53 - Starting: Segmentation loop (block3, k_type: predefined)...
2025-10-31 20:25:21,585 - root - DEBUG - _initialize_segmenters:89 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-31 20:25:21,585 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-31 20:25:21,585 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-31 20:25:21,586 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-31 20:25:21,586 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-31 20:25:21,586 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-31 20:25:21,586 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-31 20:25:21,586 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-31 20:25:21,586 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-31 20:25:21,586 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-31 20:25:21,587 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-31 20:25:21,587 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-31 20:25:21,587 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-31 20:25:21,587 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-31 20:25:21,587 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-31 20:25:21,588 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-31 20:25:21,588 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-31 20:25:21,588 - src.models.segmentation.facade - INFO - __init__:66 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-31 20:25:21,589 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: kmeans_predef
2025-10-31 20:25:21,589 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-31 20:25:21,599 - src.models.segmentation.facade - INFO - process:138 - Method kmeans_predef completed in 0.01s with 2 clusters.
2025-10-31 20:25:21,601 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (kmeans_predef) to: datasets\block\processed\segmented\kmeans_predef\block3_predefined.png
2025-10-31 20:25:21,601 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: som_predef
2025-10-31 20:25:21,602 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-31 20:25:21,942 - src.models.segmentation.facade - INFO - process:138 - Method som_predef completed in 0.34s with 2 clusters.
2025-10-31 20:25:21,943 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (som_predef) to: datasets\block\processed\segmented\som_predef\block3_predefined.png
2025-10-31 20:25:21,944 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: dbscan
2025-10-31 20:25:21,944 - src.models.segmentation.dbscan - INFO - segment:117 - Using predefined DBSCAN.
2025-10-31 20:25:23,589 - src.models.segmentation.facade - INFO - process:138 - Method dbscan completed in 1.64s with 1 clusters.
2025-10-31 20:25:23,591 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block3_predefined.png
2025-10-31 20:25:23,591 - src.models.segmentation.facade - INFO - process:154 - Segmentation processing completed for k_type='predefined'.
2025-10-31 20:25:23,707 - src.pipeline - INFO - _process_single_test_image:512 - -> Result kmeans_predef (predefined) on block3: Avg Delta E Traditional=1.77, Avg Delta E DBN=5.57, k=2
2025-10-31 20:25:23,905 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:23,905 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:23,905 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:23,905 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:23,905 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:25:23,913 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:23,914 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:23,914 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:23,914 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:23,914 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:25:23,930 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:23,930 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:23,930 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:23,930 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:23,930 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:25:23,933 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:23,934 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:23,934 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:23,934 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:23,934 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:25:23,936 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:23,937 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:23,937 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:23,937 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:23,937 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:25:23,939 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:23,939 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:23,939 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:23,940 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:23,940 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:25:23,942 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:23,942 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:23,942 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:23,943 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:23,943 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:25:23,945 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:23,945 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:23,945 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:23,945 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:23,945 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:25:23,948 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:23,948 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:23,948 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:23,948 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:23,948 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:25:24,250 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:24,254 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:24,276 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:24,277 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:24,327 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:24,332 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:24,357 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:24,358 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:24,413 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:24,421 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:24,547 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\kmeans_predef\block3_predefined_summary.png
2025-10-31 20:25:24,656 - src.pipeline - INFO - _process_single_test_image:512 - -> Result som_predef (predefined) on block3: Avg Delta E Traditional=1.78, Avg Delta E DBN=5.57, k=2
2025-10-31 20:25:24,852 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:24,852 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:24,852 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:24,852 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:24,852 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:25:24,860 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:24,861 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:24,861 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:24,861 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:24,861 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:25:24,877 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:24,877 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:24,877 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:24,877 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:24,877 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:25:24,879 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:24,879 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:24,880 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:24,880 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:24,880 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:25:24,883 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:24,883 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:24,883 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:24,883 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:24,883 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:25:24,885 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:24,886 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:24,886 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:24,886 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:24,886 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:25:24,888 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:24,888 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:24,889 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:24,889 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:24,889 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:25:24,891 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:24,891 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:24,891 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:24,891 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:24,891 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:25:24,893 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:24,893 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:24,894 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:24,894 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:24,894 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:25:25,193 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:25,197 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:25,256 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:25,274 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:25,336 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:25,341 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:25,368 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:25,370 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:25,426 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:25,434 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:25,565 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\som_predef\block3_predefined_summary.png
2025-10-31 20:25:25,677 - src.pipeline - INFO - _process_single_test_image:512 - -> Result dbscan (predefined) on block3: Avg Delta E Traditional=25.78, Avg Delta E DBN=16.37, k=1
2025-10-31 20:25:25,870 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:25,870 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:25,870 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:25,870 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:25,871 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:25:25,878 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:25,878 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:25,878 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:25,878 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:25,879 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:25:25,894 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:25,894 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:25,894 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:25,894 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:25,894 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:25:25,897 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:25,898 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:25,898 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:25,898 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:25,898 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:25:25,901 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:25,901 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:25,901 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:25,901 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:25,901 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:25:25,903 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:25,904 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:25,904 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:25,904 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:25,904 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:25:25,906 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:25,906 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:25,907 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:25,907 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:25,907 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:25:25,909 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:25,909 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:25,909 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:25,909 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:25,909 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:25:25,912 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:25,912 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:25,912 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:25,912 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:25,912 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:25:26,108 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:26,134 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:26,186 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:26,211 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:26,268 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:25:26,393 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\dbscan\block3_predefined_summary.png
2025-10-31 20:25:26,405 - src.pipeline - INFO - timer:58 - Completed: Segmentation loop (block3, k_type: predefined) in 4.82 seconds
2025-10-31 20:25:26,406 - src.pipeline - INFO - timer:58 - Completed: Single image processing for block3 in 56.29 seconds
2025-10-31 20:25:26,406 - src.pipeline - INFO - _run_test_image_analysis:352 - --- Processing test image: block4 ---
2025-10-31 20:25:26,628 - root - DEBUG - set_current_image_stem:130 - Current image stem set to: 'block4'
2025-10-31 20:25:26,628 - src.pipeline - INFO - timer:53 - Starting: Single image processing for block4...
2025-10-31 20:25:26,628 - src.data.preprocess - DEBUG - __init__:43 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-31 20:25:26,628 - src.data.preprocess - INFO - preprocess:204 - Starting preprocessing pipeline for image with shape: (3622, 3622, 3)
2025-10-31 20:25:26,654 - src.data.preprocess - INFO - preprocess:216 - Initial resize from 3622x3622 to 512x512
2025-10-31 20:25:27,963 - src.data.preprocess - INFO - preprocess:224 - Applied non-local means denoising with h=10
2025-10-31 20:25:27,964 - src.data.preprocess - DEBUG - unsharp_mask:187 - Unsharp mask amount is zero or less, skipping.
2025-10-31 20:25:27,964 - src.data.preprocess - DEBUG - _estimate_n_colors:67 - Subsampling pixels (262144) for unique color estimation.
2025-10-31 20:25:28,026 - src.data.preprocess - INFO - _estimate_n_colors:76 - Estimated 181 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-31 20:25:28,026 - src.data.preprocess - INFO - quantize_image:106 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-31 20:25:28,028 - src.data.preprocess - DEBUG - quantize_image:127 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-31 20:25:28,574 - src.data.preprocess - INFO - quantize_image:147 - Quantization complete. Final unique colors: 49 (target was 50)
2025-10-31 20:25:28,576 - src.data.preprocess - INFO - preprocess:246 - Final resize to target size (128, 128)
2025-10-31 20:25:28,576 - src.data.preprocess - INFO - preprocess:251 - Preprocessing pipeline completed successfully.
2025-10-31 20:25:28,578 - root - INFO - save_preprocessed_image:227 - Saved preprocessed image to: datasets\block\processed\preprocessed\block4_preprocessed.png
2025-10-31 20:25:28,672 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:28,673 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:28,673 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:28,673 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:28,673 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:25:28,680 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:28,681 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:28,681 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:28,681 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:28,681 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:25:28,695 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:28,695 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:28,695 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:28,695 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:28,695 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:25:28,698 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:28,699 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:28,699 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:28,699 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:28,699 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:25:28,701 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:28,701 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:28,701 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:28,702 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:28,702 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:25:28,704 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:28,704 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:28,704 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:28,704 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:28,704 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:25:28,707 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:28,707 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:28,707 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:28,707 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:28,707 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:25:28,709 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:28,710 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:28,710 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:28,710 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:28,710 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:25:28,712 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:25:28,712 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:25:28,712 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:25:28,712 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:25:28,712 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:25:30,084 - src.utils.visualization - INFO - plot_preprocessing_steps:353 - Preprocessing steps plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\preprocessed\block4_preprocessing_steps.png
2025-10-31 20:25:30,099 - src.pipeline - INFO - timer:53 - Starting: Segmentation loop (block4, k_type: determined)...
2025-10-31 20:25:30,100 - root - DEBUG - _initialize_segmenters:89 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-31 20:25:30,100 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-31 20:25:30,100 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-31 20:25:30,100 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-31 20:25:30,101 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-31 20:25:30,101 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-31 20:25:30,101 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-31 20:25:30,101 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-31 20:25:30,101 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-31 20:25:30,101 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-31 20:25:30,102 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-31 20:25:30,102 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-31 20:25:30,102 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-31 20:25:30,102 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-31 20:25:30,102 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-31 20:25:30,102 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-31 20:25:30,103 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-31 20:25:30,103 - src.models.segmentation.facade - INFO - __init__:66 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-31 20:25:30,103 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: kmeans_opt
2025-10-31 20:25:30,104 - src.models.segmentation.kmeans - DEBUG - segment:61 - KMeans: Determining optimal k...
2025-10-31 20:25:30,124 - src.models.segmentation.strategy - INFO - determine_k:58 - Unique colors: 290. Adjusted k-range: [2, 3]
2025-10-31 20:25:30,124 - src.models.segmentation.strategy - INFO - determine_k:66 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-31 20:25:30,126 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=2 for cluster metrics...
2025-10-31 20:25:31,994 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=3 for cluster metrics...
2025-10-31 20:25:33,827 - src.models.segmentation.strategy - INFO - determine_k:122 - Optimal k determined: 2 (score: 0.500)
2025-10-31 20:25:33,828 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-31 20:25:33,836 - src.models.segmentation.facade - INFO - process:138 - Method kmeans_opt completed in 3.73s with 2 clusters.
2025-10-31 20:25:33,838 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (kmeans_opt) to: datasets\block\processed\segmented\kmeans_opt\block4_determined.png
2025-10-31 20:25:33,839 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: som_opt
2025-10-31 20:25:33,858 - src.models.segmentation.strategy - INFO - determine_k:58 - Unique colors: 290. Adjusted k-range: [2, 3]
2025-10-31 20:25:33,858 - src.models.segmentation.strategy - INFO - determine_k:66 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-31 20:25:33,859 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=2 for cluster metrics...
2025-10-31 20:25:35,687 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=3 for cluster metrics...
2025-10-31 20:25:37,527 - src.models.segmentation.strategy - INFO - determine_k:122 - Optimal k determined: 2 (score: 0.500)
2025-10-31 20:25:37,528 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-31 20:25:37,867 - src.models.segmentation.facade - INFO - process:138 - Method som_opt completed in 4.03s with 2 clusters.
2025-10-31 20:25:37,869 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (som_opt) to: datasets\block\processed\segmented\som_opt\block4_determined.png
2025-10-31 20:25:37,869 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: dbscan
2025-10-31 20:25:37,869 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:68 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-31 20:26:11,311 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:90 - Optimal DBSCAN parameters: eps=10.0, min=10
2025-10-31 20:26:13,041 - src.models.segmentation.facade - INFO - process:138 - Method dbscan completed in 35.17s with 4 clusters.
2025-10-31 20:26:13,042 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block4_determined.png
2025-10-31 20:26:13,043 - src.models.segmentation.facade - INFO - process:154 - Segmentation processing completed for k_type='determined'.
2025-10-31 20:26:13,151 - src.pipeline - INFO - _process_single_test_image:512 - -> Result kmeans_opt (determined) on block4: Avg Delta E Traditional=2.61, Avg Delta E DBN=5.62, k=2
2025-10-31 20:26:13,342 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:13,342 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:13,342 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:13,342 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:13,342 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:26:13,349 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:13,349 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:13,349 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:13,349 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:13,349 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:26:13,367 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:13,367 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:13,367 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:13,367 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:13,368 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:26:13,371 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:13,371 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:13,371 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:13,371 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:13,371 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:26:13,374 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:13,374 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:13,374 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:13,374 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:13,374 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:26:13,377 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:13,377 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:13,377 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:13,377 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:13,377 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:26:13,380 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:13,380 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:13,380 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:13,380 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:13,380 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:26:13,383 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:13,383 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:13,383 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:13,383 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:13,383 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:26:13,386 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:13,386 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:13,386 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:13,386 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:13,386 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:26:13,677 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:13,682 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:13,708 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:13,709 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:13,761 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:13,766 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:13,794 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:13,795 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:13,850 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:13,859 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:13,984 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\kmeans_opt\block4_determined_summary.png
2025-10-31 20:26:14,093 - src.pipeline - INFO - _process_single_test_image:512 - -> Result som_opt (determined) on block4: Avg Delta E Traditional=11.18, Avg Delta E DBN=17.87, k=2
2025-10-31 20:26:14,287 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:14,287 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:14,287 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:14,287 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:14,288 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:26:14,296 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:14,296 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:14,296 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:14,296 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:14,296 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:26:14,313 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:14,313 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:14,314 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:14,314 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:14,314 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:26:14,316 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:14,316 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:14,316 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:14,316 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:14,317 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:26:14,320 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:14,320 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:14,320 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:14,320 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:14,320 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:26:14,323 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:14,323 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:14,323 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:14,323 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:14,323 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:26:14,325 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:14,326 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:14,326 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:14,326 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:14,326 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:26:14,328 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:14,328 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:14,328 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:14,328 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:14,329 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:26:14,331 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:14,331 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:14,331 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:14,331 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:14,331 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:26:14,633 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:14,639 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:14,662 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:14,664 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:14,715 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:14,721 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:14,745 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:14,746 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:14,804 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:14,812 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:14,940 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\som_opt\block4_determined_summary.png
2025-10-31 20:26:15,061 - src.pipeline - INFO - _process_single_test_image:512 - -> Result dbscan (determined) on block4: Avg Delta E Traditional=10.59, Avg Delta E DBN=8.32, k=4
2025-10-31 20:26:15,271 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:15,271 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:15,271 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:15,271 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:15,271 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:26:15,279 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:15,279 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:15,279 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:15,279 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:15,279 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:26:15,295 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:15,295 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:15,295 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:15,295 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:15,295 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:26:15,297 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:15,298 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:15,298 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:15,298 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:15,298 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:26:15,300 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:15,300 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:15,300 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:15,300 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:15,300 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:26:15,303 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:15,303 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:15,303 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:15,303 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:15,303 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:26:15,306 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:15,306 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:15,306 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:15,306 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:15,306 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:26:15,309 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:15,309 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:15,309 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:15,309 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:15,309 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:26:15,311 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:15,311 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:15,311 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:15,312 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:15,312 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:26:15,886 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:15,890 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:15,894 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:15,897 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:15,921 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:15,922 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:15,924 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:15,925 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:15,960 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:15,965 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:15,970 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:15,975 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:16,000 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:16,001 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:16,002 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:16,004 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:16,040 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:16,048 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:16,057 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:16,065 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:16,209 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\dbscan\block4_determined_summary.png
2025-10-31 20:26:16,219 - src.pipeline - INFO - timer:58 - Completed: Segmentation loop (block4, k_type: determined) in 46.12 seconds
2025-10-31 20:26:16,219 - src.pipeline - INFO - timer:53 - Starting: Segmentation loop (block4, k_type: predefined)...
2025-10-31 20:26:16,220 - root - DEBUG - _initialize_segmenters:89 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-31 20:26:16,220 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-31 20:26:16,220 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-31 20:26:16,220 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-31 20:26:16,220 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-31 20:26:16,220 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-31 20:26:16,221 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-31 20:26:16,221 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-31 20:26:16,221 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-31 20:26:16,221 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-31 20:26:16,221 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-31 20:26:16,221 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-31 20:26:16,222 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-31 20:26:16,222 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-31 20:26:16,222 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-31 20:26:16,222 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-31 20:26:16,222 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-31 20:26:16,223 - src.models.segmentation.facade - INFO - __init__:66 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-31 20:26:16,223 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: kmeans_predef
2025-10-31 20:26:16,224 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-31 20:26:16,232 - src.models.segmentation.facade - INFO - process:138 - Method kmeans_predef completed in 0.01s with 2 clusters.
2025-10-31 20:26:16,233 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (kmeans_predef) to: datasets\block\processed\segmented\kmeans_predef\block4_predefined.png
2025-10-31 20:26:16,234 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: som_predef
2025-10-31 20:26:16,235 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-31 20:26:16,567 - src.models.segmentation.facade - INFO - process:138 - Method som_predef completed in 0.33s with 2 clusters.
2025-10-31 20:26:16,571 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (som_predef) to: datasets\block\processed\segmented\som_predef\block4_predefined.png
2025-10-31 20:26:16,572 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: dbscan
2025-10-31 20:26:16,572 - src.models.segmentation.dbscan - INFO - segment:117 - Using predefined DBSCAN.
2025-10-31 20:26:18,420 - src.models.segmentation.facade - INFO - process:138 - Method dbscan completed in 1.85s with 1 clusters.
2025-10-31 20:26:18,422 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block4_predefined.png
2025-10-31 20:26:18,422 - src.models.segmentation.facade - INFO - process:154 - Segmentation processing completed for k_type='predefined'.
2025-10-31 20:26:18,524 - src.pipeline - INFO - _process_single_test_image:512 - -> Result kmeans_predef (predefined) on block4: Avg Delta E Traditional=2.61, Avg Delta E DBN=5.62, k=2
2025-10-31 20:26:18,715 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:18,715 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:18,715 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:18,715 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:18,716 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:26:18,724 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:18,724 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:18,724 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:18,724 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:18,724 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:26:18,742 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:18,742 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:18,742 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:18,742 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:18,742 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:26:18,744 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:18,744 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:18,745 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:18,745 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:18,745 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:26:18,747 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:18,747 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:18,747 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:18,747 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:18,747 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:26:18,749 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:18,750 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:18,750 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:18,750 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:18,750 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:26:18,752 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:18,753 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:18,753 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:18,753 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:18,753 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:26:18,756 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:18,756 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:18,756 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:18,756 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:18,756 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:26:18,758 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:18,758 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:18,758 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:18,758 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:18,758 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:26:19,267 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:19,271 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:19,295 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:19,297 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:19,347 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:19,353 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:19,381 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:19,382 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:19,435 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:19,442 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:19,570 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\kmeans_predef\block4_predefined_summary.png
2025-10-31 20:26:19,673 - src.pipeline - INFO - _process_single_test_image:512 - -> Result som_predef (predefined) on block4: Avg Delta E Traditional=11.18, Avg Delta E DBN=17.87, k=2
2025-10-31 20:26:19,867 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:19,868 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:19,868 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:19,868 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:19,868 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:26:19,875 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:19,875 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:19,876 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:19,876 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:19,876 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:26:19,892 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:19,892 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:19,892 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:19,892 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:19,892 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:26:19,895 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:19,895 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:19,895 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:19,895 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:19,895 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:26:19,897 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:19,897 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:19,897 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:19,898 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:19,898 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:26:19,900 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:19,900 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:19,900 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:19,900 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:19,900 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:26:19,903 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:19,903 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:19,903 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:19,903 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:19,903 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:26:19,906 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:19,906 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:19,906 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:19,906 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:19,906 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:26:19,908 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:19,908 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:19,908 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:19,908 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:19,908 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:26:20,208 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:20,212 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:20,235 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:20,236 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:20,286 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:20,292 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:20,316 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:20,318 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:20,372 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:20,380 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:20,512 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\som_predef\block4_predefined_summary.png
2025-10-31 20:26:20,622 - src.pipeline - INFO - _process_single_test_image:512 - -> Result dbscan (predefined) on block4: Avg Delta E Traditional=23.51, Avg Delta E DBN=19.69, k=1
2025-10-31 20:26:20,812 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:20,812 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:20,812 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:20,812 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:20,812 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:26:20,820 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:20,820 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:20,820 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:20,820 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:20,821 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:26:20,835 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:20,836 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:20,836 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:20,836 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:20,836 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:26:20,838 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:20,838 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:20,838 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:20,838 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:20,839 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:26:20,841 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:20,841 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:20,841 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:20,841 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:20,841 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:26:20,843 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:20,844 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:20,844 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:20,844 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:20,844 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:26:20,846 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:20,846 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:20,846 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:20,846 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:20,847 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:26:20,849 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:20,849 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:20,849 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:20,849 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:20,849 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:26:20,852 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:20,852 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:20,852 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:20,852 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:20,852 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:26:21,043 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:21,069 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:21,119 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:21,146 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:21,200 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:26:21,324 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\dbscan\block4_predefined_summary.png
2025-10-31 20:26:21,336 - src.pipeline - INFO - timer:58 - Completed: Segmentation loop (block4, k_type: predefined) in 5.12 seconds
2025-10-31 20:26:21,336 - src.pipeline - INFO - timer:58 - Completed: Single image processing for block4 in 54.71 seconds
2025-10-31 20:26:21,337 - src.pipeline - INFO - _run_test_image_analysis:352 - --- Processing test image: block5 ---
2025-10-31 20:26:21,585 - root - DEBUG - set_current_image_stem:130 - Current image stem set to: 'block5'
2025-10-31 20:26:21,585 - src.pipeline - INFO - timer:53 - Starting: Single image processing for block5...
2025-10-31 20:26:21,585 - src.data.preprocess - DEBUG - __init__:43 - Preprocessor initialized with config: PreprocessingConfig(initial_resize=512, target_size=(128, 128), denoise_h=10, unsharp_amount=0.0, unsharp_threshold=0, quantization_colors=50, quantization_subsample=20000, unsharp_blur_kernel_size=[5, 5], unsharp_blur_sigma=1.0)
2025-10-31 20:26:21,585 - src.data.preprocess - INFO - preprocess:204 - Starting preprocessing pipeline for image with shape: (3504, 3504, 3)
2025-10-31 20:26:21,606 - src.data.preprocess - INFO - preprocess:216 - Initial resize from 3504x3504 to 512x512
2025-10-31 20:26:22,900 - src.data.preprocess - INFO - preprocess:224 - Applied non-local means denoising with h=10
2025-10-31 20:26:22,901 - src.data.preprocess - DEBUG - unsharp_mask:187 - Unsharp mask amount is zero or less, skipping.
2025-10-31 20:26:22,901 - src.data.preprocess - DEBUG - _estimate_n_colors:67 - Subsampling pixels (262144) for unique color estimation.
2025-10-31 20:26:22,969 - src.data.preprocess - INFO - _estimate_n_colors:76 - Estimated 221 unique colors. Target quantization colors: 50 (Config limit: 50)
2025-10-31 20:26:22,970 - src.data.preprocess - INFO - quantize_image:106 - Quantizing image (shape: (512, 512, 3)) to approx 50 colors
2025-10-31 20:26:22,971 - src.data.preprocess - DEBUG - quantize_image:127 - Subsampling 262144 pixels to 20000 for K-Means fitting.
2025-10-31 20:26:23,524 - src.data.preprocess - INFO - quantize_image:147 - Quantization complete. Final unique colors: 50 (target was 50)
2025-10-31 20:26:23,526 - src.data.preprocess - INFO - preprocess:246 - Final resize to target size (128, 128)
2025-10-31 20:26:23,527 - src.data.preprocess - INFO - preprocess:251 - Preprocessing pipeline completed successfully.
2025-10-31 20:26:23,528 - root - INFO - save_preprocessed_image:227 - Saved preprocessed image to: datasets\block\processed\preprocessed\block5_preprocessed.png
2025-10-31 20:26:23,622 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:23,622 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:23,622 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:23,622 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:23,622 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:26:23,629 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:23,629 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:23,630 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:23,630 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:23,630 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:26:23,645 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:23,645 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:23,645 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:23,645 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:23,645 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:26:23,648 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:23,648 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:23,648 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:23,648 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:23,648 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:26:23,651 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:23,651 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:23,651 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:23,651 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:23,651 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:26:23,654 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:23,654 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:23,654 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:23,654 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:23,655 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:26:23,657 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:23,657 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:23,657 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:23,657 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:23,657 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:26:23,660 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:23,660 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:23,660 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:23,660 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:23,660 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:26:23,662 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:26:23,663 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:26:23,663 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:26:23,663 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:26:23,663 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:26:25,053 - src.utils.visualization - INFO - plot_preprocessing_steps:353 - Preprocessing steps plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\preprocessed\block5_preprocessing_steps.png
2025-10-31 20:26:25,067 - src.pipeline - INFO - timer:53 - Starting: Segmentation loop (block5, k_type: determined)...
2025-10-31 20:26:25,067 - root - DEBUG - _initialize_segmenters:89 - Segmenter._init_seg: Initializing for k_type='determined'...
2025-10-31 20:26:25,067 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-31 20:26:25,067 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'kmeans_opt' matches. Trying to init KMeansSegmenter...
2025-10-31 20:26:25,068 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: determined
2025-10-31 20:26:25,068 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_opt'
2025-10-31 20:26:25,068 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-31 20:26:25,068 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'kmeans_predef' (Not requested or k_type mismatch).
2025-10-31 20:26:25,068 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-31 20:26:25,068 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'som_opt' matches. Trying to init SOMSegmenter...
2025-10-31 20:26:25,069 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: determined
2025-10-31 20:26:25,069 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_opt'
2025-10-31 20:26:25,069 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-31 20:26:25,069 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'som_predef' (Not requested or k_type mismatch).
2025-10-31 20:26:25,069 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-31 20:26:25,069 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-31 20:26:25,069 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: determined
2025-10-31 20:26:25,070 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-31 20:26:25,070 - src.models.segmentation.facade - INFO - __init__:66 - Segmenter Facade initialized for k_type='determined' with methods: ['kmeans_opt', 'som_opt', 'dbscan']
2025-10-31 20:26:25,070 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: kmeans_opt
2025-10-31 20:26:25,071 - src.models.segmentation.kmeans - DEBUG - segment:61 - KMeans: Determining optimal k...
2025-10-31 20:26:25,092 - src.models.segmentation.strategy - INFO - determine_k:58 - Unique colors: 307. Adjusted k-range: [2, 3]
2025-10-31 20:26:25,092 - src.models.segmentation.strategy - INFO - determine_k:66 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-31 20:26:25,094 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=2 for cluster metrics...
2025-10-31 20:26:27,012 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=3 for cluster metrics...
2025-10-31 20:26:28,866 - src.models.segmentation.strategy - INFO - determine_k:122 - Optimal k determined: 2 (score: 0.500)
2025-10-31 20:26:28,866 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-31 20:26:28,875 - src.models.segmentation.facade - INFO - process:138 - Method kmeans_opt completed in 3.80s with 2 clusters.
2025-10-31 20:26:28,877 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (kmeans_opt) to: datasets\block\processed\segmented\kmeans_opt\block5_determined.png
2025-10-31 20:26:28,877 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: som_opt
2025-10-31 20:26:28,896 - src.models.segmentation.strategy - INFO - determine_k:58 - Unique colors: 307. Adjusted k-range: [2, 3]
2025-10-31 20:26:28,896 - src.models.segmentation.strategy - INFO - determine_k:66 - Subsampling pixels to 10000 for cluster analysis efficiency
2025-10-31 20:26:28,898 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=2 for cluster metrics...
2025-10-31 20:26:30,750 - src.models.segmentation.strategy - INFO - determine_k:86 - Testing k=3 for cluster metrics...
2025-10-31 20:26:32,607 - src.models.segmentation.strategy - INFO - determine_k:122 - Optimal k determined: 2 (score: 0.500)
2025-10-31 20:26:32,608 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-31 20:26:32,925 - src.models.segmentation.facade - INFO - process:138 - Method som_opt completed in 4.05s with 2 clusters.
2025-10-31 20:26:32,928 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (som_opt) to: datasets\block\processed\segmented\som_opt\block5_determined.png
2025-10-31 20:26:32,928 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: dbscan
2025-10-31 20:26:32,928 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:68 - Finding optimal DBSCAN parameters (heuristic)...
2025-10-31 20:27:06,144 - src.models.segmentation.dbscan - INFO - _find_optimal_dbscan_params:90 - Optimal DBSCAN parameters: eps=15.0, min=20
2025-10-31 20:27:08,018 - src.models.segmentation.facade - INFO - process:138 - Method dbscan completed in 35.09s with 3 clusters.
2025-10-31 20:27:08,019 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block5_determined.png
2025-10-31 20:27:08,020 - src.models.segmentation.facade - INFO - process:154 - Segmentation processing completed for k_type='determined'.
2025-10-31 20:27:08,130 - src.pipeline - INFO - _process_single_test_image:512 - -> Result kmeans_opt (determined) on block5: Avg Delta E Traditional=4.59, Avg Delta E DBN=5.42, k=2
2025-10-31 20:27:08,323 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:08,323 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:08,323 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:08,323 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:08,323 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:27:08,331 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:08,332 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:08,332 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:08,332 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:08,332 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:27:08,347 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:08,347 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:08,347 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:08,347 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:08,348 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:27:08,350 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:08,350 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:08,350 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:08,350 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:08,350 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:27:08,353 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:08,353 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:08,353 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:08,353 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:08,353 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:27:08,356 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:08,356 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:08,356 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:08,356 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:08,356 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:27:08,359 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:08,359 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:08,359 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:08,359 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:08,359 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:27:08,362 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:08,362 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:08,362 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:08,362 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:08,362 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:27:08,364 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:08,364 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:08,364 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:08,365 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:08,365 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:27:08,652 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:08,656 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:08,680 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:08,681 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:08,730 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:08,736 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:08,761 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:08,762 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:08,816 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:08,825 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:08,948 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\kmeans_opt\block5_determined_summary.png
2025-10-31 20:27:09,055 - src.pipeline - INFO - _process_single_test_image:512 - -> Result som_opt (determined) on block5: Avg Delta E Traditional=13.72, Avg Delta E DBN=7.97, k=2
2025-10-31 20:27:09,245 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:09,245 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:09,245 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:09,245 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:09,245 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:27:09,253 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:09,253 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:09,253 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:09,253 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:09,253 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:27:09,269 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:09,269 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:09,269 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:09,269 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:09,269 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:27:09,272 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:09,272 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:09,273 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:09,273 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:09,273 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:27:09,275 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:09,275 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:09,275 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:09,275 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:09,275 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:27:09,277 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:09,278 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:09,278 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:09,278 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:09,278 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:27:09,280 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:09,280 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:09,280 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:09,280 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:09,280 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:27:09,283 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:09,283 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:09,283 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:09,283 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:09,283 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:27:09,285 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:09,285 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:09,285 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:09,285 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:09,285 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:27:09,578 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:09,582 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:09,604 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:09,605 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:09,656 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:09,662 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:09,686 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:09,687 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:09,743 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:09,751 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:09,880 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\som_opt\block5_determined_summary.png
2025-10-31 20:27:09,991 - src.pipeline - INFO - _process_single_test_image:512 - -> Result dbscan (determined) on block5: Avg Delta E Traditional=9.52, Avg Delta E DBN=12.28, k=3
2025-10-31 20:27:10,187 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:10,187 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:10,187 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:10,187 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:10,187 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:27:10,195 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:10,195 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:10,195 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:10,195 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:10,195 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:27:10,212 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:10,213 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:10,213 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:10,213 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:10,213 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:27:10,215 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:10,215 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:10,215 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:10,215 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:10,216 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:27:10,218 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:10,218 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:10,218 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:10,218 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:10,218 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:27:10,221 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:10,221 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:10,221 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:10,221 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:10,221 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:27:10,224 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:10,224 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:10,224 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:10,224 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:10,224 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:27:10,227 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:10,227 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:10,227 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:10,227 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:10,227 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:27:10,229 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:10,229 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:10,229 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:10,229 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:10,229 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:27:10,648 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,652 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,656 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,677 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,679 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,680 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,717 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,722 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,728 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,752 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,753 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,754 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,795 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,804 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,812 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:10,935 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\dbscan\block5_determined_summary.png
2025-10-31 20:27:10,950 - src.pipeline - INFO - timer:58 - Completed: Segmentation loop (block5, k_type: determined) in 45.88 seconds
2025-10-31 20:27:10,950 - src.pipeline - INFO - timer:53 - Starting: Segmentation loop (block5, k_type: predefined)...
2025-10-31 20:27:10,951 - root - DEBUG - _initialize_segmenters:89 - Segmenter._init_seg: Initializing for k_type='predefined'...
2025-10-31 20:27:10,951 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_opt'...
2025-10-31 20:27:10,951 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'kmeans_opt' (Not requested or k_type mismatch).
2025-10-31 20:27:10,951 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'kmeans_predef'...
2025-10-31 20:27:10,951 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'kmeans_predef' matches. Trying to init KMeansSegmenter...
2025-10-31 20:27:10,951 - src.models.segmentation.kmeans - INFO - __init__:36 - KMeansSegmenter initialized with k_type: predefined
2025-10-31 20:27:10,952 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized KMeansSegmenter for 'kmeans_predef'
2025-10-31 20:27:10,952 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_opt'...
2025-10-31 20:27:10,952 - root - DEBUG - _initialize_segmenters:103 - Segmenter._init_seg: Skipping method 'som_opt' (Not requested or k_type mismatch).
2025-10-31 20:27:10,952 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'som_predef'...
2025-10-31 20:27:10,952 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'som_predef' matches. Trying to init SOMSegmenter...
2025-10-31 20:27:10,952 - src.models.segmentation.som - INFO - __init__:38 - SOMSegmenter initialized with k_type: predefined
2025-10-31 20:27:10,952 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized SOMSegmenter for 'som_predef'
2025-10-31 20:27:10,953 - root - DEBUG - _initialize_segmenters:91 - Segmenter._init_seg: Checking method 'dbscan'...
2025-10-31 20:27:10,953 - root - DEBUG - _initialize_segmenters:94 - Segmenter._init_seg: Method 'dbscan' matches. Trying to init DBSCANSegmenter...
2025-10-31 20:27:10,953 - src.models.segmentation.dbscan - INFO - __init__:37 - DBSCANSegmenter initialized with k_type: predefined
2025-10-31 20:27:10,953 - root - DEBUG - _initialize_segmenters:98 - Segmenter._init_seg: Successfully initialized DBSCANSegmenter for 'dbscan'
2025-10-31 20:27:10,953 - src.models.segmentation.facade - INFO - __init__:66 - Segmenter Facade initialized for k_type='predefined' with methods: ['kmeans_predef', 'som_predef', 'dbscan']
2025-10-31 20:27:10,955 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: kmeans_predef
2025-10-31 20:27:10,955 - src.models.segmentation.kmeans - INFO - segment:65 - KMeans: Using k = 2
2025-10-31 20:27:10,965 - src.models.segmentation.facade - INFO - process:138 - Method kmeans_predef completed in 0.01s with 2 clusters.
2025-10-31 20:27:10,967 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (kmeans_predef) to: datasets\block\processed\segmented\kmeans_predef\block5_predefined.png
2025-10-31 20:27:10,967 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: som_predef
2025-10-31 20:27:10,968 - src.models.segmentation.som - INFO - segment:69 - Running SOM segmentation with k=2
2025-10-31 20:27:11,315 - src.models.segmentation.facade - INFO - process:138 - Method som_predef completed in 0.35s with 2 clusters.
2025-10-31 20:27:11,317 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (som_predef) to: datasets\block\processed\segmented\som_predef\block5_predefined.png
2025-10-31 20:27:11,317 - src.models.segmentation.facade - INFO - process:134 - Running segmentation method: dbscan
2025-10-31 20:27:11,317 - src.models.segmentation.dbscan - INFO - segment:117 - Using predefined DBSCAN.
2025-10-31 20:27:13,131 - src.models.segmentation.facade - INFO - process:138 - Method dbscan completed in 1.81s with 1 clusters.
2025-10-31 20:27:13,132 - src.utils.output_manager - INFO - save_segmentation_result:269 - Saved segmented image (dbscan) to: datasets\block\processed\segmented\dbscan\block5_predefined.png
2025-10-31 20:27:13,132 - src.models.segmentation.facade - INFO - process:154 - Segmentation processing completed for k_type='predefined'.
2025-10-31 20:27:13,236 - src.pipeline - INFO - _process_single_test_image:512 - -> Result kmeans_predef (predefined) on block5: Avg Delta E Traditional=4.59, Avg Delta E DBN=5.42, k=2
2025-10-31 20:27:13,431 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:13,431 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:13,431 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:13,431 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:13,431 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:27:13,439 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:13,439 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:13,439 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:13,439 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:13,439 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:27:13,455 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:13,455 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:13,456 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:13,456 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:13,456 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:27:13,458 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:13,458 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:13,459 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:13,459 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:13,459 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:27:13,461 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:13,461 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:13,461 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:13,461 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:13,461 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:27:13,464 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:13,464 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:13,464 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:13,464 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:13,464 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:27:13,467 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:13,467 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:13,467 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:13,467 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:13,467 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:27:13,470 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:13,470 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:13,470 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:13,470 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:13,470 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:27:13,473 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:13,473 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:13,473 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:13,473 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:13,474 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:27:13,762 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:13,766 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:13,791 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:13,792 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:13,844 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:13,850 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:13,875 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:13,877 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:13,932 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:13,941 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:14,081 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\kmeans_predef\block5_predefined_summary.png
2025-10-31 20:27:14,191 - src.pipeline - INFO - _process_single_test_image:512 - -> Result som_predef (predefined) on block5: Avg Delta E Traditional=13.72, Avg Delta E DBN=7.97, k=2
2025-10-31 20:27:14,378 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:14,378 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:14,378 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:14,378 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:14,378 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:27:14,386 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:14,387 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:14,387 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:14,387 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:14,387 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:27:14,403 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:14,404 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:14,404 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:14,404 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:14,404 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:27:14,408 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:14,408 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:14,408 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:14,408 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:14,408 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:27:14,411 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:14,411 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:14,411 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:14,411 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:14,411 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:27:14,414 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:14,414 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:14,414 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:14,414 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:14,414 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:27:14,416 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:14,416 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:14,417 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:14,417 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:14,417 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:27:14,419 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:14,419 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:14,419 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:14,419 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:14,419 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:27:14,422 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:14,422 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:14,422 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:14,422 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:14,422 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:27:14,787 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:14,791 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:14,814 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:14,815 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:14,862 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:14,868 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:14,894 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:14,895 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:14,947 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:14,955 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:15,084 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\som_predef\block5_predefined_summary.png
2025-10-31 20:27:15,201 - src.pipeline - INFO - _process_single_test_image:512 - -> Result dbscan (predefined) on block5: Avg Delta E Traditional=17.41, Avg Delta E DBN=25.05, k=1
2025-10-31 20:27:15,399 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:15,399 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:15,399 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:15,399 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:15,399 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:27:15,407 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:15,407 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:15,407 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:15,407 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:15,407 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:27:15,423 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:15,424 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:15,424 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:15,424 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:15,424 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:27:15,426 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:15,426 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:15,426 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:15,426 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:15,426 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:27:15,428 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:15,428 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:15,429 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:15,429 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:15,429 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:27:15,431 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:15,431 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:15,431 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:15,431 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:15,431 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:27:15,434 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:15,434 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:15,434 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:15,434 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:15,434 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:27:15,436 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:15,437 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:15,437 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:15,437 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:15,437 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:27:15,439 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:15,439 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:15,439 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:15,439 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:15,439 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:27:15,638 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:15,666 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:15,721 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:15,745 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:15,801 - matplotlib.axes._base - DEBUG - _update_title_position:2983 - title position was updated manually, not adjusting
2025-10-31 20:27:15,930 - src.utils.visualization - INFO - plot_segmentation_summary:297 - Segmentation summary plot saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\processed\segmented\dbscan\block5_predefined_summary.png
2025-10-31 20:27:15,941 - src.pipeline - INFO - timer:58 - Completed: Segmentation loop (block5, k_type: predefined) in 4.99 seconds
2025-10-31 20:27:15,942 - src.pipeline - INFO - timer:58 - Completed: Single image processing for block5 in 54.36 seconds
2025-10-31 20:27:15,942 - root - DEBUG - set_current_image_stem:132 - Current image stem cleared.
2025-10-31 20:27:15,942 - src.pipeline - INFO - _run_test_image_analysis:380 - Test image analysis loop finished.
2025-10-31 20:27:15,946 - src.pipeline - INFO - timer:58 - Completed: Test Image Analysis Loop in 297.41 seconds
2025-10-31 20:27:15,946 - src.pipeline - INFO - timer:53 - Starting: Saving Final Results...
2025-10-31 20:27:15,947 - src.pipeline - INFO - _save_and_summarize_results:558 - Saving 30 total Delta E results entries to CSV...
2025-10-31 20:27:15,961 - root - INFO - save_delta_e_results:305 - Saved Delta E results (30 entries) to: datasets\block\analysis\block_delta_e_results.csv
2025-10-31 20:27:15,962 - src.pipeline - INFO - _save_and_summarize_results:573 - --- Overall Results Summary (Averaged across images and k_types) ---
2025-10-31 20:27:15,992 - src.pipeline - INFO - _save_and_summarize_results:581 - 
   method  avg_traditional_delta_e  avg_pso_dbn_delta_e  avg_processing_time
0  dbscan                    9.586               10.962               20.764
1  kmeans                    2.491                5.561                1.893
2     som                    8.342                8.419                2.176
2025-10-31 20:27:15,992 - src.pipeline - INFO - _save_and_summarize_results:584 - --- Detailed Results by Method and k_type (Averaged across images) ---
2025-10-31 20:27:16,006 - src.pipeline - INFO - _save_and_summarize_results:592 - 
   method      k_type  avg_traditional_delta_e  avg_pso_dbn_delta_e  avg_processing_time  avg_n_clusters
0  dbscan  determined                    5.086                7.465               39.723           2.600
1  dbscan  predefined                   14.085               14.458                1.804           1.400
2  kmeans  determined                    2.491                5.561                3.776           2.000
3  kmeans  predefined                    2.491                5.561                0.010           2.000
4     som  determined                    8.342                8.419                4.015           2.000
5     som  predefined                    8.342                8.419                0.337           2.000
2025-10-31 20:27:16,007 - src.pipeline - INFO - _save_and_summarize_results:593 - --- End of Summary ---
2025-10-31 20:27:16,007 - src.utils.visualization - INFO - plot_delta_e_summary_bars:382 - Generating Delta E summary bar chart from 30 results...
2025-10-31 20:27:16,109 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:16,109 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:16,109 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:16,109 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:16,109 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 1189
2025-10-31 20:27:16,117 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:16,117 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:16,117 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:16,117 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:16,117 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 2994
2025-10-31 20:27:16,134 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:16,134 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:16,134 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:16,134 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:16,134 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 696
2025-10-31 20:27:16,136 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:16,137 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:16,137 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:16,137 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:16,137 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 526
2025-10-31 20:27:16,141 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:16,141 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:16,141 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:16,141 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:16,141 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 499
2025-10-31 20:27:16,144 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:16,144 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:16,144 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:16,144 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:16,144 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 673
2025-10-31 20:27:16,146 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:16,146 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:16,146 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:16,147 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:16,147 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 922
2025-10-31 20:27:16,149 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:16,149 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:16,149 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:16,149 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:16,149 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 568
2025-10-31 20:27:16,151 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IHDR' 16 13
2025-10-31 20:27:16,152 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'sBIT' 41 4
2025-10-31 20:27:16,152 - PIL.PngImagePlugin - DEBUG - _open:728 - b'sBIT' 41 4 (unknown)
2025-10-31 20:27:16,152 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'pHYs' 57 9
2025-10-31 20:27:16,152 - PIL.PngImagePlugin - DEBUG - call:191 - STREAM b'IDAT' 78 626
2025-10-31 20:27:16,196 - matplotlib.font_manager - DEBUG - _findfont_cached:1413 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=9.0.
2025-10-31 20:27:16,196 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,196 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-10-31 20:27:16,196 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,196 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,196 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,196 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,197 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,197 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,197 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,197 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,197 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,197 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-10-31 20:27:16,197 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,197 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,197 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,197 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,197 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,198 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,198 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,198 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,198 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,198 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,198 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-10-31 20:27:16,198 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,198 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,198 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,198 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,199 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,199 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,199 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,199 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,199 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,199 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-10-31 20:27:16,199 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,199 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,199 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,199 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,199 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:27:16,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-10-31 20:27:16,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:27:16,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:27:16,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:27:16,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,200 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:27:16,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,201 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-10-31 20:27:16,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:27:16,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:27:16,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:27:16,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,202 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:27:16,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,203 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:27:16,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:27:16,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:27:16,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:27:16,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,204 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,205 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,205 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:27:16,205 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,205 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,205 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,205 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,206 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:27:16,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,207 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:27:16,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:27:16,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
2025-10-31 20:27:16,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:27:16,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:27:16,208 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:27:16,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:27:16,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:27:16,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,209 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:27:16,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
2025-10-31 20:27:16,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:27:16,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-10-31 20:27:16,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,210 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-10-31 20:27:16,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:27:16,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:27:16,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:27:16,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,211 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:27:16,212 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:27:16,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:27:16,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
2025-10-31 20:27:16,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2025-10-31 20:27:16,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:27:16,213 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:27:16,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:27:16,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-10-31 20:27:16,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,214 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
2025-10-31 20:27:16,215 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
2025-10-31 20:27:16,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
2025-10-31 20:27:16,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,216 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,217 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:27:16,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-10-31 20:27:16,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,218 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:27:16,219 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:27:16,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-10-31 20:27:16,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
2025-10-31 20:27:16,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-10-31 20:27:16,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:27:16,220 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
2025-10-31 20:27:16,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-10-31 20:27:16,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,221 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:27:16,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:27:16,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,222 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2025-10-31 20:27:16,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,223 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:27:16,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:27:16,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,224 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-10-31 20:27:16,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-10-31 20:27:16,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
2025-10-31 20:27:16,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,225 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-10-31 20:27:16,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:27:16,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-10-31 20:27:16,226 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:27:16,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-10-31 20:27:16,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2025-10-31 20:27:16,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,227 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,228 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-10-31 20:27:16,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-10-31 20:27:16,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-10-31 20:27:16,229 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-10-31 20:27:16,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-10-31 20:27:16,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1425 - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-10-31 20:27:16,230 - matplotlib.font_manager - DEBUG - _findfont_cached:1457 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=9.0 to DejaVu Sans ('C:\\Users\\LENOVO\\Desktop\\prints\\.venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2025-10-31 20:27:16,681 - src.utils.visualization - INFO - plot_delta_e_summary_bars:440 - Delta E summary bar chart saved to: C:\Users\LENOVO\Desktop\prints\output\datasets\block\summaries\block_delta_e_summary.png
2025-10-31 20:27:16,694 - src.pipeline - INFO - timer:58 - Completed: Saving Final Results in 0.75 seconds
2025-10-31 20:27:16,695 - src.pipeline - INFO - timer:58 - Completed: Total Pipeline in 446.54 seconds
2025-10-31 20:27:16,695 - src.pipeline - INFO - run:179 - ==================================================
2025-10-31 20:27:16,695 - src.pipeline - INFO - run:180 - Processing Pipeline RUN completed successfully for: block
2025-10-31 20:27:16,696 - src.pipeline - INFO - run:181 - ==================================================
2025-10-31 20:27:16,696 - __main__ - INFO - main:101 - Main execution finished successfully.
2025-10-31 20:27:16,697 - __main__ - INFO - main:120 - ================================================================================
PROCESSING COMPLETED IN 446.57 SECONDS
================================================================================
